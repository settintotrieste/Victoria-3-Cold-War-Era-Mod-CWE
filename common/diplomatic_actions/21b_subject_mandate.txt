mandate = {
	groups= { general }
	can_select = no
	can_use_obligations = yes

	#Not available except outside scripted events
	potential = {
		always = no
	}
	
	pact = {
		cost = 5
		
		#can_be_used_in_sway_offers = no
		
		has_junior_participant = yes
		recipient_pays_maintenance = no
		#is_customs_union = yes
		
		#Cash support from overlord
		income_transfer = 0.20
		second_country_gets_income_transfer = no
		income_transfer_based_on_second_country = yes
		
		#relations_progress_per_day = 1
		#relations_improvement_max = 50
	
		target_requires_approval_to_break = yes	
		
		subject_type = subject_type_mandate
		
		second_modifier = {
			country_law_enactment_imposition_success_add = 0.1
			country_convoy_contribution_to_market_owner_add = 0.5
		}
		
		actor_can_break = {
			is_diplomatic_play_committed_participant = no
			relinquishing_of_subjects_permitted = yes
		}

		target_can_break = {
			is_diplomatic_play_committed_participant = no
		}		

		manual_break_effect = {
		
			create_bidirectional_truce = { country = scope:target_country months = 60 }
			
			change_relations = { country = scope:target_country value = 50 }
			
			#Subject becomes a personal union if overlord is a monarchy
			if = {
				limit = { scope:actor = { is_a_monarchy = yes } }
				scope:target_country = {
					activate_law = law_type:law_HOS_monarch
				}
				scope:actor = {
					create_diplomatic_pact = {
						country = scope:target_country
						type = personal_union
					}
				}
			}
			
			#Subject becomes a republic if overlord was not a monarchy
			if = {
				limit = { scope:actor = { NOT = { is_a_monarchy = yes } } }
				scope:target_country = {
					activate_law = law_type:law_HOS_president
				}
				scope:actor = {
					create_diplomatic_pact = {
						country = scope:target_country
						type = protectorate
					}
				}
			}
			
			#International community loves this
			change_infamy = -15
			
		}
		
		auto_break_effect = {
		
			create_bidirectional_truce = { country = scope:target_country months = 12 }
			
			#Subject becomes a personal union if overlord is a monarchy
			if = {
				limit = { scope:actor = { is_a_monarchy = yes } }
				scope:target_country = {
					activate_law = law_type:law_HOS_monarch
				}
				scope:actor = {
					create_diplomatic_pact = {
						country = scope:target_country
						type = personal_union
					}
				}
			}
			
			#Subject becomes a republic if overlord was not a monarchy
			if = {
				limit = { scope:actor = { NOT = { is_a_monarchy = yes } } }
				scope:target_country = {
					activate_law = law_type:law_HOS_president
				}
				scope:actor = {
					create_diplomatic_pact = {
						country = scope:target_country
						type = protectorate
					}
				}
			}
			
		}
		
	}
	
	ai = {
		check_acceptance_for_will_break = yes
		
		will_break = {
			is_subject_of = scope:target_country
			has_attitude = {
				who = scope:target_country
				attitude = rebellious
			}			
		}
		
		propose_break_score = {
			value = 10
		}		
		
		accept_break_score = {
			value = 0

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_BASE"
				value = -100
			}				
	
			if = {
				limit = { has_truce_with = scope:actor }
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_TRUCE"
					value = -1000
				}	
			}			
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_ARMY_STRENGTH"
				value = "scope:actor.ai_army_comparison(root)"
				add = 0.5
				multiply = 5
				min = -50
				max = 50
			}		

			if = {
				limit = {
					"scope:actor.ai_ideological_opinion(root)" > 0
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION"
					value = "scope:actor.ai_ideological_opinion(root)"
					multiply = -0.25
					min = -10
				}					
			}
			else_if = {
				limit = {
					"scope:actor.ai_ideological_opinion(root)" < 0
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION_NEGATIVE"
					value = "scope:actor.ai_ideological_opinion(root)"
					multiply = -0.25
					max = 10
				}					
			}							
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_ATTITUDE"	
				if = {
					limit = {
						has_attitude = {
							who = scope:actor
							attitude = domineering
						}								
					}
					value = -50
				}							
			}			

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_RELATIONS"	
				if = {
					limit = {
						"relations(scope:actor)" < relations_threshold:cordial
					}
					value = -25
				}					
				if = {
					limit = {
						"relations(scope:actor)" >= relations_threshold:cordial
						"relations(scope:actor)" < relations_threshold:amicable
					}
					value = 10
				}					
				if = {
					limit = {
						"relations(scope:actor)" >= relations_threshold:amicable
						"relations(scope:actor)" < relations_threshold:friendly
					}
					value = 25
				}	
				if = {
					limit = {
						"relations(scope:actor)" >= relations_threshold:friendly
					}
					value = 50
				}				
			}
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_INFAMY"
				if = {
					limit = {
						"scope:actor.infamy" >= infamy_threshold:infamous
						"scope:actor.infamy" < infamy_threshold:notorious
					}
					value = -25
				}	
				if = {
					limit = {
						"scope:actor.infamy" >= infamy_threshold:notorious
						"scope:actor.infamy" < infamy_threshold:pariah
					}
					value = -50
				}
				if = {
					limit = {
						"scope:actor.infamy" >= infamy_threshold:pariah
					}
					value = -100
				}					
			}					

			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_RANK"
	
				if = {
					limit = { scope:actor = { country_rank > root.country_rank } }
					value = 10
				}
				
				if = {
					limit = { scope:actor = { country_rank < root.country_rank } }
					value = -10
				}				
			}	

			if = {
				limit = {
					any_country = {
						NOT = { this = root }
						OR = {
							country_rank >= root.country_rank
							army_size >= root.army_size
						}
						
						OR = {
							has_diplomatic_pact = {
								who = scope:actor
								type = alliance
							}
							has_diplomatic_pact = {
								who = scope:actor
								type = defensive_pact
							}									
						}							
					}
				}
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_POWERFUL_PROTECTORS_US"
					value = 25
				}	
			}		
		}	

		use_obligation_chance = {
			value = 50
		}

		owe_obligation_chance = {
			value = 25
		}		
	}
}