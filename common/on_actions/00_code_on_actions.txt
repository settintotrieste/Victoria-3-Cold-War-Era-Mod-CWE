# For on_actions launched by the code itself.

# Fires when bookmark initialization is complete but players are still in the lobby
# At this point we do not know who the players are
# No root scope set
on_game_started = {
	effect = {
		# Memento Mori
		every_country = {
			every_interest_group = {
				leader = {
					if = {
						limit = {
							NOT = {
								has_variable = memento_mori_immunity
							}
						}
						set_variable = {
							name = memento_mori_immunity
							years = 5
						}
					}
				}
			}
		}
	}
}

# Fires after everyone enters the game from the lobby for the first time for each campaign
# At this point we DO know who the players are
# No root scope set
on_game_started_after_lobby = {
	effect = {
		
	}
}

# No root scope set
on_monthly_pulse = {
	effect = {
		every_character_in_exile_pool = {
			limit = {
				is_historical = no
				popularity <= -100
			}
			kill_character = yes
		}

		every_character_in_jail = { # Music too loud? Right to jail. Right away. Driving too fast? Jail. Slow? Jail. You undercook fish? Believe it or not, jail.
			save_scope_as = prisoner_scope
			change_variable = { name = prison_time_var subtract = 1 }
			if = {
				limit = {
					NOT = {
						exists = var:prison_country
					}
				}
				kill_character = yes
			}
			else_if = {
				limit = {
					exists = var:prison_country
					var:prison_time_var <= 0
				}
				free_character_from_void = yes
				owner ?= {
					post_notification = prisoner_out_of_jail
				}
				remove_variable = prison_country
				remove_variable = prison_time_var
			}
		}

	}
}

on_yearly_pulse = { }

# Root = Country
on_monthly_pulse_country = {
	events = {
		communism.8 # Red Army
		unable_to_enact.1

		# Exile Agitators Events
		yeet_agitator_events.1
		yeet_agitator_events.2
		yeet_agitator_events.3
		
		# Set Hierarchy Events
		set_hierarchy_event.1 # Sets British Indian Caste System
		set_hierarchy_event.2 # Replaces British Indian Caste System with Default
	}
	on_actions = { # delay ensures events won't fire simultaneously
		coup_monthly_events
		delay = { days = 4 }
		fund_lobbies_monthly_events
	}
}

on_yearly_pulse_country = {
	effect = {
	
		# IG leader death
		random_list = {
			1 = {
				trigger_event = { id = character_events.100 }
			}
			1 = { }
		}

		if = {
			limit = {
				NOR = {
					has_variable = gov_petition_fired
					has_variable = gov_petition_cooldown
					has_modifier = modifier_successfully_met_petition_legitimacy
					any_interest_group = {
						has_modifier = modifier_failed_to_meet_petition
					}
					has_journal_entry = je_government_petition
					is_revolutionary = yes
					is_secessionist = yes
				}
				ig_desires_laws_for_petition = yes
			}
			if = {
				limit = {
					has_variable = gov_petition_coin_toss
				}
				random_list = {
					1 = { 
						trigger = {
							any_interest_group = {
								is_in_government = yes
								is_marginal = no
								any_preferred_law = {
									law_is_valid_for_ig_petition = yes
								}
							}
						}
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					1 = {
	
					}
				}
				remove_variable = gov_petition_coin_toss
			}
			else = {
				random_list = {
					trigger = {
						any_interest_group = {
							is_in_government = yes
							is_marginal = no
							any_preferred_law = {
								law_is_valid_for_ig_petition = yes
							}
						}
					}
					1 = { 
						set_variable = { name = gov_petition_cooldown years = 10 }
						set_variable = { name = gov_petition_fired months = 3 }
						trigger_event = { id = government_petition_events.1 }
					}
					9 = {
	
					}
				}
			}
		}
		
	}
	on_actions = { # delay ensures events won't fire simultaneously
		on_memento_mori # IG leader death
		on_yearly_events
		delay = { days = 1 }
		russian_monarchy_yearly_events
		delay = { days = 1 }
		springtime_of_peoples_yearly_events
		delay = { days = 2 }
		bp1_misc_yearly_events
		delay = { days = 3 }
		indochina_yearly_events
		ip2_misc_yearly_events
		delay = { days = 5 }
		exiles_yearly_events
		delay = { days = 8 }
		historical_agitators_yearly_events
		famine_yearly_events
		delay = { days = 13 }
		slavery_abolition_yearly_events
		delay = { days = 21 }
		lobby_yearly_events
		delay = { days = 34 }
		krakatoa_yearly_events
		delay = { days = 55 }
		tunguska_yearly_events
		delay = { days = 89 }
		british_dictate_yearly_events
		ep1_misc_yearly_events
	}
	
}
on_half_yearly_pulse_country = {
	on_actions = { # delay ensures events won't fire simultaneously
		on_half_yearly_events
		delay = { days = 4 }
		silkworm_half_yearly_events
		delay = { days = 14 }
		korea_half_yearly_events
		delay = { days = 17 }
		lobbies_proposals_half_yearly_events
		delay = { days = 20 }
		movement_half_yearly_events
	}
	effect = {
		if = {
			limit = {
				has_variable = recently_traded_states_counter
			}
			if = {
				limit = {
					var:recently_traded_states_counter > 1
				}
				change_variable = {
					name = recently_traded_states_counter
					subtract = 1
				}
			}
			else = {
				remove_variable = recently_traded_states_counter
			}
		}
	}
}
on_five_year_pulse_country = {
	events = {
		generals.1
	}
}


on_decade_pulse_country = {
	random_events = {
		chance_of_no_event = 95
		1 = plague.1
	}
}

# Only fires for countries with Elections enabled
on_monthly_pulse_country_elections = {
	
}

# Root = Character
on_monthly_pulse_character = {
	effect = {
		if = {
			limit = {
				AND = {
					has_trait = trait_child
					age >= define:NCharacters|ADULT_AGE
				}
			}
			remove_trait = trait_child
			add_random_trait = personality
		}
	}
}
on_yearly_pulse_character = {
	on_actions = {
		on_wounded
	}
}
on_half_yearly_pulse_character = {}
on_five_year_pulse_character = {}
on_decade_pulse_character = {}

# Root = State
on_monthly_pulse_state = {
	random_events = {
		10 = goldrush.5
	}

}

on_half_yearly_pulse_state = {
	random_events = {
		delay = { days = 23 }
		1 = paralegal_discrimination.1
	}
}

on_yearly_pulse_state = {
	random_events = {
		80 = 0
		10 = oil_rush.3
		10 = oil_rush.4
	}
	on_actions = {
	}
}
on_five_year_pulse_state = {}
on_decade_pulse_state = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_started = {
	effect = {
		
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_ended = {}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_won = {
	events = {
		
	}
}

# Root = attacker or defender country
# scope:enemy_country = enemy of root
# scope:battle = battle
# scope:attacker = attacking commander
# scope:defender = defending commander
# scope:state = location state
on_battle_lost = {}

# Root = Building
on_building_built = {
}

# Root = Building
on_start_expanding_building = {
}

# Root = Building
on_building_expanded = {
}

# Does not appear
on_deactivate_link = {
}

# Root = From Market
# scope:market = Market merging into
# scope:trade_center = Trade Center state of root
on_merge_markets = {
}

# Root = State having the link retargeted
on_retarget_link = {
}

# Root = The newly created market
on_create_market = {
}

# Root = The applicable country
# scope:technology = The technology type they started to research
on_research_technology_started = {
	effect = {
		if = {
			limit = { 
				has_journal_entry = je_tutorial_research_technology
			}
			je:je_tutorial_research_technology = {
				set_target_technology = scope:technology
			}
			set_variable = tut_began_new_research
		}
	}
}

# Root = The applicable country
# scope:technology = The technology type they just acquired
on_acquired_technology = {
	effect = {
		if = {
			limit = {
				has_game_started = yes
			}
			post_notification = acquired_technology_notification
		}
		if = {
			limit = {
				is_player = yes
				has_technology_researched = tech_mining_1
			}
			if = {
				limit = {
					any_scope_state = {
						OR = { 
							has_potential_resource = bg_oil_extraction
							has_potential_resource = bg_natural_gas_extraction
						}
					}
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
				random_scope_state = {
					limit = {
						has_potential_resource = bg_natural_gas_extraction
					}
					force_resource_discovery = bg_natural_gas_extraction
				}
			}
			else_if = {
				limit = {
					any_country = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							OR = { 
								has_potential_resource = bg_oil_extraction
								has_potential_resource = bg_natural_gas_extraction
							}
						}
					}
				}
				random_country = {
					limit = {
						has_overlapping_interests = ROOT
						any_scope_state = {
							OR = { 
								has_potential_resource = bg_oil_extraction
								has_potential_resource = bg_natural_gas_extraction
							}
						}
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_oil_extraction
						}
						force_resource_discovery = bg_oil_extraction
					}
					random_scope_state = {
						limit = {
							has_potential_resource = bg_natural_gas_extraction
						}
						force_resource_discovery = bg_natural_gas_extraction
					}
				}
			}
			else = {
				random_state = {
					limit = {
						has_potential_resource = bg_oil_extraction
					}
					force_resource_discovery = bg_oil_extraction
				}
				random_state = {
					limit = {
						has_potential_resource = bg_natural_gas_extraction
					}
					force_resource_discovery = bg_natural_gas_extraction
				}
			}
		}
	}

	events = {
		historical_events.1
		marx_events.1
	}
}

# Root = The applicable country
# scope:technology = The technology type that has started to spread to them
on_spreading_technology = {
	effect = {
		post_notification = spreading_technology_notification
	}
}

# Fires when a diplomatic play is started
# root = The diplomatic play that has been started
# scope:initiator = Initiator of the play
# scope:target = Target of the play
on_diplomatic_play_started = {
	effect = {
		if = {
			limit = { is_diplomatic_play_type = dp_unify_germany }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = GER }
				}
				
				scope:initiator = { annex = prev }
			}
		}
		
		if = {
			limit = { is_diplomatic_play_type = dp_unify_italy }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = ITA }
				}
				
				scope:initiator = { annex = prev }
			}
		}

		if = {
			limit = { is_diplomatic_play_type = dp_unify_scandinavia }
			every_country = {
				limit = {
					is_supporting_unification_candidate = { who = scope:initiator country_formation = SCA }
				}
				
				scope:initiator = { annex = prev }
			}
		}		
	}
}

# Root = Character
on_character_creation = {

	effect = {
		if = {
			limit = {
				NOT = { has_variable = memento_mori_immunity }
			}
			set_variable = {
				name = memento_mori_immunity
				years = 10
			}
		}
		#Politicians always have state religion
		if = {
			limit = {
				is_historical = no
				interest_group = { 
					OR = { 
						is_in_government = yes 
						is_interest_group_type = ig_devout
					}
				}
				owner ?= {
					has_law = law_type:law_state_religion
				}
				NOT = { owner.religion ?= religion }
			}
			if = {
				limit = { is_ruler = yes }
				change_character_religion = owner.religion
			}
			else = {
				random_list = {
					2 = {
						change_character_religion = owner.religion
					}
					1 = {
						
					}
				}
			}
		}
		if = {
			limit = {
				is_historical = no
				interest_group = { NOT = { is_interest_group_type = ig_devout } }
				owner ?= {
					has_law = law_type:law_state_atheism
				}
				NOT = { owner.religion ?= religion }
			}
			if = {
				limit = { is_ruler = yes }
				change_character_religion = owner.religion
			}
			else = {
				random_list = {
					2 = {
						change_character_religion = owner.religion
					}
					1 = {
						
					}
				}
			}
		}
		#Mark all monarchs
		if = {
			limit = { 
				is_ruler = yes
				owner ?= {
					is_a_regime_monarchy = yes
					is_a_constitutional_monarchy = no
				}
			}
			set_character_as_monarch = yes
		}
	}

}

# Root = Character
on_character_death = {
	effect = {
		
		#Power Vacuum if a dictatorship
		if = {
			limit = { is_ruler = yes }
			owner = {
				if = {
					limit = { 
						is_a_dictatorship = yes 
						NOT = { is_a_country_with_elections = yes }
						NOT = { ruler_is_term_limited = yes }
					}
					hidden_effect = { remove_modifier = power_vacuum_modifier }
					add_modifier = { name = power_vacuum_modifier years = 5 is_decaying = yes }
					trigger_event = { id = revolution_system.6 }
				}
				else_if = {
					limit = { 
						is_a_dictatorship = yes 
						is_a_country_with_elections = yes
						NOT = { ruler_is_term_limited = yes }
					}
					hidden_effect = { remove_modifier = power_vacuum_modifier }
					add_modifier = { name = power_vacuum_modifier years = 2 is_decaying = yes }
					trigger_event = { id = revolution_system.6 }
				}
			}
		}
		
	}
}

# Root = Character
on_new_ruler = {
	effect = {
		
		post_notification = new_ruler
		
	}
}

# Root = Country
on_country_default = {
	effect = {
		add_modifier = country_default	

		this = {
			save_scope_as = in_default_country
		}

		every_cobelligerent_in_war = {
			post_notification = cobelligerent_in_default_notification
		}

		every_enemy_in_war = {
			post_notification = enemy_in_default_notification
		}
	}
}

# Root = Country
on_country_no_longer_default = {
	effect = {
		remove_modifier = country_default	
	}
}

# Root = Diplomatic Action
on_diplomatic_action = {
	effect = {
		post_notification = diplomatic_action_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal = {
	effect = {
		post_proposal = proposal_diplomatic_action
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_accepted = {
	effect = {
		post_notification = diplomatic_proposal_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_owe_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_call_in_obligation = {
	effect = {
		post_proposal = proposal_diplomatic_action_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_declined = {
	effect = {
		post_notification = diplomatic_proposal_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_break = {
	effect = {
		post_notification = diplomatic_action_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break = {
	effect = {
		post_proposal = proposal_break_pact
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_owe_obligation = {
	effect = {
		post_proposal = proposal_break_pact_owe_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_call_in_obligation = {
	effect = {
		post_proposal = proposal_break_pact_call_in_obligation
	}
}

# Root = Diplomatic Action
on_diplomatic_proposal_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party = {
	effect = {
		post_notification = diplomatic_proposal_third_party_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_accepted = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_accepted
	}
}

# Root = Diplomatic Action
on_diplomatic_action_third_party_break_declined = {
	effect = {
		post_notification = diplomatic_proposal_third_party_break_declined
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_decrease_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_decrease_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_overlord_increase_autonomy = {
	effect = {
		post_notification = diplomatic_action_overlord_increase_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomatic_action_subject_increase_own_autonomy = {
	effect = {
		post_notification = diplomatic_action_subject_increase_own_autonomy_notification
	}
}

# Root = Diplomatic Action
on_diplomats_expelled = {
	effect = {
		if = {
			limit = {
				scope:initiator = {
					has_variable = we_are_not_amused_ach_possible
				}
				scope:target = {
					c:FRA ?= this
					"relations(scope:initiator)" >= -10 #Why? Because the on_action fires after the opinion malus from expel diplomats occurs.
				}
			}
			scope:initiator = {
				set_variable = achievement_we_are_not_amused
			}
		}
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_auto_break = {
	effect = {
		post_notification = diplomatic_pact_auto_break_notification
	}
}

# Root = Diplomatic Pact
on_diplomatic_pact_third_party_auto_break = {
	effect = {
		post_notification = diplomatic_pact_third_party_auto_break_notification
	}
}

# Root = Treaty
on_treaty_proposed = {
	effect = {
		post_proposal = proposal_treaty
	}
}

# Root = Treaty
on_treaty_proposal_declined = {
	effect = {
		post_notification = treaty_proposal_declined
	}
}

# Root = Treaty
on_treaty_entered_into_force = {
	effect = {
		post_notification = treaty_entered_into_force
	}
}

# Root = Treaty
# Fires in addition to on_treaty_entered_into_force for treaties enforced by plays, etc
on_treaty_enforced = {
	effect = {
		root.first_country = {
			create_diplomatic_catalyst = {
				type = catalyst_treaty_enforced
				target = root.second_country
			}
		}
	}
}

# Root = Treaty
# scope:withdrawing_country = Withdrawing Country
# scope:non_withdrawing_country = Non-Withdrawing Country
# Fires when the binding period is not active
on_country_withdrawn_from_treaty = {
	effect = {
		post_notification = country_withdrawn_from_treaty
	}
}

# Root = Treaty
# scope:withdrawing_country = Withdrawing Country
# scope:non_withdrawing_country = Non-Withdrawing Country
# Fires instead of on_country_withdrawn_from_treaty when the binding period is still active
on_country_broke_treaty = {
	effect = {
		post_notification = country_broke_treaty

		scope:withdrawing_country = {
			create_diplomatic_catalyst = {
				type = catalyst_treaty_broken
				target = scope:non_withdrawing_country
			}

			add_modifier = {
				name = modifier_untrustworthy_country
				days = long_modifier_time
				multiplier = {
					value = 1
					add = {
						root = {
							every_scope_article = {
								if = {
									limit = {
										OR = {
											has_type = alliance
											has_type = state_transfer
										}
									}
									add = 5
								}
								else_if = {
									limit = {
										OR = {
											has_type = defensive_pact
											has_type = treaty_port
										}
									}
									add = 3
								}
								else_if = {
									limit = {
										OR = {
											has_type = guarantee_independence
											has_type = support_independence
										}
									}
									add = 2
								}
							}
						}
					}
					max = 20
				}
			}
		}
	}
}

# Root = Treaty
on_treaty_dissolved = {
	effect = {
		post_notification = treaty_dissolved
	}
}

# Root = Treaty
# scope:article = Treaty Article
on_treaty_article_removed = {
	effect = {
		post_notification = treaty_article_removed
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_independent = {
	effect = {
		
		#Create Personal Union if monarchy
		if = {
			limit = { 
				scope:target = {
					is_sufficiently_independent = yes
					is_a_monarchy = yes
				}
				ROOT = { is_a_monarchy = yes }
			}
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = personal_union
				}
			}
		}
		
		#Create Client State if not monarchy
		if = {
			limit = { 
				scope:target = {
					is_sufficiently_independent = yes
					NOT = { is_a_monarchy = yes }
				}
			}
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = protectorate
				}
			}
		}
		
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_own_subject = {
	effect = {
		
		#SAR
		if = {
			limit = { 
				scope:target = { 
					is_direct_subject_of = ROOT 
					NOT = { is_sufficiently_independent = yes }
					capital = { is_homeland_of_country_cultures = ROOT }
				}
			}
			scope:target = { make_independent = yes }
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = special_administrative_region
				}
				create_diplomatic_pact = {
					country = scope:target
					type = currency_union
				}
				create_diplomatic_pact = {
					country = scope:target
					type = legal_union
				}
			}
		}
		
		#Puppet
		else_if = {
			limit = { 
				scope:target = { 
					is_direct_subject_of = ROOT 
					NOT = { is_sufficiently_independent = yes }
					capital = { NOT = { is_homeland_of_country_cultures = ROOT } }
				}
				OR = {
					AND = { ROOT = { country_is_in_europe = yes } scope:target = { country_is_in_europe = yes } }
					AND = { ROOT = { country_is_in_north_america = yes } scope:target = { country_is_in_north_america = yes } }
					AND = { ROOT = { country_is_in_central_america = yes } scope:target = { country_is_in_central_america = yes } }
					AND = { ROOT = { country_is_in_south_america = yes } scope:target = { country_is_in_south_america = yes } }
					AND = { ROOT = { country_is_in_africa = yes } scope:target = { country_is_in_africa = yes } }
					AND = { ROOT = { country_is_in_middle_east = yes } scope:target = { country_is_in_middle_east = yes } }
					AND = { ROOT = { country_is_in_central_asia = yes } scope:target = { country_is_in_central_asia = yes } }
					AND = { ROOT = { country_is_in_india = yes } scope:target = { country_is_in_india = yes } }
					AND = { ROOT = { country_is_in_east_asia = yes } scope:target = { country_is_in_east_asia = yes } }
					AND = { ROOT = { country_is_in_southeast_asia = yes } scope:target = { country_is_in_southeast_asia = yes } }
				}
			}
			scope:target = { make_independent = yes }
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = puppet
				}
			}
		}
		
		else = {
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = currency_union
				}
				create_diplomatic_pact = {
					country = scope:target
					type = legal_union
				}
			}
		}
		
	}
}
### Removed as it causes a crash ###
# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_company_subject = {
	effect = {
		add_modifier = {
			name = colonial_administration
		}
	}
}

# Root = Releasing Country
# scope:target = Released Country
on_country_released_as_overlord_subject = {
	effect = {
		
		#SAR
		if = {
			limit = { 
				scope:target = { 
					is_direct_subject_of = ROOT 
					NOT = { is_sufficiently_independent = yes }
					capital = { is_homeland_of_country_cultures = ROOT }
				}
			}
			scope:target = { make_independent = yes }
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = special_administrative_region
				}
				create_diplomatic_pact = {
					country = scope:target
					type = currency_union
				}
				create_diplomatic_pact = {
					country = scope:target
					type = legal_union
				}
			}
		}
		
		#Puppet
		else_if = {
			limit = { 
				scope:target = { 
					is_direct_subject_of = ROOT 
					NOT = { is_sufficiently_independent = yes }
					capital = { NOT = { is_homeland_of_country_cultures = ROOT } }
				}
				OR = {
					AND = { ROOT = { country_is_in_europe = yes } scope:target = { country_is_in_europe = yes } }
					AND = { ROOT = { country_is_in_north_america = yes } scope:target = { country_is_in_north_america = yes } }
					AND = { ROOT = { country_is_in_central_america = yes } scope:target = { country_is_in_central_america = yes } }
					AND = { ROOT = { country_is_in_south_america = yes } scope:target = { country_is_in_south_america = yes } }
					AND = { ROOT = { country_is_in_africa = yes } scope:target = { country_is_in_africa = yes } }
					AND = { ROOT = { country_is_in_middle_east = yes } scope:target = { country_is_in_middle_east = yes } }
					AND = { ROOT = { country_is_in_central_asia = yes } scope:target = { country_is_in_central_asia = yes } }
					AND = { ROOT = { country_is_in_india = yes } scope:target = { country_is_in_india = yes } }
					AND = { ROOT = { country_is_in_east_asia = yes } scope:target = { country_is_in_east_asia = yes } }
					AND = { ROOT = { country_is_in_southeast_asia = yes } scope:target = { country_is_in_southeast_asia = yes } }
				}
			}
			scope:target = { make_independent = yes }
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = puppet
				}
			}
		}
		
		else = {
			ROOT = { 
				create_diplomatic_pact = {
					country = scope:target
					type = currency_union
				}
				create_diplomatic_pact = {
					country = scope:target
					type = legal_union
				}
			}
		}
		
	}
}

# Root = Country
on_country_formed = {
	effect = {
		if = { 
			limit = { has_variable = dynamic_decolonisation_country }
			remove_variable = dynamic_decolonisation_country
		}
	}
}

# Root = State
on_migration_target_created = {
	effect = {
		post_notification = migration_target_created
	}
}

# Root = State
on_migration_target_created_other = {
	effect = {
		post_notification = migration_target_created_other
	}
}

# Root = State
on_resource_discovered = {
	events = {
		goldrush.1
		oil_rush.1
		rubber_events.1
	}
}

# Root = State
on_resource_depleted = {
	effect = {
		state_region = {
			post_notification = resource_depleted
		}
	}
	events = {
		goldrush.2
	}
}

# Root = Country
on_peace_agreement_signed_war_leader = {
	effect = {
		post_notification = peace_agreement_signed_war_leader
	}
}

# Root = Country
on_peace_agreement_signed_war_participant = {
	effect = {
		post_notification = peace_agreement_signed_war_participant
	}
}

# Root = Country
on_peace_agreement_signed_non_participant = {
	effect = {
		post_notification = peace_agreement_signed_non_participant
	}
}

# Root = Country
on_capitulation = {
	effect = {
		set_variable = {
            name = recently_lost_war
            days = 1825
            value = yes
        }
		set_variable = {
            name = has_lost_a_war
            days = 100
            value = yes
        }
		every_scope_cobelligerent = {
			limit = { has_subject_relation_with = ROOT }
			set_variable = {
				name = recently_lost_war
				days = 1825
				value = yes
			}
			set_variable = {
				name = has_lost_a_war
				days = 100
				value = yes
			}
		}
	}
}

# Root = Country
on_self_capitulated_notification = {
	effect = {
		post_notification = self_capitulated
		set_variable = {
			name = recent_capitulation
			days = short_modifier_time
		}
		set_variable = {
			name = recently_lost_war
			days = 1825
			value = yes
		}
		set_variable = {
            name = has_lost_a_war
            days = 100
            value = yes
        }
		every_scope_cobelligerent = {
			limit = { has_subject_relation_with = ROOT }
			set_variable = {
				name = recent_capitulation
				days = short_modifier_time
			}
			set_variable = {
				name = recently_lost_war
				days = 1825
				value = yes
			}
			set_variable = {
				name = has_lost_a_war
				days = 100
				value = yes
			}
		}
	}
}

# Root = Country
on_enemy_capitulated_notification = {
	effect = {
		post_notification = enemy_capitulated
	}
}

# Root = Country
on_ally_capitulated_notification = {
	effect = {
		post_notification = ally_capitulated
	}
}

# Root = Formation
on_mobilized_army = {
	effect = {
		
	}
}

# Root = Formation
on_demobilized_army = {
	effect = {
		
	}
}

# Root = Character
on_mobilized_general = {
}

# Root = Character
on_demobilized_general = {
}

# Root = Diplomatic Play
on_diplo_play_start = {
	effect = {
		post_notification = diplo_play_start_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_start_third_party = {
	effect = {
		post_notification = diplo_play_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down = {
	effect = {
		post_notification = diplo_play_back_down_notification
		if = {
			limit = {
				scope:notification_target = {
					is_player = yes
				}
				scope:actor = {
					is_player = no
				}
			}
			set_global_variable = achievement_mightier_than_the_sword
		}
	}
}

# Root = Diplomatic Play
on_diplo_play_back_down_involved = {
	effect = {
		post_notification = diplo_play_back_down_involved_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_join_side = {
	effect = {
		post_notification = diplo_play_join_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_abandon_side = {
	effect = {
		post_notification = diplo_play_abandon_side_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_war_start = {
	effect = {
		post_notification = diplo_play_war_start_notification
		post_notification = diplo_play_war_start_third_party_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released = {
	effect = {
		post_notification = diplo_play_subject_released_notification
	}
}

# Root = Diplomatic Play
on_diplo_play_subject_released_overlord = {
	effect = {
		post_notification = diplo_play_subject_released_overlord_notification
	}
}

# Root = Diplomatic Play
# country = Country switched to
# previous = Country switched from
on_diplo_play_switch_sides = {
	effect = {
		set_global_variable = achievement_revo_needed
	}
}

# Root = Diplomatic Play
on_diplo_play_declare_neutrality = {
	effect = {
		post_notification = diplo_play_declare_neutrality_notification
	}
}


# Root = Diplomatic Play
on_sway_offer = {
	effect = {
		post_proposal = proposal_sway_offer
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer = {
	effect = {
		post_proposal = proposal_reverse_sway_offer
	}
}

# Root = Diplomatic Play
on_sway_offer_accepted = {
	effect = {
		post_notification = sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_accepted = {
	effect = {
		post_notification = reverse_sway_offer_accepted
	}
}

# Root = Diplomatic Play
on_country_swayed = {
	effect = {
		post_notification = country_swayed
	}
}

# Root = Diplomatic Play
on_sway_offer_rejected = {
	effect = {
		post_notification = sway_offer_rejected
	}
}

# Root = Diplomatic Play
on_reverse_sway_offer_rejected = {
	effect = {
		post_notification = reverse_sway_offer_rejected
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand = {
	effect = {
		post_proposal = proposal_diplomatic_demand
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_accepted = {
	effect = {
		post_notification = diplomatic_demand_accepted
	}
}

# Root = Diplomatic Demand
on_diplomatic_demand_rejected = {
	effect = {
		post_notification = diplomatic_demand_rejected
	}
}

# Root = Building
on_production_method_changed = {
	effect = {
		owner = {
			if = {
				limit = { 
					has_journal_entry = je_tutorial_change_production_method
					je:je_tutorial_change_production_method.target = root
				}
				set_variable = has_changed_production_method
			}
		}	
	}
}

# Root = owner Country of the Law
# Executed when enactment of any law begins
on_law_enactment_started = {
	effect = {
		if = {
			limit = {
				has_law = law_type:law_HOS_monarch
				OR = {
					is_enacting_law = law_type:law_HOS_president
					is_enacting_law = law_type:law_HOS_religious_leader
					is_enacting_law = law_type:law_HOS_nationalist_leader
					is_enacting_law = law_type:law_HOS_communist_leader
				}
			}
			set_variable = {
				name = abolishing_monarchy_var
				value = 0
			}
			add_journal_entry = { type =  je_abolish_monarchy }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is success
on_law_checkpoint_success = {
	effect = {
		add_enactment_phase = 1
		if = {
			limit = {
				enacting_any_law = yes
			}
			trigger_event = { id = law_notification.4 days = 0 }
		}
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is advance
on_law_checkpoint_advance = {
	random_events = {
		10 = laws.1
		10 = children_rights_events.1 
		10 = free_speech_laws.1
		10 = free_speech_laws.2
		10 = labor_rights.1
		10 = labor_rights.4
		10 = children_rights_events.4
		10 = welfare_laws.1
		10 = welfare_laws.4
		10 = welfare_laws.8
		10 = migration_laws.1
		10 = migration_laws.4
		10 = bureaucracy.2
		10 = colonization.1
		10 = colonization.3
		10 = rights_of_women_laws.1
		10 = rights_of_women_laws.2
		10 = internal_security_events.2
		10 = slavery_law_events.1
		10 = slavery_law_events.4
		10 = laws_police.1
		10 = anarchy.3
		10 = tax.2
		10 = tax.5
		10 = theocracy.1
		10 = citizenship_laws.1
		10 = citizenship_laws.4
		100 = 1848.1
		100 = 1848.3
		10 = education_laws.1
		10 = education_laws.4
		10 = distribution_of_power_laws.1
		10 = council_republic_law_events.1
		10 = distribution_of_power_laws.4
		10 = monarchy_law_events.1
		10 = monarchy_law_events.2
		10 = economy_laws.1
		10 = economy_laws.4
		10 = meiji.4
		10 = meiji.5
		10 = meiji.6
		10 = conscription_laws.1
		10 = republic_laws.1
		10 = internal_security_events.4
		10 = healthcare_laws.1
		10 = healthcare_laws.4
		10 = anti_state_religion.1
		10 = distribution_of_power_laws.7
		10 = distribution_of_power_laws.10
		10 = rights_of_women_laws.5
		10 = agitators_law_events.3
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.17
		10 = agitators_law_events.21
		10 = agitators_law_events.22
		10 = agitators_law_events.23
		10 = agitators_law_events.24
		10 = agitators_law_events.25
		10 = agitators_law_events.26
		10 = agitators_law_events.27
		10 = agitators_law_events.28
		10 = agitators_law_events.29
		10 = agitators_law_events.30
		10 = state_atheism.2
		10 = state_atheism.6
		2 = generic_laws.1
		2 = generic_laws.4
		2 = generic_laws.7
		2 = generic_laws.10
		2 = ig_petitions.4 #Devout want State Religion
		2 = ig_petitions.7 #Intelligentsia want free speech
		2 = ig_petitions.19 #Armed forces want conscription
		2 = ig_petitions.22 #Petite-Bourgeoisie want Restricted Citizenship
		1 = law_notification.1
		10 = single_party_state.1
		5 = single_party_state.6
		5 = single_party_state.7
		10 = land_ownership_law_events.2
		10 = land_ownership_law_events.5
		10 = land_ownership_law_events.8
		10 = luddite_law_events.1
		10 = luddite_law_events.4
		10 = agitator_legal_events.21
		10 = agitator_legal_events.22
		10 = agitator_legal_events.23
		10 = agitator_legal_events.24
		10 = agitator_legal_events.25
		10 = agitator_legal_events.26
		10 = agitator_legal_events.27
		10 = agitator_legal_events.28
		10 = agitator_legal_events.29
		10 = agitator_legal_events.30
		10 = land_ownership_law_events.13
		10 = land_ownership_law_events.16
		10 = technocracy.2
		100 = nihilism.13
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is debate
on_law_checkpoint_debate = {
	random_events = {
		10 = children_rights_events.2
		10 = free_speech_laws.5
		10 = labor_rights.2
		10 = labor_rights.5
		10 = children_rights_events.6
		10 = welfare_laws.2
		10 = welfare_laws.5
		10 = welfare_laws.9
		10 = migration_laws.2
		10 = migration_laws.5
		10 = bureaucracy.3
		10 = colonization.1
		10 = free_speech_laws.5
		10 = free_speech_laws.6
		10 = internal_security_events.3
		10 = slavery_law_events.2
		10 = slavery_law_events.5
		10 = laws_police.2
		10 = anarchy.2
		10 = tax.3
		10 = tax.6
		10 = theocracy.2
		10 = citizenship_laws.2
		10 = citizenship_laws.5
		10 = education_laws.2
		10 = education_laws.5
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.2
		10 = council_republic_law_events.2
		10 = distribution_of_power_laws.5
		10 = monarchy_law_events.3
		10 = economy_laws.2
		10 = economy_laws.5
		10 = isolation.2
		10 = conscription_laws.2
		10 = republic_laws.2
		10 = internal_security_events.5
		10 = healthcare_laws.2
		10 = healthcare_laws.5
		10 = anti_state_religion.2
		10 = colonization.4
		10 = distribution_of_power_laws.8
		10 = distribution_of_power_laws.11
		10 = rights_of_women_laws.4
		10 = rights_of_women_laws.7
		10 = law_events.1
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.5
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = agitators_law_events.13
		10 = agitators_law_events.18
		10 = agitators_law_events.20
		10 = state_atheism.1
		10 = state_atheism.5
		2 = generic_laws.3
		2 = generic_laws.6
		2 = generic_laws.9
		2 = generic_laws.12
		10 = ig_petitions.1 #Landowners want to reverse Suffrage
		10 = ig_petitions.10 #Rural folk want no conscription
		10 = ig_petitions.13 #Trade Unions want compulsory primary school
		20 = ig_petitions.16 #Industrialists want no graduated taxes
		1 = law_notification.2
		10 = single_party_state.2
		10 = land_ownership_law_events.1
		10 = land_ownership_law_events.4
		10 = land_ownership_law_events.7
		10 = luddite_law_events.2
		10 = luddite_law_events.5
		10 = agitators_law_events.11
		10 = agitators_law_events.12
		10 = agitators_law_events.13
		10 = agitators_law_events.14
		10 = agitators_law_events.15
		10 = agitators_law_events.16
		10 = agitators_law_events.17
		10 = agitators_law_events.18
		10 = agitators_law_events.19
		10 = agitators_law_events.20
		10 = land_ownership_law_events.12
		10 = land_ownership_law_events.15
		10 = agitator_legal_events.11
		10 = agitator_legal_events.12
		10 = agitator_legal_events.13
		10 = agitator_legal_events.14
		10 = agitator_legal_events.15
		10 = agitator_legal_events.16
		10 = agitator_legal_events.17
		10 = agitator_legal_events.18
		10 = agitator_legal_events.19
		10 = agitator_legal_events.20
		10 = technocracy.3
	}
	events = {
		tanzimat_events.1
		tanzimat_events.2
		tanzimat_events.4
	}
}

# Root = owner Country of the Law
# Executed when the end of a checkpoint is reached and the result is stall
on_law_checkpoint_stall = {
	random_events = {
		10 = children_rights_events.3
		10 = free_speech_laws.3
		10 = free_speech_laws.4
		10 = labor_rights.3
		10 = labor_rights.6
		10 = children_rights_events.5
		10 = welfare_laws.3
		10 = welfare_laws.6
		10 = welfare_laws.10
		10 = migration_laws.3
		10 = migration_laws.6
		10 = bureaucracy.1
		10 = colonization.1
		10 = colonization.2
		10 = rights_of_women_laws.3
		10 = internal_security_events.1
		10 = slavery_law_events.3
		10 = slavery_law_events.6
		10 = laws_police.3
		10 = anarchy.1
		10 = tax.1
		10 = tax.4
		10 = theocracy.3
		10 = citizenship_laws.3
		10 = citizenship_laws.6
		10 = education_laws.3
		10 = education_laws.6
		100 = 1848.1
		100 = 1848.3
		10 = distribution_of_power_laws.3
		10 = council_republic_law_events.3
		10 = distribution_of_power_laws.6
		10 = monarchy_law_events.4
		10 = economy_laws.3
		10 = economy_laws.6
		10 = isolation.1
		10 = conscription_laws.3
		10 = republic_laws.3
		10 = internal_security_events.6
		10 = healthcare_laws.3
		10 = healthcare_laws.6
		10 = anti_state_religion.3
		10 = distribution_of_power_laws.9
		10 = distribution_of_power_laws.12
		10 = rights_of_women_laws.6
		10 = agitators_law_events.4
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.16
		10 = agitators_law_events.19
		10 = state_atheism.3
		10 = state_atheism.4
		10 = exiles_more_events.2
		2 = generic_laws.2
		2 = generic_laws.5
		2 = generic_laws.8
		2 = generic_laws.11
		1 = law_notification.3
		10 = single_party_state.3
		50 = single_party_state.4
		50 = single_party_state.5
		10 = land_ownership_law_events.3
		10 = land_ownership_law_events.6
		10 = land_ownership_law_events.9
		10 = luddite_law_events.3
		10 = luddite_law_events.6
		10 = agitators_law_events.1
		10 = agitators_law_events.2
		10 = agitators_law_events.3
		10 = agitators_law_events.4
		10 = agitators_law_events.5
		10 = agitators_law_events.6
		10 = agitators_law_events.7
		10 = agitators_law_events.8
		10 = agitators_law_events.9
		10 = agitators_law_events.10
		10 = land_ownership_law_events.10
		10 = land_ownership_law_events.11
		10 = land_ownership_law_events.14
		10 = land_ownership_law_events.17
		10 = land_ownership_law_events.18
		10 = agitator_legal_events.1
		10 = agitator_legal_events.2
		10 = agitator_legal_events.3
		10 = agitator_legal_events.4
		10 = agitator_legal_events.5
		10 = agitator_legal_events.6
		10 = agitator_legal_events.7
		10 = agitator_legal_events.8
		10 = agitator_legal_events.9
		10 = agitator_legal_events.10
		10 = technocracy.1
	}
}

# Root = owner Country of the Law
# Executed when an enacting law is passed by reaching the final enactment phase
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_pass = {
	effect = {
		if = {
			limit = {
				is_player = yes
				NOT = { has_variable = achievement_vox_populi_var }
				any_political_movement = {
					desired_law = ROOT.currently_enacting_law.type
					any_supporting_character = {
						has_role = agitator
					}
				}
			}
			set_variable = achievement_vox_populi_var
		}
	}
}

# Root = owner Country of the Law
# Executed when enactment fails by accumulating too many setbacks
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_fail = {
	effect = {
		post_notification = enactment_failed
	}
}

# Root = owner Country of the Law
# executed when enactment stops for any reason. Could be because the law has
# been enacted, or because the enactment has been stopped by the player.
#
# NOTE: at the point in time when this on-action is triggered, the law
# is still considered being enacted, therefore the `currently_enacting_law` link
# will work as expected, even though the enactment is _just_ about to end
on_law_enactment_ended = {

	effect = {
		
		if = {
			limit = { has_variable = ceremonial_head_of_state_veto_overruled }
			remove_variable = ceremonial_head_of_state_veto_overruled
		}
		if = {
			limit = { has_variable = paramilitary_group_veto_overruled }
			remove_variable = paramilitary_group_veto_overruled
		}
		if = {
			limit = { has_variable = state_church_veto_overruled }
			remove_variable = state_church_veto_overruled
		}
		if = {
			limit = { has_variable = trade_union_veto_overruled }
			remove_variable = trade_union_veto_overruled
		}
		if = {
			limit = { has_variable = big_business_veto_overruled }
			remove_variable = big_business_veto_overruled
		}
		if = {
			limit = { has_variable = institutional_veto_overruled }
			remove_variable = institutional_veto_overruled
		}
		if = {
			limit = { has_variable = judiciary_veto_overruled }
			remove_variable = judiciary_veto_overruled
		}
		if = {
			limit = { has_variable = pm_veto_overruled }
			remove_variable = pm_veto_overruled
		}
		
	}

}

# Root owner Country of the Law
# executed when the law is activated for any reason. It's usually because it
# has been enacted, but script can activate laws directly without going through
# the enactment process. Normally, it's immediately preceded by
# on_law_enactment_ended, but if a law is directly set by script, thus
# bypassing the enactment process, this will execute while
# on_law_enactment_ended will not
#
# NOTE: unlike the other on_law_<something> on-actions, at the point in time
# when this is triggered the law that was enacted is no longer considered being
# enacted. Therefore using the `currently_enacting_law` link will return the
# null law
on_law_activated = {
}

# Root = Institution
on_investment_increased = {
	effect = {
		post_notification = institution_investment_increased
	}
}

# Root = Institution
on_investment_decreased = {
	effect = {
		post_notification = institution_investment_decreased
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_start = {
	effect = {
	
		if = {
			limit = { exists = scope:target }
			scope:target ?= {
				enact_preferred_governance_principle = yes
				trigger_event = { id = revolution_system.1 }
			}
			if = {
				limit = { ROOT = { is_country_type = recognized } }
				scope:target = {
					set_variable = revolted_from_recognised_country
				}
			}
			if = {
				limit = { ROOT = { has_modifier = unsc_permanent_member } }
				scope:target = {
					set_variable = revolted_from_unsc_country
				}
			}
		}
		
		if = {
			limit = { 
				any_interest_group = { is_in_government = yes }
				ruler ?= { interest_group = { is_in_government = no } }
			}
			random_interest_group = {
				limit = { 
					is_in_government = yes 
					is_strongest_ig_in_government = yes
				}
				leader = { set_character_as_ruler = yes }
				add_ruling_interest_group = yes
			}
		}
		else_if = {
			limit = { 
				NOT = { any_interest_group = { is_in_government = yes } }
			}
			random_interest_group = {
				limit = { 
					is_marginal = no 
					is_insurrectionary = no
					is_being_suppressed = no 
				}
				leader = { set_character_as_ruler = yes }
				add_ruling_interest_group = yes
			}
		}
		
	}
}

# Root = Country
# scope:target = Uprising country
on_revolution_end = {
	effect = {
		
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_start = {
	effect = {
		if = {
			limit = { exists = scope:target }
			scope:target ?= {
				enact_preferred_governance_principle = yes
			}
		}
	}
}

# Root = Country
# scope:target = Uprising country
on_secession_end = {
}

# Root = Country
# This action is triggered after `on_revolution_end`
on_civil_war_won = {
	effect = {
		if = {
			limit = {
				has_variable = anti_monarchist_revolution
			}
			if = {
				limit = {
					NOT = {
						has_law = law_type:law_HOS_monarch
					}
				}
				set_variable = {
					name = abolishing_monarchy_var
					value = 0
				}
				add_journal_entry = { type = je_abolish_monarchy }
			}
			remove_variable = anti_monarchist_revolution
		}
		### Garbage collection
		if = {
			limit = {
				has_variable = civil_war_type_var
			}
			remove_variable = civil_war_type_var
		}
	}
}

on_revolution_checkpoint_reached = {
	effect = {
	}
	random_events = { #all these now have cooldowns of 50 years, you normally only get around 5-8 per revolution.
		150 = 0
		20 = ig_revolutions.1
		20 = ig_revolutions.2
		20 = ig_revolutions.3
		20 = ig_revolutions.4
		20 = ig_revolutions.5
		20 = ig_revolutions.6
		20 = ig_revolutions.7
		20 = ig_revolutions.8
		20 = ig_revolutions.9
		10 = revolution_pulse_events.1
		10 = revolution_pulse_events.2
		10 = revolution_pulse_events.3
		10 = revolution_pulse_events.4
		10 = revolution_pulse_events.5
		10 = revolution_pulse_events.6
		10 = revolution_pulse_events.7
		10 = revolution_pulse_events.8
		10 = revolution_pulse_events.9
		10 = revolution_pulse_events.10
		10 = revolution_pulse_events.11
		10 = revolution_pulse_events.12
		10 = revolution_pulse_events.13
		50 = revolution_pulse_events.14 #these have tighter conditions
		50 = revolution_pulse_events.15
		50 = revolution_pulse_events.16
		50 = revolution_pulse_events.17
		50 = revolution_pulse_events.18
		50 = revolution_pulse_events.19
		50 = revolution_pulse_events.20
		10 = revolution_pulse_events.21
		10 = revolution_pulse_events.22
		10 = revolution_pulse_events.23
		10 = revolution_pulse_events.24
		10 = revolution_pulse_events.25
		10 = revolution_pulse_events.26
		10 = revolution_pulse_events.27
		10 = revolution_pulse_events.28
		10 = revolution_pulse_events.29
		10 = revolution_pulse_events.30
		10 = revolution_pulse_events.31
		10 = revolution_pulse_events.32
		10 = revolution_pulse_events.33
		10 = revolution_pulse_events.34
		10 = revolution_pulse_events.35
		10 = revolution_pulse_events.36
		10 = revolution_pulse_events.37
		10 = revolution_pulse_events.38
		10 = revolution_pulse_events.39
		10 = revolution_pulse_events.40
		10 = revolution_pulse1_events.1
		10 = revolution_pulse1_events.2
		10 = revolution_pulse1_events.3
		10 = revolution_pulse1_events.4
		10 = revolution_pulse1_events.5
		10 = revolution_pulse1_events.6
		10 = revolution_pulse1_events.7
		10 = revolution_pulse1_events.8
		10 = revolution_pulse1_events.9
		10 = revolution_pulse1_events.10
		10 = revolution_pulse1_events.11
		10 = revolution_pulse1_events.12
		10 = revolution_pulse1_events.15
		10 = revolution_pulse1_events.16
		10 = revolution_pulse1_events.17
		10 = revolution_pulse1_events.18
		10 = revolution_pulse1_events.19
		10 = revolution_pulse2_events.1
		10 = revolution_pulse2_events.2
		10 = revolution_pulse2_events.3
		10 = revolution_pulse2_events.4
		10 = revolution_pulse2_events.5
		10 = revolution_pulse2_events.7
		10 = revolution_pulse2_events.9
		10 = revolution_pulse2_events.10
	}
}

on_secession_checkpoint_reached = {
	effect = {
	}
	random_events = {
		# Secession events and recycled revolution events
		30 = 0
		5 = secession_events.1
		5 = secession_events.2
		5 = secession_events.3
		5 = secession_events.4
		5 = secession_events.5
		5 = secession_events.6
		5 = secession_events.7
		5 = secession_events.8
		5 = secession_events.9
		5 = revolution_pulse_events.9
		5 = revolution_pulse_events.30
		5 = revolution_pulse1_events.2
		5 = revolution_pulse1_events.6
		5 = revolution_pulse1_events.11
		5 = revolution_pulse1_events.12
		5 = revolution_pulse1_events.15
		5 = revolution_pulse1_events.16
		5 = revolution_pulse1_events.17
		5 = revolution_pulse1_events.18
		5 = revolution_pulse1_events.19
		5 = revolution_pulse2_events.5
	}
}

# Root = Political Movement
on_political_movement_supported_law_cancelled = {
	effect = {
		add_modifier = {
			name = supported_law_cancelled
			months = 120
		}
	}
}

# Root = Country
on_wargoal_enforced = {
	effect = {
		if = {
			limit = {
				OR = {
					AND = {
						has_journal_entry = je_anti_lobby_demand
						var:anti_lobby_demand_target ?= scope:target
					}
					AND = {
						has_journal_entry = je_pro_lobby_demand
						var:pro_lobby_demand_target ?= scope:target
					}
				}
			}
			set_variable = { name = enforced_wargoal_on_enemy days = 90 }
		}
		set_variable = {
            name = recently_won_war
            days = 1825
            value = yes
        }
        set_variable = {
            name = has_won_a_war
            days = 100
            value = yes
        }
		every_scope_cobelligerent = {
			limit = { has_subject_relation_with = ROOT }
			set_variable = {
				name = recently_won_war
				days = 1825
				value = yes
			}
			set_variable = {
				name = has_won_a_war
				days = 100
				value = yes
			}
		}
	}
}

# Root = Interest Group
on_ig_resigned_government = {
	effect = {
		post_notification = ig_resigned_government
		if = {
			limit = {
				owner = {
					has_journal_entry = je_coup
				}
			}
			root = {
				set_variable = resigned_from_gov_coup
			}
		}
	}
}

# Root = Culture
on_new_culture_obsession = {
	effect = {
		post_notification = new_culture_obsession
	}
}

# Root = Country
on_rank_changed = {
	effect = {
		post_notification = rank_changed_notification
	}
}

# Root = Country (that owns a state in the state region)
# scope:actor = Claimant country
# scope:region = State Region
on_claim_added = {
	effect = {
		post_notification = claim_added_notification
	}
}

# Root = Country (in which the company is established)
# scope:company = The company that was established
on_company_established = {
	effect = {
	}
}

# Root = Country (in which the company was disbanded)
# scope:company = The company that was disbanded
on_company_disbanded = {
	effect = {
	}
}

# Root = Character
on_heir_born = {
	effect = {
		post_notification = heir_born_notification
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = orleanist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = orleanist_leader }
				}
			}
		}
		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = legitimist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = legitimist_leader }
				}
			}
		}

		if = {
			limit = {
				owner = {
					c:FRA ?= this
					ruler = {
						has_variable = bonapartist_leader
					}
				}
			}
			owner = {
				heir = {
					set_variable = { name = bonapartist_leader }
				}
			}
		}
	}
}

# Root = Home Country
# scope:target = Secession country
on_secession_country_helped_by_home_country = {
	effect = {
		annex = scope:target
	}
}

# Root = Home Countr
# scope:target = Secession country
on_secession_country_not_helped_by_home_country = {
	effect = {
		trigger_event = { id = civil_war_events.1 days = 0 }
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_added = {
	effect = {
		post_notification = wargoal_added
	}
}

# Root = Diplomatic Play
# scope:actor = War Goal Owner
on_wargoal_removed = {
	effect = {
		post_notification = wargoal_removed
	}
}

# Root = Diplomatic Play
# scope:actor = Initiator country
# scope:target = Target country
on_war_end = {
	effect = {
		scope:actor = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    } 
		    set_variable = { #Available to use whenever needed
		    	name = most_recent_war_opponent
		    	value = scope:target
		    }
		}
		scope:target = {
			set_variable = {
		        name = recently_had_war
		        days = 1825
		        value = yes
		    }
		    set_variable = { 
		    	name = most_recent_war_opponent
		    	value = scope:actor
		    }
			if = {
				limit = { 
					has_modifier = forced_regime_change 
					has_variable = most_recent_war_opponent
				}
				trigger_event = { id = revolution_system.10 }
			}
		}
	}
}

# Root = journal entry
on_journal_entry_activated = {
	effect = {
		post_notification = journal_entry_activated
	}
}

# Root = journal entry
on_journal_entry_deactivated = {
	effect = {
		post_notification = journal_entry_deactivated
	}
}

# Root = journal entry
on_journal_entry_completed = {
	effect = {
		post_notification = journal_entry_completed
	}
}

# Root = journal entry
on_journal_entry_failed = {
}

# Root = country
on_native_uprising = {
	effect = {
		post_notification = native_uprising_notification
	}
}

# Root = country
# scope:area = harvest condition area
# scope:state = affected state with the highest intensity
# scope:duration = duration of the harvest condition in days
# scope:num_states = the number of affected states in the country
# scope:intensity = the highest intensity of the affected states
on_harvest_condition_started_in_country = {
	effect = {
		if = {
			limit = {
				scope:intensity > 3
			}
			post_notification = harvest_condition_started_in_country_important
		}
		else = {
			post_notification = harvest_condition_started_in_country
		}
	}
}

# Root = state
on_state_incorporation = {
	effect = {
		
	}
}
on_state_owner_change = {
	effect = {
		assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
	}
}
on_state_created = { 
	effect = { 
		assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
	}
}

# Root = political movement
on_political_movement_formed = {
	effect = {
		post_notification = political_movement_formed
	}
}

# Root = political movement
on_political_movement_disbanded = {
	effect = {
		post_notification = political_movement_disbanded
	}
}

# Root = Colony state
on_colony_created = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_colonize_state
				}
				root = {
					set_variable = {
						name = tut_colony_target
					}
				}
			}
		}
	}
}

# Root = Strategic Region
# scope:actor = Aggressor country
# scope:target = Target country
on_diplomatic_incident = {
	effect = {
		
	}
}

# Root = Objective
on_sub_objective_completed = {
}

# Root = Objective
on_sub_objective_failed = {
}

# Root = Objective
on_objective_completed = {
	effect = {
		debug_log = "Objective completed"
	}
}

# Root = Country
# scope:target = Party created
on_party_created = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Created"
	}
}

# Root = Country
# scope:target = Party disbanded
on_party_disbanded = {
	effect = {
		debug_log = "[SCOPE.sParty('target').GetNameNoFormatting] Disbanded"
	}
}

# Root = Country
on_election_campaign_start = {
	effect = {
		debug_log = "Election Campaign Started"
	}
}

# Root = Country
on_election_campaign_end = {
	effect = {
		debug_log = "Election Campaign Ended"
		
		#Calculate parliament composition
		remove_variable = has_bipartisan_plan
		every_interest_group = {
			remove_variable = bipartisan_participant
		}
		if = {
			limit = { has_journal_entry = je_upper_house }
			calculate_upper_house_composition = yes
		}
		if = {
			limit = { has_journal_entry = je_lower_house }
			calculate_lower_house_composition = yes
		}
		
	}
}

# Root = Country
on_government_reformed = {
	effect = {
	
		# Government Petition
		set_variable = gov_petition_coin_toss
		
		#Update upper house
		remove_variable = has_bipartisan_plan
		every_interest_group = {
			remove_variable = bipartisan_participant
		}
		if = {
			limit = { has_journal_entry = je_upper_house }
			calculate_upper_house_composition = yes
		}
		if = {
			limit = { has_journal_entry = je_lower_house }
			calculate_lower_house_composition = yes
		}
		
		#Clear Cabinet
		calculate_cabinet_unity = yes
		remove_non_government_characters_from_cabinet = yes
		
		#Remove Party Ban
		if = {
			limit = {
				any_interest_group = { 
					has_variable = IG_party_banned
					is_in_government = yes
				}
			}
			every_interest_group = {
				limit = { 
					has_variable = IG_party_banned
					is_in_government = yes
				}
				remove_variable = IG_party_banned
				save_scope_as = IG_banned_from_parties
				owner = { post_notification = IG_party_unban_notification }
			}
		}
		
		#Mark as recently reformed government
		set_variable = { 
			name = recently_reformed_gov_var
			months = 1
		}
		
	}
	events = {
		politicians_system.2
		politicians_system.3
	}
}

# Root = Country
on_obligation_owed_by_us_expired = {
	effect = {
		post_notification = obligation_owed_by_us_expired
	}
}

# Root = Country
on_obligation_owed_to_us_expired = {
	effect = {
		post_notification = obligation_owed_to_us_expired
	}
}

# Root = Country
on_start_supporting_unification = {
	effect = {
		post_notification = start_supporting_unification
	}
}

# Root = Country
on_unification_candidate_added = {
	effect = {
		post_notification = unification_candidate_added
	}
}

# Root = Country
on_unification_candidate_removed = {
	effect = {
		post_notification = unification_candidate_removed
	}
}

# Root = Country
on_stop_supporting_unification = {
	effect = {
		post_notification = stop_supporting_unification
	}
}

# Root = Character
# scope:region - the sea region where the raid happened
on_enemy_convoys_raided = {
	effect = {
		post_notification = enemy_convoys_raided
	}
}

# Root = Character
# scope:region - the sea region where the raid happened
on_our_convoys_raided = {
	effect = {
		post_notification = our_convoys_raided
	}
}

# Root = Country
on_repudiate_obligation = {
	effect = {
		scope:target_country = {
			change_relations = { country = root value = -50 }
			hidden_effect = {
				random_list = {
					50 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}				
					}
					50 = {}
				}
			}		
		}
		every_country = {
			limit = { 
				NOT = { this = scope:target_country }
				root = { owes_obligation_to = prev } 
			}
			change_relations = { country = root value = -30 }
			hidden_effect = {
				random_list = {
					25 = {
						if = {
							limit = {
								country_rank > root.country_rank
							}
							set_secret_goal = {
								country = root
								secret_goal = dominate
							}								
						}
						else = {
							set_secret_goal = {
								country = root
								secret_goal = antagonize
							}							
						}					
					}
					75 = {}
				}
			}
		}		
		hidden_effect = { # Should not stack the modifier
			if = { 
				limit = { has_modifier = repudiated_obligation } 
				remove_modifier = repudiated_obligation
			}			
		}
		add_modifier = {
			name = repudiated_obligation
			days = normal_modifier_time
			is_decaying = yes			
		}		
	}
}

# Root = Character
on_character_recruitment = {
	effect = {
		owner = {
			if = {
				limit = {
					has_journal_entry = je_tutorial_recruit_promote_commander
				}
				je:je_tutorial_recruit_promote_commander = {
					set_variable = {
						name = tut_commander_target
						value = root
					}
					set_variable = {
						name = tut_commander_target_initial_rank
						value = root.commander_rank
					}
				}
			}
		}
	}
}

# Root = country
on_become_subject = {
	effect = {
		every_scope_state = {
			assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
		}
	}
}

# Root = country
on_become_independent = {
	effect = { 
		every_scope_state = {
			assign_state_hub_dynamic_names = yes # All dynamic naming is handled by this scripted effect
		}
	}
}

# This on-action is triggered in cases where there is no overriding on_impose effect on a law type. In case an on_impose effect exists on the law type, this will NOT be executed.
# Root = country being imposed upon
# scope:initiator = country doing the imposition
# scope:law = law being imposed
on_impose_law = {
	effect = {
		add_modifier = {
			name = impose_law_cooldown
			multiplier = 365
			days = 365
			is_decaying = yes
		}
		scope:law = {
			save_scope_as = foreign_imposition_law
		}
		save_scope_as = country_imposed_upon
		scope:initiator = {
			post_notification = imposition_demand_sent
			save_scope_as = foreign_imposition_country
		}
		trigger_event = { id = law_imposition_events.1 days = 0 popup = yes }
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle starts.
# Root = Country that started the Power Struggle (other interesting scopes, such as Power Bloc leader, can be inferred from root)
on_power_bloc_struggle_started = {
	effect = {
		
	}
}

# This on-action is triggered every time a Power Bloc's Power Struggle concludes (after the changes in leadership have been made).
# Root = Power Bloc whose leadership position is being fought over
# scope:successful_contender = country that won the Power Struggle
# scope:failed_contender = country that lost the Power Struggle
on_power_bloc_struggle_ended = {
	effect = {
		
	}
}

# Root = Military Formation
# scope:front = front we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_to_front_cancelled = {
	effect = {
		post_notification = formation_travel_to_front_cancelled
	}
}

# Root = Military Formation
# scope:hq = HQ we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_station_in_hq_cancelled = {
	effect = {
		post_notification = formation_travel_station_in_hq_cancelled
	}
}

# Root = Military Formation
# scope:province = Sea Node we were going to
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_deploy_to_sea_node_cancelled  = {
	effect = {
		post_notification = formation_travel_deploy_to_sea_node_cancelled
	}
}

# Root = Military Formation
# scope:formation = Formation we were tracking
# scope:target = current target travel location - HQ or Province (Sea Node)
on_travel_track_formation_cancelled = {
	effect = {
		post_notification = formation_travel_track_formation_cancelled
	}
}

# Root = Military Formation
on_military_formation_created = {
	effect = {
		if = {
			limit = {
				owner = {
					has_journal_entry = je_tutorial_create_formation
				}
			}
			owner = {
				remove_variable = formation_tutorial_ongoing
			}
		}
	}
}