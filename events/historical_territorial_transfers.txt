namespace = historical_territorial_transfers

#Libya
historical_territorial_transfers.1 = {
    type = country_event

    title = transfer_territory_libya.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_libya.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_libya.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		if = {
			limit = { c:CYR ?= this }
			c:LBY = {
				annex = c:CYR
			}
		}
		if = {
			limit = { NOT = { c:CYR ?= this } }
		
			#Transfer homelands to FROM
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:libyan }
				}
				set_state_owner = c:LBY
			}
			
		}
		
		ai_chance = { 
			base = 100 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:LBY
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		ai_chance = { 
			base = 0 
		}
		
    }

}

#Somalia
historical_territorial_transfers.2 = {
    type = country_event

    title = transfer_territory_somalia.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_somalia.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_somalia.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1950.4.1									# START DATE: Date colony became self governing ****
		game_date < 1960.4.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democratic_monarchy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:ITA
		c:ITA = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		c:SOM = { 												# Change TAG of the colony ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_mandate
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_somalia_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer subject to new overlord
		c:SOM = { 												# Change TAG of the colony ****
			make_independent = yes
			
			#New Governor of Somalia
			create_character = {
				first_name = "giovanni_fornari_first_name"
				last_name = "giovanni_fornari_last_name"
				ruler = yes ig_leader = yes historical = yes
				birth_date = 1903.5.21
				interest_group = ig_landowners 
				ideology = ideology_autocratic
				culture = cu:italian
				traits = {
					imperious
					reserved
					basic_colonial_administrator
				}
			}
			
		}
		
		# Overlord create client state pact with colony
		c:ITA = {
			create_diplomatic_pact = {
				country = c:SOM									# Change TAG ****
				type = mandate
			}
		}
		
		# Fire only once
		set_variable = british_somalia_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		# Reaction from colony
		c:SOM = {
		
			# Natives are angry!
			every_scope_state = {
				add_radicals_in_state = {
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
			
			#Colony is angry
			change_relations = {
				country = ROOT
				value = -100
			}
			
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = british_somalia_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Eritrea
historical_territorial_transfers.3 = {
    type = country_event

    title = transfer_territory_eritrea.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_eritrea.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_eritrea.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1952.9.15									# START DATE: Date colony became self governing ****
		game_date < 1962.9.15									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democratic_monarchy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:ETH
		c:ETH = { 												# Change TAG of the transferee ****
			is_a_monarchy = yes
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:ERI										# Change TAG of the colony ****
		}
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:eritrean }		# Change homeland identity to match colony to be released ****
			is_incorporated = no								# State is a colony
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_eritrea_htt }			# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH THIS SECTION
		every_scope_state = {
			limit = {
				state_region = { is_homeland = cu:eritrean }	# Change homeland identity to match colony to be released ****
				is_incorporated = no							# State is a colony
				#contains_capital_of = c:ERI					# State is the capital of colony ****
			}
			save_scope_as = colonial_state
		}
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1	# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Release country
		create_country = {
			tag = ERI										# Change TAG of country being released ****
			origin = THIS									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# SET laws for colony ****
				effect_starting_politics_presidential_republic = yes
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_unitary_state = yes
				effect_starting_politics_war_policy_anti_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_protectionism = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				# CREATE leader for colony ****
				create_character = {
					first_name = "guy_incognito_first_name"		# CHANGE
					last_name = "guy_incognito_last_name"		# CHANGE
					ruler = yes
					#birth_date = 1910.1.1						# CHANGE
					interest_group = ig_rural_folk				# CHANGE
					ideology = ideology_democratic				# CHANGE
					traits = {
						charismatic								# CHANGE
						persistent								# CHANGE
						meticulous								# CHANGE
					}
				}
				
				# Set diplomatic recognition
				set_country_type = unrecognized
			}
		}
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:eritrean }	# Change homeland identity to match colony to be released ****
				is_incorporated = no							# State is a colony
		 	}
			set_state_owner = c:ERI								# Change TAG to colony ****
		}
		
		# Transferee receives colony
		c:ETH = { 
			create_diplomatic_pact = {
				country = c:ERI										# Change TAG ****
				type = special_administrative_region
			}
		}
		
		# Fire only once
		set_variable = british_eritrea_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:ETH
			value = -100
		}
		
		# Natives are angry!
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:eritrean }	# Change homeland identity to match colony to be released ****
		 	}
			add_radicals_in_state = {
				culture = cu:eritrean							# Change culture ****
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = british_eritrea_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Tangier International Zone
historical_territorial_transfers.4 = {
    type = country_event

    title = transfer_territory_tangier.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_tangier.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_tangier.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SPA this = c:SPA											# Change TAG of the overlord ****
		game_date >= 1956.10.29									# START DATE: Date colony became self governing ****
		game_date < 1966.10.29									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		#is_a_democratic_monarchy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:MOR
		c:MOR = { 												# Change TAG of the transferee ****
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		exists = c:TGZ
		c:TGZ = { 												# Change TAG of the colony ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_special_administrative_region
		}
		
		# Event has not been fired before
		NOT = { has_variable = spanish_tangier_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:MOR = { annex = c:TGZ }
		
		# Fire only once
		set_variable = spanish_tangier_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:MOR
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = spanish_tangier_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Saarland
historical_territorial_transfers.5 = {
    type = country_event

    title = transfer_territory_saarland.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_saarland.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_saarland.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:FRA this = c:FRA											# Change TAG of the overlord ****
		game_date >= 1957.1.1									# START DATE: Date colony became self governing ****
		game_date < 1967.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:WGR
		c:WGR = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Colony conditions
		exists = c:SAR
		c:SAR = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_mandate
		}
		
		# Event has not been fired before
		NOT = { has_variable = french_saarland_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:WGR = { annex = c:SAR }
		
		# Fire only once
		set_variable = french_saarland_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:WGR
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = french_saarland_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#International Authority for the Ruhr
historical_territorial_transfers.6 = {
    type = country_event

    title = transfer_territory_ruhr.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_ruhr.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_ruhr.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:FRA this = c:FRA											# Change TAG of the overlord ****
		game_date >= 1952.6.25									# START DATE: Date colony became self governing ****
		game_date < 1962.6.25									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:WGR
		c:WGR = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			#is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Colony conditions
		exists = c:IAR
		c:IAR = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_mandate
		}
		
		# Event has not been fired before
		NOT = { has_variable = french_ruhr_htt }				# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:WGR = { annex = c:IAR }
		
		# Fire only once
		set_variable = french_ruhr_htt							# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:WGR
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = french_ruhr_htt							# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Trieste
historical_territorial_transfers.7 = {
    type = country_event

    title = transfer_territory_trieste.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_trieste.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_trieste.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:USA this = c:USA											# Change TAG of the overlord ****
		game_date >= 1975.11.10									# START DATE: Date colony became self governing ****
		game_date < 1985.11.10									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:ITA
		c:ITA = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Colony conditions
		exists = c:TRE
		c:TRE = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_mandate
		}
		
		# Event has not been fired before
		NOT = { has_variable = american_trieste_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:ITA = { annex = c:TRE }
		
		# Fire only once
		set_variable = american_trieste_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:ITA
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = american_trieste_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Port Arthur
historical_territorial_transfers.8 = {
    type = country_event

    title = transfer_territory_port_arthur.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_port_arthur.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_port_arthur.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SOV this = c:SOV											# Change TAG of the overlord ****
		game_date >= 1955.5.1									# START DATE: Date colony became self governing ****
		game_date < 1965.5.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		OR = {
			AND = { 
				exists = c:PRC
				c:PRC = {
					is_a_communist_government = yes
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
			AND = { 
				exists = c:CHI
				c:CHI = {
					is_a_communist_government = yes
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
		}
		
		#Colony conditions
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:chinese }			# Change homeland identity to match colony to be released ****
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = soviet_port_arthur_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		if = {
			limit = { exists = c:PRC }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:chinese }		# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:PRC								# Change TAG to colony ****
			}
		}
		else_if = {
			limit = { exists = c:CHI }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:chinese }		# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:CHI								# Change TAG to colony ****
			}
		}
		
		#FROM is happy!
		if = {
			limit = { exists = c:PRC }
			change_relations = {
				country = c:PRC
				value = 50
			}
		}
		else_if = {
			limit = { exists = c:CHI }
			change_relations = {
				country = c:CHI
				value = 50
			}
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = -20
		
		# Fire only once
		set_variable = soviet_port_arthur_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2			# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		if = {
			limit = { exists = c:PRC }
			change_relations = {
				country = c:PRC
				value = -100
			}
		}
		else_if = {
			limit = { exists = c:CHI }
			change_relations = {
				country = c:CHI
				value = -100
			}
		}
		
		
		# Fire only once
		set_variable = soviet_port_arthur_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Panama Canal Zone
historical_territorial_transfers.9 = {
    type = country_event

    title = transfer_territory_panama_canal.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_panama_canal.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_panama_canal.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:USA this = c:USA											# Change TAG of the overlord ****
		game_date >= 1999.12.31									# START DATE: Date colony became self governing ****
		game_date < 2009.12.31									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:PNM
		c:PNM = {
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Colony conditions
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:panamanian }		# Change homeland identity to match colony to be released ****
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = american_panama_canal_htt }		# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return Panama
		every_scope_state = {
			limit = {
				state_region = { is_homeland = cu:panamanian }	# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:PNM								# Change TAG to colony ****
		}
		
		#FROM is happy!
		change_relations = {
			country = c:PNM
			value = 50
		}
		
		# Fire only once
		set_variable = american_panama_canal_htt				# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:PNM
			value = -50
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = american_panama_canal_htt				# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Hong Kong
historical_territorial_transfers.10 = {
    type = country_event

    title = transfer_territory_hong_kong.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_hong_kong.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_hong_kong.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1997.7.1									# START DATE: Date colony became self governing ****
		game_date < 2007.7.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		OR = {
			AND = { 
				exists = c:PRC
				c:PRC = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_SHAOZHOU
				}
			}
			AND = { 
				exists = c:CHI
				c:CHI = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_SHAOZHOU
				}
			}
			AND = { 
				exists = c:ROC
				c:ROC = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_SHAOZHOU
				}
			}
		}
		
		#Colony conditions
		OR = { 
			owns_treaty_port_in = STATE_SHAOZHOU
			AND = { 
				exists = c:HKG
				c:HKG = { 
					is_direct_subject_of = ROOT 
					is_not_sufficiently_independent = yes
				}
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_hong_kong_htt }			# CHANGE ****
		
    }
	
	immediate = {
	
		s:STATE_SHAOZHOU.region_state:GBR = { save_scope_as = hong_kong_state }
		
		random_state = {
			limit = {
				state_region = s:STATE_SHAOZHOU
				
				owner = { 
					country_has_primary_culture = cu:chinese
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
			owner = { save_scope_as = china_transferee_state }
		}
		
		# Fire only once
		set_variable = british_hong_kong_htt						# Change variable ****
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		if = {
			limit = {
				exists = scope:china_transferee_state
				scope:china_transferee_state = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_SHAOZHOU
				}
			}
			if = { 
				limit = { is_a_democracy = yes scope:china_transferee_state = { is_a_democracy = yes } }
				if = { 
					limit = { 
						AND = { 
							exists = c:HKG
							c:HKG = { 
								is_direct_subject_of = ROOT 
								is_not_sufficiently_independent = yes
							}
						}
					}
					scope:china_transferee_state = { annex = c:HKG }
				}
				else_if = {
					limit = { owns_treaty_port_in = STATE_SHAOZHOU }
					s:STATE_SHAOZHOU.region_state:GBR = { set_state_owner = scope:china_transferee_state }
				}
			}
			else_if = {
				limit = { NAND = { is_a_democracy = yes scope:china_transferee_state = { is_a_democracy = yes } } }
				
				if = { 
					limit = { owns_treaty_port_in = STATE_SHAOZHOU }
					create_country = {
						tag = HKG										# Change TAG of country being released ****
						origin = ROOT									# TAG where the created country takes tech from
						state = scope:hong_kong_state
			
						on_created = {									# Set government laws & rulers here
				
							# SET laws for colony ****
							effect_starting_politics_presidential_republic = yes
							effect_starting_politics_regime = yes
							effect_starting_politics_constitutional_unitary_state = yes
							effect_starting_politics_war_policy_anti_military = yes
							effect_starting_politics_economic_policy_interventionism = yes
							effect_starting_politics_trade_policy_protectionism = yes
							effect_starting_politics_anti_nuclear_policy = yes
							
							effect_starting_politics_specialisation_services = yes
		
							effect_starting_politics_fiat_standard = yes
				
							# Set diplomatic recognition
							set_country_type = unrecognized
						}
				
					}
					scope:china_transferee_state = { 
						create_diplomatic_pact = { 
							country = c:HKG 
							type = special_administrative_region 
						} 
					}
				}
				else_if = {
					limit = { 
						AND = { 
							exists = c:HKG
							c:HKG = { 
								is_direct_subject_of = ROOT 
								is_not_sufficiently_independent = yes
							}
						}
					}
					c:HKG = {
						make_independent = yes
					}
					scope:china_transferee_state = {
						create_diplomatic_pact = {
							country = c:HKG
							type = special_administrative_region
						}
						set_variable = { name = HKG_annexation_timer years = 50 }
					}
				}
				
			}
			
			change_relations = {
				country = scope:china_transferee_state
				value = 50
			}
			
		}
		
		# Fire only once
		set_variable = british_hong_kong_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2			# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = scope:china_transferee_state
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = british_hong_kong_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Macau
historical_territorial_transfers.11 = {
    type = country_event

    title = transfer_territory_macau.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_macau.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_macau.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:POR this = c:POR											# Change TAG of the overlord ****
		game_date >= 1999.9.20									# START DATE: Date colony became self governing ****
		game_date < 2009.9.20									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		OR = {
			AND = { 
				exists = c:PRC
				c:PRC = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_GUANGDONG
				}
			}
			AND = { 
				exists = c:CHI
				c:CHI = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_GUANGDONG
				}
			}
			AND = { 
				exists = c:ROC
				c:ROC = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_GUANGDONG
				}
			}
		}
		
		#Colony conditions
		OR = { 
			owns_treaty_port_in = STATE_GUANGDONG
			AND = { 
				exists = c:MCA
				c:MCA = { 
					is_direct_subject_of = ROOT 
					is_not_sufficiently_independent = yes
				}
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = portuguese_macau_htt }		# CHANGE ****
		
    }
	
	immediate = {
	
		s:STATE_GUANGDONG.region_state:POR = { save_scope_as = macau_state }
		
		random_state = {
			limit = {
				state_region = s:STATE_GUANGDONG
				
				owner = { 
					country_has_primary_culture = cu:chinese
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
			owner = { save_scope_as = china_transferee_state }
		}
		
		# Fire only once
		set_variable = portuguese_macau_htt						# Change variable ****
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		if = {
			limit = {
				exists = scope:china_transferee_state
				scope:china_transferee_state = {
					is_sufficiently_independent = yes
					is_at_war = no
					has_state_in_state_region = STATE_GUANGDONG
				}
			}
			if = { 
				limit = { is_a_democracy = yes scope:china_transferee_state = { is_a_democracy = yes } }
				if = { 
					limit = { 
						AND = { 
							exists = c:MCA
							c:MCA = { 
								is_direct_subject_of = ROOT 
								is_not_sufficiently_independent = yes
							}
						}
					}
					scope:china_transferee_state = { annex = c:MCA }
				}
				else_if = {
					limit = { owns_treaty_port_in = STATE_GUANGDONG }
					s:STATE_GUANGDONG.region_state:MCA = { set_state_owner = scope:china_transferee_state }
				}
			}
			else_if = {
				limit = { NAND = { is_a_democracy = yes scope:china_transferee_state = { is_a_democracy = yes } } }
				
				if = { 
					limit = { owns_treaty_port_in = STATE_GUANGDONG }
					create_country = {
						tag = MCA										# Change TAG of country being released ****
						origin = ROOT									# TAG where the created country takes tech from
						state = scope:macau_state
			
						on_created = {									# Set government laws & rulers here
				
							# SET laws for colony ****
							effect_starting_politics_presidential_republic = yes
							effect_starting_politics_regime = yes
							effect_starting_politics_constitutional_unitary_state = yes
							effect_starting_politics_war_policy_anti_military = yes
							effect_starting_politics_economic_policy_interventionism = yes
							effect_starting_politics_trade_policy_protectionism = yes
							effect_starting_politics_anti_nuclear_policy = yes
							
							effect_starting_politics_specialisation_services = yes
		
							effect_starting_politics_fiat_standard = yes
				
							# Set diplomatic recognition
							set_country_type = unrecognized
						}
				
					}
					scope:china_transferee_state = { 
						create_diplomatic_pact = { 
							country = c:MCA 
							type = special_administrative_region 
						}
						set_variable = { name = MCA_annexation_timer years = 50 }
					}
				}
				else_if = {
					limit = { 
						AND = { 
							exists = c:MCA
							c:MCA = { 
								is_direct_subject_of = ROOT 
								is_not_sufficiently_independent = yes
							}
						}
					}
					c:MCA = {
						make_independent = yes
					}
					scope:china_transferee_state = {
						create_diplomatic_pact = {
							country = c:MCA
							type = special_administrative_region
						}
					}
				}
				
			}
			
			change_relations = {
				country = scope:china_transferee_state
				value = 50
			}
			
		}
		
		# Fire only once
		set_variable = portuguese_macau_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = scope:china_transferee_state
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = portuguese_macau_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#West Papua
historical_territorial_transfers.12 = {
    type = country_event

    title = transfer_territory_west_papua.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_west_papua.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_west_papua.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:NET this = c:NET											# Change TAG of the overlord ****
		game_date >= 1963.5.1									# START DATE: Date colony became self governing ****
		game_date < 1973.5.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:IDO
		c:IDO = { 												# Change TAG of the transferee ****
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Colony conditions
		exists = c:WPA
		c:WPA = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_mandate
		}
		
		# Event has not been fired before
		NOT = { has_variable = dutch_west_papua_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:IDO = { annex = c:WPA }
		
		#FROM is happy!
		change_relations = {
			country = c:IDO
			value = 50
		}
		
		# Fire only once
		set_variable = dutch_west_papua_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:IDO
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = dutch_west_papua_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Somaliland
historical_territorial_transfers.13 = {
    type = country_event

    title = transfer_territory_somaliland.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_somaliland.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_somaliland.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1960.7.1									# START DATE: Date colony became self governing ****
		game_date < 1970.7.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:SOM
		c:SOM = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:SML										# Change TAG of the colony ****
		}
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:somalilander }	# Change homeland identity to match colony to be released ****
			is_incorporated = no								# State is a colony
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_somaliland_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer homelands to FROM
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:somalilander }
				is_incorporated = no
		 	}
			set_state_owner = c:SOM
		}
		
		#FROM is happy!
		change_relations = {
			country = c:SOM
			value = 50
		}
		
		# Fire only once
		set_variable = british_somaliland_htt					# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:SOM
			value = -100
		}
		
		# Natives are angry!
		every_scope_state = {
			limit = { is_homeland = cu:somalilander }
			add_radicals_in_state = {
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		# Fire only once
		set_variable = british_somaliland_htt					# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Japanese Okinawa
historical_territorial_transfers.14 = {
    type = country_event

    title = transfer_territory_japanese_okinawa.t 			# Title of the event; ADD LOCALISATION
    desc = transfer_territory_japanese_okinawa.d 			# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_japanese_okinawa.f 		# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:USA this = c:USA											# Change TAG of the overlord ****
		game_date >= 1972.5.15									# START DATE: Date colony became self governing ****
		game_date < 1982.5.15									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:JAP
		c:JAP = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:japanese }		# Change homeland identity to match colony to be released ****
			is_incorporated = no								# State is a colony
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = american_okinawa_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer homelands to FROM
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:japanese }
				is_incorporated = no
		 	}
			set_state_owner = c:JAP
		}
		
		#FROM is happy!
		change_relations = {
			country = c:JAP
			value = 50
		}
		
		# Fire only once
		set_variable = american_okinawa_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:JAP
			value = -100
		}
		
		# Natives are angry!
		every_scope_state = {
			limit = { is_homeland = cu:japanese }
			add_radicals_in_state = {
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = american_okinawa_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#South Cameroons
historical_territorial_transfers.15 = {
    type = country_event

    title = transfer_territory_south_cameroon.t 			# Title of the event; ADD LOCALISATION
    desc = transfer_territory_south_cameroon.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_south_cameroon.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1961.10.1									# START DATE: Date colony became self governing ****
		game_date < 1971.10.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:CMR
		c:CMR = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:ambazonian }		# Change homeland identity to match colony to be released ****
			is_incorporated = no								# State is a colony
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_south_cameroon_htt }			# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer homelands to FROM
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:ambazonian }
				is_incorporated = no
		 	}
			set_state_owner = c:CMR
		}
		
		#Cameroons becomes a federal state
		c:CMR = {
			effect_starting_politics_constitutional_federal_state = yes
		}
		
		#FROM is happy!
		change_relations = {
			country = c:CMR
			value = 50
		}
		
		# Fire only once
		set_variable = british_south_cameroon_htt						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:CMR
			value = -100
		}
		
		# Natives are angry!
		every_scope_state = {
			limit = { is_homeland = cu:ambazonian }
			add_radicals_in_state = {
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = british_south_cameroon_htt						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#French India
historical_territorial_transfers.16 = {
    type = country_event

    title = transfer_territory_french_india.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_french_india.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_french_india.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:FRA this = c:FRA											# Change TAG of the overlord ****
		game_date >= 1954.11.1									# START DATE: Date colony became self governing ****
		game_date < 1964.11.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:HND
		c:HND = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_at_war = no
			is_sufficiently_independent = yes
		}
		
		#Colony conditions
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:indian }			# Change homeland identity to match colony to be released ****
			is_incorporated = no								# State is a colony
			#owner = THIS										# Overlord must own the state to be released
		}
		
		# Event has not been fired before
		NOT = { has_variable = french_india_htt }				# CHANGE ****
		
    }
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer homelands to FROM
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:indian }
				is_incorporated = no
		 	}
			set_state_owner = c:HND
		}
		
		#FROM is happy!
		change_relations = {
			country = c:HND
			value = 50
		}
		
		# Fire only once
		set_variable = french_india_htt							# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:HND
			value = -100
		}
		
		# Natives are angry!
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:indian } }
			add_radicals_in_state = {
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		# Fire only once
		set_variable = french_india_htt							# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Christmas Island
historical_territorial_transfers.17 = {
    type = country_event

    title = transfer_territory_christmas_island.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_christmas_island.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_christmas_island.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR								# Change TAG of the overlord ****
		game_date >= 1958.10.1									# START DATE: Date colony became self governing ****
		game_date < 1968.10.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democratic_monarchy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:AST
		c:AST = { 												# Change TAG of the transferee ****
			is_a_democratic_monarchy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Owns Christmas Island
		has_state_in_state_region = STATE_EAST_JAVA
		
		# Event has not been fired before
		NOT = { has_variable = british_christmas_island_htt }	# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = british_christmas_island_htt				# Change variable ****
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer homelands to FROM
		random_scope_state = {
			limit = {
		 		state_region = s:STATE_EAST_JAVA
		 	}
			set_state_owner = c:AST
		}
		
		#Get money
		add_treasury = 28000000
		
		#FROM is angry!
		change_relations = {
			country = c:AST
			value = 50
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Camp David Accords
historical_territorial_transfers.18 = {
    type = country_event

    title = transfer_territory_israel_egypt.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_israel_egypt.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_israel_egypt.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:ISR this = c:ISR								# Change TAG of the overlord ****
		game_date >= 1978.9.17									# START DATE: Date colony became self governing ****
		game_date < 1988.9.17									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:EGY
		c:EGY = { 												# Change TAG of the transferee ****
			is_a_nationalist_government = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Owns parts of Egypt
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:egyptian }		# Change homeland identity to match colony to be released ****
		}
		
		#US involvement
		exists = c:USA
		c:USA = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			
			country_rank >= rank_value:great_power
		}
		
		# Event has not been fired before
		NOT = { has_variable = transfer_territory_israel_egypt_htt }	# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = transfer_territory_israel_egypt_htt				# Change variable ****
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer homelands to FROM
		every_scope_state = {
			limit = { 
				state_region = { is_homeland = cu:egyptian }
				NOT = { state_region = s:STATE_PALESTINE }
			}
			set_state_owner = c:EGY
		}
		
		#Gain relations with all Arab nations
		every_country = {
			limit = { any_primary_culture = { has_discrimination_trait = arab_speaking } }
			change_relations = {
				country = c:ISR
				value = 100
			}
		}
		
		#THIS loses infamy
		change_infamy = -50
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#Lose relations with all Arab nations
		every_country = {
			limit = { any_primary_culture = { has_discrimination_trait = arab_speaking } }
			change_relations = {
				country = c:ISR
				value = -100
			}
		}
		
		#THIS gains infamy
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Oslo Accords
historical_territorial_transfers.19 = {
    type = country_event

    title = transfer_territory_israel_palestine.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_israel_palestine.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_israel_palestine.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:ISR ?= this
		game_date >= 1993.9.13									# START DATE: Date colony became self governing ****
		game_date < 2003.9.13									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		NOT = { exists = c:PAL }
		owns_entire_state_region = STATE_PALESTINE
		
		#US involvement
		exists = c:USA
		c:USA = { 												# Change TAG of the transferee ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			
			country_rank >= rank_value:great_power
		}
		
		# Event has not been fired before
		NOT = { has_variable = transfer_territory_israel_palestine_htt }	# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = transfer_territory_israel_palestine_htt				# Change variable ****
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Release Palestine
		create_country = {
			tag = PAL										# Change TAG of country being released ****
			origin = THIS									# TAG where the created country takes tech from
			province = p:xC9CBC0	#West Bank
			province = p:x60D060	#Gaza
			
			on_created = {									# Set government laws & rulers here
				
				# SET laws for colony ****
				effect_starting_politics_semi_presidential_republic = yes
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_unitary_state = yes
				effect_starting_politics_war_policy_anti_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_protectionism = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				#Yasser Arafat
				create_character = {
					first_name = "Yasser_Arafat_first_name"
					last_name = "Yasser_Arafat_last_name"
					ruler = yes ig_leader = yes historical = yes
					birth_date = 1929.8.24
					interest_group = ig_trade_unions
					ideology = ideology_power_hungry
					culture = cu:palestinian
					religion = rel:sunni
					traits = {
						ambitious
						persistent
						charismatic
					}
					on_created = { set_variable = Yasser_Arafat }
				}
				
				# Set diplomatic recognition
				set_country_type = unrecognized
			}
		}
		if = {
			limit = { exists = c:PAL }
			# Overlord create client state pact with colony
			create_diplomatic_pact = {
				country = c:PAL									# Change TAG ****
				type = special_administrative_region
			}
		}
		
		#Gain relations with all Arab nations
		every_country = {
			limit = { any_primary_culture = { has_discrimination_trait = arab_speaking } }
			change_relations = {
				country = c:ISR
				value = 100
			}
		}
		
		#THIS loses infamy
		change_infamy = -50
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#Lose relations with all Arab nations
		every_country = {
			limit = { any_primary_culture = { has_discrimination_trait = arab_speaking } }
			change_relations = {
				country = c:ISR
				value = -100
			}
		}
		
		#THIS gains infamy
		change_infamy = 10
		
		#Palestinians angry
		add_radicals = {
			value = very_large_radicals
			culture = cu:palestinian
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Annexation of Crimea
historical_territorial_transfers.20 = {
    type = country_event

    title = transfer_territory_crimea.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_crimea.d 						# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_crimea.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_territorial_annexation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Annex Crimea
		if = {
			limit = { 
				exists = c:CRI
				c:CRI ?= {
					is_sufficiently_independent = yes
				}
			}
			c:RUS = { annex = c:CRI }
		}
		if = {
			limit = {
				#NOT = { exists = c:CRI }
				c:UKR = { owns_entire_state_region = STATE_CRIMEA }
			}
			s:STATE_CRIMEA.region_state:UKR = { 
				set_state_owner = c:RUS 
			}
		}
		
		#International community does not like this
		change_infamy = 40
		
		#Ukraine is angry!
		set_relations = {
			country = c:UKR
			value = -100
		}
		
		#Domestic reaction
		add_loyalists = {
			culture = cu:russian
			value = very_large_radicals
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_annexation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#Crimea is angry!
		change_relations = {
			country = c:CRI
			value = -100
		}
		
		#Domestic reaction
		add_radicals = {
			culture = cu:russian
			value = very_large_radicals
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Aouzou Strip - Chad
historical_territorial_transfers.21 = {
    type = country_event

    title = transfer_territory_aouzou_strip.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_aouzou_strip.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_aouzou_strip.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:CHA ?= this											# Change TAG of the overlord ****
		game_date >= 1972.12.1									# START DATE: Date colony became self governing ****
		game_date < 1982.10.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		NOT = { is_a_communist_government = yes }				# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:LBY
		c:LBY = { 												# Change TAG of the transferee ****
			is_a_nationalist_government = yes
			is_sufficiently_independent = yes
			is_at_war = no
			has_state_in_state_region = STATE_LIBYA
			has_state_in_state_region = STATE_LIBYAN_DESERT
		}
		
		#Owns Aouzou Strip
		owns_entire_state_region = STATE_CHAD
		
		# Event has not been fired before
		NOT = { has_variable = chadian_aouzou_strip_htt }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = chadian_aouzou_strip_htt					# Change variable ****
		
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Offer Aouzou Strip to Libya
		c:LBY = { trigger_event = { id = historical_territorial_transfers.22 } }
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		change_relations = {
			country = c:LBY
			value = -100
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Aouzou Strip - Libya
historical_territorial_transfers.22 = {
    type = country_event

    title = transfer_territory_aouzou_strip.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_aouzou_strip.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_aouzou_strip.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
    
    option = {
        name = historical_territorial_annexation.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer provinces
		s:STATE_CHAD = {
			set_owner_of_provinces = {
				country = c:LBY
				provinces = { x49D8EA x0DD2DC xABB7F4 x84AC70 xD87F94 x954978 xB1C7E4 x8E3D25 xFFF16A xF0D447 x37C0E7 x90F6EC xF523D7 x2E991B x98455D xC9498B xE59A76 }
			}
		}
		
		#Gain relations
		change_relations = {
			country = c:CHA
			value = 100
		}
		
		#Payment to Chad
		c:CHA = { add_treasury = 100000 }
		add_treasury = -100000
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_annexation.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#Lose relations
		change_relations = {
			country = c:CHA
			value = -50
		}
		
		change_infamy = -20
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Annexation of Hong Kong and Macau SAR
historical_territorial_transfers.23 = {
    type = country_event

    title = transfer_territory_china_SAR.t 						# Title of the event; ADD LOCALISATION
    desc = transfer_territory_china_SAR.d 						# Description of the event; ADD LOCALISATION
    flavor = transfer_territory_china_SAR.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		OR = { c:CHI ?= this c:PRC ?= this c:ROC ?= this }
		
		OR = {
			AND = { 
				game_date >= 2020.1.1
				NOT = { has_global_variable = historical_railroading_active }
			}
			AND = {
				game_date >= 2047.1.1
				game_date < 2070.1.1
				has_global_variable = historical_railroading_active
			}
		}
		
		OR = {
			exists = c:HKG
			exists = c:MCA
		}
		OR = {
			AND = {
				exists = c:HKG
				c:HKG ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = HKG_annexation_timer }
				NOT = { has_variable = HKG_perm_1_country_2_systems }
			}
			AND = {
				exists = c:MCA
				c:MCA ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = MCA_annexation_timer }
				NOT = { has_variable = MCA_perm_1_country_2_systems }
			}
			is_a_democracy = yes
		}
		
		is_sufficiently_independent = yes						# is_vassal = no
		is_at_war = no											# war = no
		
		# Fire only once per year
		NOT = { has_variable = 1_country_2_systems_htt }		# CHANGE ****
		
    }
	
	immediate = {
	
		if = {
			limit = {
				exists = c:HKG
				c:HKG ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = HKG_annexation_timer }
				NOT = { has_variable = HKG_perm_1_country_2_systems }
			}
			c:HKG = { save_scope_as = 1_country_2_systems_SAR }
		}
		if = {
			limit = {
				exists = c:MCA
				c:MCA ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = MCA_annexation_timer }
				NOT = { has_variable = MCA_perm_1_country_2_systems }
			}
			c:MCA = { save_scope_as = 1_country_2_systems_SAR }
		}
	
		# Fire only once per year
		set_variable = { 
			name = 1_country_2_systems_htt
			years = 1 
		}
		
	}
    
    option = {
        name = historical_territorial_annexation.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		if = {
			limit = {
				exists = c:HKG
				c:HKG ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = HKG_annexation_timer }
				NOT = { has_variable = HKG_perm_1_country_2_systems }
			}
			annex = c:HKG
		}
		if = {
			limit = {
				exists = c:MCA
				c:MCA ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = MCA_annexation_timer }
				NOT = { has_variable = MCA_perm_1_country_2_systems }
			}
			annex = c:MCA
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_annexation.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		if = {
			limit = {
				exists = c:HKG
				c:HKG ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = HKG_annexation_timer }
				NOT = { has_variable = HKG_perm_1_country_2_systems }
			}
			set_variable = HKG_perm_1_country_2_systems
			change_infamy = -10
		}
		if = {
			limit = {
				exists = c:MCA
				c:MCA ?= { 
					is_direct_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
				}
				NOT = { has_variable = MCA_annexation_timer }
				NOT = { has_variable = MCA_perm_1_country_2_systems }
			}
			set_variable = MCA_perm_1_country_2_systems
			change_infamy = -10
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Sale of Gwadar to Pakistan - OMA
historical_territorial_transfers.24 = {
    type = country_event

    title = transfer_territory_omani_gwadar.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_omani_gwadar.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_omani_gwadar.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:OMA ?= this
		game_date >= 1958.12.8									# START DATE: Date colony became self governing ****
		game_date < 1968.12.8									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_monarchy = yes										# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:PAK
		c:PAK = { 												# Change TAG of the transferee ****
			#is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Colony conditions
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:pakistani }		# Change homeland identity to match colony to be released ****
		}
		
		# Event has not been fired before
		NOT = { has_variable = omani_gwadar_htt }				# CHANGE ****
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = omani_gwadar_htt							# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Offer Gwadar to Pakistan
		c:PAK = { 
			trigger_event = { id = historical_territorial_transfers.25 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		# Natives are angry!
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:pakistani } }
			add_radicals_in_state = {
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Sale of Gwadar to Pakistan - PAK
historical_territorial_transfers.25 = {
    type = country_event

    title = transfer_territory_omani_gwadar.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_omani_gwadar.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_omani_gwadar.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
    
    option = {
        name = historical_territorial_annexation.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer provinces
		c:OMA = {
			every_scope_state = {
				limit = { state_region = { is_homeland = cu:pakistani } }
				set_state_owner = c:PAK
			}
		}
		
		#Gain relations
		change_relations = {
			country = c:OMA
			value = 100
		}
		
		#Payment to Oman
		c:OMA = { add_treasury = 100000 }
		add_treasury = -100000
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_annexation.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#Lose relations
		change_relations = {
			country = c:OMA
			value = -50
		}
		
		change_infamy = -10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Transfer of Cabinda - POR
historical_territorial_transfers.26 = {
    type = country_event

    title = transfer_territory_portuguese_cabinda.t 			# Title of the event; ADD LOCALISATION
    desc = transfer_territory_portuguese_cabinda.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_portuguese_cabinda.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:POR ?= this
		
		# Event has not been fired before
		NOT = { has_variable = portuguese_cabinda_htt }			# CHANGE ****
		
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Owns Cabinda
		p:x406070.state.owner = { THIS = ROOT }
		
		#Recipent conditions
		exists = c:ANG
		c:ANG = { 												# Change TAG of the transferee ****
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = portuguese_cabinda_htt					# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		change_infamy = -20
		
		s:STATE_CONGO = {
			set_owner_of_provinces = {
				country = c:ANG
				provinces = { x406070 }
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		# Natives are angry!
		every_scope_state = {
			limit = { state_region = s:STATE_CONGO }
			add_radicals_in_state = {
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Bizonia
historical_territorial_transfers.27 = {
    type = country_event

    title = transfer_territory_british_bizonia.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_british_bizonia.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_british_bizonia.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:GBR ?= this
		game_date >= 1947.1.1									# START DATE: Date colony became self governing ****
		game_date < 1957.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#USA exists
		exists = c:USA
		c:USA = {
			is_a_democracy = yes
			is_sufficiently_independent = yes						# is_vassal = no		
			is_at_war = no
		}
		
		#Owns Germany
		exists = c:WGR
		c:WGR = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			NOT = { is_sufficiently_independent = yes }
			is_at_war = no
		}
		exists = c:SGR
		c:SGR = { 												# Change TAG of the transferee ****
			is_direct_subject_of = c:USA
			NOT = { is_sufficiently_independent = yes }
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_bizonia_htt }			# CHANGE ****
		
		#Cold War ongoing
		cold_war_ongoing = yes
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = british_bizonia_htt						# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer WGR to USA
		c:WGR = {
			annex = c:SGR
			set_market_capital = STATE_HESSE 	#Franfurt
			
			hidden_effect = { make_independent = yes }
		}
		c:USA = {
			create_diplomatic_pact = {
				country = c:WGR
				type = mandate
			}
		}
		
		#Communists don't like this
		if = {
			limit = { cold_war_ongoing = yes }
			every_country = {
				limit = { 
					country_is_in_europe = yes 
					is_a_communist_government = yes
					is_sufficiently_independent = yes
				}
				change_relations = { country = ROOT value = -50 }
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#Colony is angry
		c:WGR = {
			add_radicals = {
				value = large_radicals
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Trizonia
historical_territorial_transfers.28 = {
    type = country_event

    title = transfer_territory_french_trizonia.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_french_trizonia.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_french_trizonia.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:FRA ?= this
		game_date >= 1948.8.1									# START DATE: Date colony became self governing ****
		game_date < 1958.8.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#USA exists
		exists = c:USA
		c:USA = {
			is_a_democracy = yes
			is_sufficiently_independent = yes						# is_vassal = no		
			is_at_war = no
		}
		
		#Owns Germany
		exists = c:RHE
		c:RHE = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			NOT = { is_sufficiently_independent = yes }
			is_at_war = no
		}
		exists = c:WGR
		c:WGR = { 												# Change TAG of the transferee ****
			is_direct_subject_of = c:USA
			NOT = { is_sufficiently_independent = yes }
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = french_bizonia_htt }				# CHANGE ****
		
		#Cold War ongoing
		cold_war_ongoing = yes
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = french_bizonia_htt						# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer RHE to WGR
		c:WGR = {
		
			annex = c:RHE
			
			set_capital = STATE_NORTH_RHINE 	#Bonn
			
			#Create International Authority for the Ruhr
			if = {
				limit = { 
					has_state_in_state_region = STATE_RHINELAND 
					has_state_in_state_region = STATE_NORTH_RHINE
					has_state_in_state_region = STATE_RUHR
				}
				create_country = {
					tag = IAR										# Change TAG of country being released ****
					origin = ROOT									# TAG where the created country takes tech from
					province = p:x518021 
					province = p:x8001E0 
					province = p:x834B66 
					province = p:x9F4072 
					province = p:x29CCD6
					province = p:x2101E0 
					province = p:xD08021 
					province = p:x0180E0
					province = p:xD080A0
					
					on_created = {									# Set government laws & rulers here
						
						# SET laws for colony ****
						effect_starting_politics_parliamentary_republic = yes
						effect_starting_politics_dictatorship = yes
						effect_starting_politics_constitutional_federal_state = yes
						effect_starting_politics_war_policy_pacifism = yes
						effect_starting_politics_economic_policy_state_capitalism = yes
						effect_starting_politics_trade_policy_free_trade = yes
						effect_starting_politics_anti_nuclear_policy = yes
						
						effect_starting_politics_specialisation_natural_resource = yes
						
						effect_starting_politics_semi_gold_system = yes
						
						# Set diplomatic recognition
						set_country_type = unrecognized
						
					}
				}
			}
			if = {
				limit = { exists = c:IAR }
				c:FRA = {
					create_diplomatic_pact = {
						country = c:IAR
						type = mandate
					}
				}
			}
			
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		#Colony is angry
		c:RHE = {
			add_radicals = {
				value = large_radicals
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#KMT flees to Taiwan
historical_territorial_transfers.29 = {
    type = country_event

    title = transfer_territory_KMT_PRC.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_KMT_PRC.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_KMT_PRC.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:ROC ?= this
		game_date >= 1947.1.1									# START DATE: Date colony became self governing ****
		game_date < 1950.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		OR = { 
			is_a_nationalist_government = yes
			is_a_republican_regime = yes
		}
		is_sufficiently_independent = yes						# is_vassal = no		
		
		#Recipent conditions
		exists = c:PRC
		c:PRC = { 												# Change TAG of the transferee ****
			is_a_communist_government = yes
			is_sufficiently_independent = yes
		}
		has_war_with = c:PRC
		
		#Losing the war
		OR = { 
			enemy_occupation > 0.5
			any_scope_war = {
				has_war_support = { target = ROOT value < -25 }
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = KMT_PRC_htt }					# CHANGE ****
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = KMT_PRC_htt								# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Flee to Taiwan
		every_scope_state = {
			limit = { 
				NOR = { 
					state_region = s:STATE_FORMOSA
					state_region = s:STATE_GUANGDONG
				}
			}
			set_state_owner = c:PRC
		}
		if = {
			limit = { 
				c:ROC = { has_state_in_state_region = STATE_GUANGDONG } 
			}
			c:PRC = { trigger_event = { id = historical_civil_wars.24 } }
		}
		every_diplomatic_play = {
			limit = {
				initiator_is = c:PRC
				target_is = c:ROC
			}
			end_play = yes
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Denpasar Conference
historical_territorial_transfers.30 = {
    type = country_event

    title = transfer_territory_dutch_east_indonesia.t 			# Title of the event; ADD LOCALISATION
    desc = transfer_territory_dutch_east_indonesia.d 			# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_dutch_east_indonesia.f 		# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:NET ?= this
		game_date >= 1949.12.24									# START DATE: Date colony became self governing ****
		game_date < 1959.12.24									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes
		is_sufficiently_independent = yes						# is_vassal = no		
		#is_at_war = no											# war = no
		
		#USA exists
		exists = c:IDO
		c:IDO = {
			is_a_democracy = yes
			is_sufficiently_independent = yes					# is_vassal = no		
			OR = { 
				is_at_war = no
				has_war_with = ROOT
			}
		}
		
		#Owns East Indonesia
		exists = c:EID
		c:EID = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			NOT = { is_sufficiently_independent = yes }
			OR = { 
				is_at_war = no
				has_war_with = c:IDO
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = dutch_east_indonesia_htt }		# CHANGE ****
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = dutch_east_indonesia_htt					# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer EID to IDO
		c:IDO = {
			annex = c:EID
			
			#EID don't like this
			add_radicals = {
				value = large_radicals
				culture = cu:moluccan
			}
			add_radicals = {
				value = large_radicals
				culture = cu:balinese
			}
			
		}
		
		#End war
		if = {
			limit = { has_war_with = c:IDO }
			every_diplomatic_play = {
				limit = {
					initiator_is = c:NET
					target_is = c:IDO
				}
				end_play = yes
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		change_infamy = 20
		
		change_relations = { 
			country = c:IDO 
			value = -100 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Porkkala Naval Base
historical_territorial_transfers.31 = {
    type = country_event
	placement = s:STATE_UUSIMAA

    title = transfer_territory_port_porkkala.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_port_porkkala.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_port_porkkala.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1956.1.26									# START DATE: Date colony became self governing ****
		game_date < 1966.1.26									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:FIN
		c:FIN ?= {
			OR = { 
				is_a_communist_government = yes
				is_a_democracy = yes
			}
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Owns treaty port
		has_state_in_state_region = STATE_UUSIMAA
		
		# Event has not been fired before
		NOT = { has_variable = soviet_port_porkkala_htt }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = soviet_port_porkkala_htt					# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return treaty port
		every_scope_state = {
			limit = {
				state_region = s:STATE_UUSIMAA			# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:FIN								# Change TAG to colony ****
		}
		
		#FROM is happy!
		change_relations = { 
			country = c:FIN
			value = 100 
		}
		
		# International community likes this
		change_infamy = -10
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2			# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:FIN
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Bornholm Naval Base
historical_territorial_transfers.32 = {
    type = country_event
	placement = s:STATE_ZEALAND

    title = transfer_territory_port_bornholm.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_port_bornholm.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_port_bornholm.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1946.4.5									# START DATE: Date colony became self governing ****
		game_date < 1956.4.5									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:DEN
		c:DEN ?= {
			OR = { 
				is_a_communist_government = yes
				is_a_democracy = yes
			}
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Owns treaty port
		has_state_in_state_region = STATE_ZEALAND
		
		# Event has not been fired before
		NOT = { has_variable = soviet_port_bornholm_htt }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = soviet_port_bornholm_htt					# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return treaty port
		every_scope_state = {
			limit = {
				state_region = s:STATE_ZEALAND			# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:DEN								# Change TAG to colony ****
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2			# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:DEN
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Dodecanese
historical_territorial_transfers.33 = {
    type = country_event
	placement = s:STATE_EAST_AEGEAN_ISLANDS

    title = transfer_territory_port_dodecanese.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_port_dodecanese.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_port_dodecanese.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:GBR ?= this
		game_date >= 1947.9.15									# START DATE: Date colony became self governing ****
		game_date < 1957.9.15									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:GRE
		c:GRE ?= {
			is_a_democracy = yes
			is_sufficiently_independent = yes
			#is_at_war = no
		}
		
		#Owns treaty port
		has_state_in_state_region = STATE_EAST_AEGEAN_ISLANDS
		
		# Event has not been fired before
		NOT = { has_variable = british_port_dodecanese_htt }	# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = british_port_dodecanese_htt				# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return treaty port
		every_scope_state = {
			limit = {
				state_region = s:STATE_EAST_AEGEAN_ISLANDS		# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:GRE								# Change TAG to colony ****
		}
		
		#TUR is agnry!
		random_country = {
			limit = {
				c:TUR ?= this
				is_sufficiently_independent = yes
			}
			change_relations = { 
				country = ROOT
				value = -50
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:GRE
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Confederate Newfoundland with Canada
historical_territorial_transfers.34 = {
    type = country_event

    title = transfer_territory_british_newfoundland.t 			# Title of the event; ADD LOCALISATION
    desc = transfer_territory_british_newfoundland.d 			# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_british_newfoundland.f 		# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:GBR ?= this
		game_date >= 1949.3.31									# START DATE: Date colony became self governing ****
		game_date < 1959.3.31									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democratic_monarchy = yes
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#NFL exists
		exists = c:NFL
		c:NFL = {
			is_direct_subject_of = ROOT
			NOT = { is_sufficiently_independent = yes }		
			is_at_war = no
		}
		
		#Canada exists
		exists = c:CAN
		c:CAN = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_a_democratic_monarchy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_newfoundland_htt }		# CHANGE ****
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = british_newfoundland_htt					# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer NFL to CAN
		c:CAN = {
			annex = c:NFL
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		change_infamy = 10
		
		change_relations = { 
			country = c:NFL
			value = -50
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Annex Sarawak
historical_territorial_transfers.35 = {
    type = country_event

    title = transfer_territory_british_sarawak.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_british_sarawak.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_british_sarawak.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 			# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:GBR ?= this
		game_date >= 1946.7.1									# START DATE: Date colony became self governing ****
		game_date < 1956.7.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democratic_monarchy = yes
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#SWK exists
		exists = c:SWK
		c:SWK = {
			is_direct_subject_of = ROOT
			is_a_monarchy = yes
			NOT = { is_sufficiently_independent = yes }		
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = british_sarawak_htt }			# CHANGE ****
		
    }
    
	immediate = {
		
		# Fire only once
		set_variable = british_sarawak_htt						# Change variable ****
	
	}
	
    option = {
        name = historical_territorial_transfers.option.1		# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Transfer SWK to GBR
		annex = c:SWK
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:sarawakian
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse land transfer request by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#End the Occupation of Lebanon - ISR
historical_territorial_transfers.36 = {
    type = country_event
	placement = c:LEB

    title = transfer_territory_lebanon_ISR.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_lebanon_ISR.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_lebanon_ISR.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:ISR ?= this
		game_date >= 2000.5.25									# START DATE: Date colony became self governing ****
		game_date < 2010.5.25									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Occupies Lebanon
		has_state_in_state_region = STATE_LEBANON
		
		#Recipent conditions
		exists = c:LEB
		c:LEB ?= {
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			is_adjacent_to_country = ROOT
		}
		
		# Event has not been fired before
		NOT = { has_variable = israeli_lebanon_htt }			# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = israeli_lebanon_htt						# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return territory
		every_scope_state = {
			limit = {
				state_region = s:STATE_LEBANON					# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:LEB								# Change TAG to colony ****
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:LEB
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#End the Occupation of Lebanon - SYR
historical_territorial_transfers.37 = {
    type = country_event
	placement = c:LEB

    title = transfer_territory_lebanon_SYR.t 					# Title of the event; ADD LOCALISATION
    desc = transfer_territory_lebanon_SYR.d 					# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_lebanon_SYR.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SYR ?= this
		game_date >= 2005.4.30									# START DATE: Date colony became self governing ****
		game_date < 2015.4.30									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		OR = { 
			is_a_democracy = yes								# Correct gov types
			is_a_nationalist_government = yes
			is_a_republican_regime = yes
		}
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Occupies Lebanon
		has_state_in_state_region = STATE_LEBANON
		
		#Recipent conditions
		exists = c:LEB
		c:LEB ?= {
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			is_adjacent_to_country = ROOT
		}
		
		# Event has not been fired before
		NOT = { has_variable = syrian_lebanon_htt }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = syrian_lebanon_htt						# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return territory
		every_scope_state = {
			limit = {
				state_region = s:STATE_LEBANON					# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:LEB								# Change TAG to colony ****
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:LEB
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Return of Wavis Bay
historical_territorial_transfers.38 = {
    type = country_event
	placement = scope:state_to_transfer

    title = transfer_territory_SAF_NMB.t 						# Title of the event; ADD LOCALISATION
    desc = transfer_territory_SAF_NMB.d 						# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_SAF_NMB.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		OR = { c:SAF ?= this c:RSA ?= this }
		game_date >= 1994.3.1									# START DATE: Date colony became self governing ****
		game_date < 2005.3.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Owns Wavis Bay
		has_state_in_state_region = STATE_NAMAQUALAND
		
		#Recipent conditions
		exists = c:NMB
		c:NMB ?= {
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			has_state_in_state_region = STATE_NAMAQUALAND
		}
		
		# Event has not been fired before
		NOT = { has_variable = SAF_NMB_htt }					# CHANGE ****
		
    }
	
	immediate = {
	
		random_scope_state = {
			limit = {
				state_region = s:STATE_NAMAQUALAND
			}
			save_scope_as = state_to_transfer
		}
	
		# Fire only once
		set_variable = SAF_NMB_htt								# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return territory
		every_scope_state = {
			limit = {
				state_region = s:STATE_NAMAQUALAND				# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:NMB								# Change TAG to colony ****
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:NMB
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Spanish Al Rif
historical_territorial_transfers.39 = {
    type = country_event
	placement = s:STATE_AL_RIF

    title = transfer_territory_spanish_morocco.t 				# Title of the event; ADD LOCALISATION
    desc = transfer_territory_spanish_morocco.d 				# Description of the event; ADD LOCALISATION
    #flavor = transfer_territory_spanish_morocco.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

	event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_map.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SPA ?= this
		game_date >= 1956.4.7									# START DATE: Date colony became self governing ****
		game_date < 1966.4.7									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		#is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Recipent conditions
		exists = c:MOR
		c:MOR ?= {
			OR = { 
				is_a_monarchy = yes
				is_a_democracy = yes
			}
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		#Owns treaty port
		has_state_in_state_region = STATE_AL_RIF
		
		# Event has not been fired before
		NOT = { has_variable = spanish_morocco_htt }			# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = spanish_morocco_htt						# Change variable ****
	
	}
    
    option = {
        name = historical_territorial_transfers.option.1		# Accept annexation by FROM
        highlighted_option = yes
		
		#Return treaty port
		every_scope_state = {
			limit = {
				state_region = s:STATE_AL_RIF					# Change homeland identity to match colony to be released ****
			}
			set_state_owner = c:MOR								# Change TAG to colony ****
		}
		
		#Retain part
		if = {
			limit = { 
				p:xCA9F75 ?= {
					owner = c:MOR
				}
				p:xA0B0C0 ?= {
					owner = c:MOR
				}
			}
			s:STATE_AL_RIF = {
				set_owner_of_provinces = {
					country = c:SPA
					provinces = { xCA9F75 xA0B0C0 }
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_territorial_transfers.option.2		# Refuse annexation by FROM
		default_option = yes
		
		#FROM is agnry!
		change_relations = { 
			country = c:MOR
			value = -100
		}
		
		# Add Infamy because doing this is against international law
		create_incident = {
			country = c:MOR
			value = 20
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}