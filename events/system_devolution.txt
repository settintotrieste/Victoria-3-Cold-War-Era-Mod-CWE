namespace = devolution_system

#Generic Devolution
devolution_system.1 = {
	type = country_event
	placement = scope:state_to_release

    title = {													# Title of the event; ADD LOCALISATION
	
		first_valid = {
			triggered_desc = {
				desc = devolution_system_1a.t
				trigger = {
					exists = scope:culture_to_release
				}
			}
			triggered_desc = {
				desc = devolution_system_1b.t
				trigger = {
					always = yes
				}
			}
		}
	
	}
	
    desc = devolution_system_1.d 					# Description of the event; ADD LOCALISATION
    flavor = devolution_system_1.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/europenorthamerica_political_extremism.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Only 1 decolonisation tag in the world at anytime
		NOT = { exists = c:XFC }
		
		#Devolution is legally permitted
		relinquishing_of_territory_permitted = yes
		
		#Owns Incorpoated Non-Core States (ie. states that THIS does not have cores in and is unincorporated)
		any_scope_state = {
			capable_of_release_devolution = yes
			turmoil > 0.75
			NOT = { has_modifier = nationalist_agitation }
			
			#Only discriminated want devolution
			any_scope_culture = {
				ROOT = { cultural_acceptance_base = { target = prev value < acceptance_status_5 } }
			}
		}
		
    }
	
	immediate = {
		
		random_scope_state = {
			limit = { 
				capable_of_release_devolution = yes
				turmoil > 0.75
				NOT = { has_modifier = nationalist_agitation }
				
				#Only discriminated want devolution
				any_scope_culture = {
					ROOT = { cultural_acceptance_base = { target = prev value < acceptance_status_5 } }
				}
			}
			save_scope_as = state_to_release
			random_scope_culture = { 
				limit = { 
					has_homeland = scope:state_to_release
					NOT = { is_primary_culture_of = ROOT }
					ROOT = { cultural_acceptance_base = { target = prev value < acceptance_status_5 } }
				}
				save_scope_as = culture_to_release
			}
		}
		
	}
	
	cancellation_trigger = {
		NOR = {
			exists = scope:state_to_release 
			exists = scope:culture_to_release
		}
	}
    
    option = {
        name = devolution_system_1.option.1						# Grant greater autonomy
        highlighted_option = yes
		
		change_infamy = -10
		
		if = {
			limit = { exists = scope:culture_to_release }
			random_country = {
				limit = { country_has_primary_culture = scope:culture_to_release }
				save_scope_as = third_party_country
			}
		}
		if = {
			limit = { exists = scope:state_to_release }
			random_country = {
				limit = { any_primary_culture = { has_homeland = scope:state_to_release } }
				save_scope_as = third_party_country
			}
		}
		
		if = {
			limit = { exists = scope:third_party_country }
			every_scope_state = {
				limit = { is_homeland_of_country_cultures = scope:third_party_country capable_of_release_devolution = yes } 
				set_state_owner = scope:third_party_country
			}
			change_relations = {
				country = scope:third_party_country
				value = 100
			}
		}
		
		#Release 1 SAR
		if = {
			limit = { 
				NOT = { exists = c:XFC }
				NOT = { exists = scope:third_party_country } 
			}
			custom_tooltip = {
				text = special_administrative_region.tt
				if = {
					limit = { 
						exists = scope:state_to_release 
						exists = scope:culture_to_release
						NOT = { exists = scope:third_party_country }
					}
					every_scope_state = {
						limit = { 
							state_region = { 
								is_homeland = scope:culture_to_release 
							}
							NOT = { is_homeland_of_country_cultures = ROOT }
						}
						set_variable = { name = state_to_cede months = 3 }
					}
					create_dynamic_country = {
						origin = ROOT
						country_type = unrecognized
						tier = city_state
						capital = scope:state_to_release
						cede_state_trigger = {
							has_variable = state_to_cede
						}
						on_created = { 
						
							every_scope_state = {
								remove_variable = state_to_cede
							}
						
							set_release_vassal_effects = yes
							
							set_variable = dynamic_decolonisation_country
							
							#create_character = {
							#	ruler = yes
							#	culture = scope:culture_to_release
							#	religion = scope:religion_to_release
							#}
							
						}
					}
				}
				
				#Set colony's primary culture
				scope:state_to_release.owner = {
					if = {
						limit = { has_variable = dynamic_decolonisation_country }
						
						#Forcefully remove all overlord primary cultures from the primary culture of THIS (up to 500)
						remove_primary_culture = scope:overlords_culture
						clear_all_overlord_primary_cultures = yes
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						if = { limit = { any_primary_culture = { is_primary_culture_of = ROOT } } clear_all_overlord_primary_cultures = yes }
						
						#Set primary culture of colony
						if = {
							limit = { exists = scope:culture_to_release }
							add_primary_culture = scope:culture_to_release
						}
						
						#Set state religion of colony
						random_scope_pop = {
							religion = { save_scope_as = religion_to_release }
						}
						if = {
							limit = { exists = scope:religion_to_release }
							set_state_religion = scope:religion_to_release
						}
						
						#Generate Ruler
						every_scope_character = { kill_character = yes }
						
					}
				}
				create_diplomatic_pact = {
					country = scope:state_to_release.owner
					type = special_administrative_region
				}
				create_diplomatic_pact = {
					country = scope:state_to_release.owner
					type = currency_union
				}
				create_diplomatic_pact = {
					country = scope:state_to_release.owner
					type = legal_union
				}
				#create_diplomatic_pact = {
				#	country = scope:state_to_release.owner
				#	type = military_cooperation_agreement
				#}
			}
		}
		
		ai_chance = {
			base = 90
			modifier = { trigger = { game_date < 2000.1.1 has_global_variable = historical_railroading_active } add = -100 }
			modifier = { trigger = { ruler ?= { NOR = { has_ideology = ideology:ideology_democratic has_ideology = ideology:ideology_liberal } } } add = -100 }
			modifier = { trigger = { country_rank >= rank_value:great_power } add = -100 }
		}
		
    }
	
	option = {
        name = devolution_system_1.option.2						# Maintain direct rule
		default_option = yes
		
		# Natives are angry!
		if = {
			limit = { exists = scope:culture_to_release }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = scope:culture_to_release }
				}
				add_radicals_in_state = {
					culture = scope:culture_to_release
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
		}
		else_if = {
			limit = { exists = scope:state_to_release }
			scope:state_to_release = {
				add_radicals_in_state = {
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
		}
		
		ai_chance = {
			base = 10 
		}
		
    }

}

#Clean up XFC tag
devolution_system.2 = {
	type = country_event
	placement = scope:state_to_release

    title = devolution_system.2.t 					# Title of the event; ADD LOCALISATION
    desc = devolution_system.2.d 						# Description of the event; ADD LOCALISATION
    flavor = devolution_system.2.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/europenorthamerica_political_extremism.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met

	trigger = {
		exists = c:XFC
		OR = {
			AND = { 
				NOT = { c:XFC ?= this }
				has_subject_relation_with = c:XFC
				c:XFC = {
					is_subject_of = ROOT 
					is_subject_type = subject_type_special_administrative_region
					NOT = { has_variable = XFC_timer } 
				}
			}
			AND = { 
				NOT = { c:XFC ?= this }
				c:XFC = { is_subject = no } 
				has_variable = XFC_originator
			}
			AND = { 
				c:XFC ?= this 
				c:XFC = { is_subject = no }
			}
		}
	}

	immediate = {
		
		c:XFC = { 
			random_scope_state = { 
				limit = { is_capital = yes }
				save_scope_as = state_to_release
			}
			random_primary_culture = {
				save_scope_as = primary_culture_scope
			}
			save_scope_as = failed_country_scope
		}
		
		if = {
			limit = { 
				c:XFC = { 
					is_subject_of = ROOT
					NOT = { has_variable = XFC_timer } 
				} 
			}
			c:XFC = { 
				every_scope_state = {
					set_state_owner = ROOT
				}
			}
		}
		else_if = {
			limit = { 
				c:XFC = { is_subject = no }
				has_variable = XFC_originator
			}
			c:XFC = { 
				every_scope_state = {
					set_state_owner = ROOT
				}
			}
		}
		else_if = {
			limit = { 
				c:XFC = { is_subject = no }
				any_country = {
					any_primary_culture = { is_primary_culture_of = c:XFC }
				}
			}
			random_country = {
				limit = { any_primary_culture = { is_primary_culture_of = c:XFC } }
				save_scope_as = to_whom_to_annex_to_XFC
			}
			c:XFC = { 
				every_scope_state = {
					set_state_owner = scope:to_whom_to_annex_to_XFC
				}
			}
		}
		else = {
			random_country = {
				limit = { 
					OR = { 
						has_strategic_adjacency = c:XFC 
						has_strategic_land_adjacency = c:XFC 
						any_scope_state = { any_neighbouring_state = { owner = c:XFC } }
					} 
				}
				save_scope_as = to_whom_to_annex_to_XFC
			}
			c:XFC = { 
				every_scope_state = {
					if = {
						limit = { exists = scope:to_whom_to_annex_to_XFC }
						set_state_owner = scope:to_whom_to_annex_to_XFC
					}
				}
				random_country = {
					limit = { 
						OR = { 
							has_strategic_adjacency = c:XFC 
							has_strategic_land_adjacency = c:XFC 
							any_scope_state = { any_neighbouring_state = { owner = c:XFC } }
						} 
					}
					annex = c:XFC
				}
			}
			if = {
				limit = { 
					exists = c:XFC 
					NOT = { c:XFC ?= this } 
				}
				annex = c:XFC
			}
		}
		
	}
	
	option = {
        name = devolution_system_2.option				# Okay
		
		if = {
			limit = { 
				exists = c:XFC 
				NOT = { c:XFC ?= this } 
			}
			annex = c:XFC
		}
		
	}

}