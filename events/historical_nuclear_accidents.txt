namespace = historical_nuclear_accidents

# Three Mile Island Nuclear Accident
historical_nuclear_accidents.1 = {
    type = country_event
	placement = scope:nuclear_accident_state

    title = nuclear_accident_1979.t 							# Title of the event; ADD LOCALISATION
    desc = nuclear_accident_1979.d 								# Description of the event; ADD LOCALISATION
    #flavor = nuclear_accident_1979.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_fire.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this
		game_date >= 1979.3.28										# START DATE: Date colony became self governing ****
		game_date < 1989.3.28										# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		# Event has not been fired before
		NOT = { has_variable = nuclear_accident_1979_hna }			# CHANGE ****
		
		is_a_democracy = yes										# Correct gov types
		is_sufficiently_independent = yes							# is_vassal = no		
		is_at_war = no												# war = no
		
		is_a_capitalistic_economy = yes
		
		#Cause of accident - poor regulations
		has_law_or_variant = law_type:law_pro_industry_regulations
		
		#Location of accident
		has_state_in_state_region = STATE_PENNSYLVANIA
		any_scope_state = {
			state_region = s:STATE_PENNSYLVANIA
			any_scope_building = {
				is_building_type = building_power_plant
				OR = { 
					has_active_production_method = pm_nuclear_plant
					has_active_production_method = pm_advanced_nuclear_plant
				}
			}
		}
		
    }
    
    immediate = {
		
		# Fire only once
		set_variable = nuclear_accident_1979_hna				# Change variable ****
		
		#Mark accident state
		random_scope_state = {
			limit = {
				state_region = s:STATE_PENNSYLVANIA
			}
			save_scope_as = nuclear_accident_state
		}
		
	}

	option = {
		name = historical_nuclear_accidents.option.1
		default_option = yes
		
		#Add nuclear accident effects
		scope:nuclear_accident_state = {
			if = { 
				limit = { 
					any_scope_building = { 
						is_building_type = building_power_plant
					} 
				} 
				remove_building = building_power_plant 
			}
			add_modifier = { 
				name = mild_nuclear_accident
				years = 5 
				is_decaying = yes
			}
		}
		
		#Domestic reaction
		add_radicals = {
			value = medium_radicals
		}
		
		#Boost anti-nuclear energy IG clout
		every_interest_group = {
			limit = {
				has_ideology = ideology:ideology_pro_environment
			}
			add_modifier = { 
				name = anti_nuclear_energy_modifier
				years = 5
				is_decaying = yes
			}
		}
		
	}

}

# Chernobyl Nuclear Disaster
historical_nuclear_accidents.2 = {
    type = country_event
	placement = scope:nuclear_accident_state

    title = nuclear_accident_1986.t 							# Title of the event; ADD LOCALISATION
    desc = nuclear_accident_1986.d 								# Description of the event; ADD LOCALISATION
    #flavor = nuclear_accident_1986.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_fire.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SOV ?= this
		game_date >= 1986.4.26										# START DATE: Date colony became self governing ****
		game_date < 1996.4.26										# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		# Event has not been fired before
		NOT = { has_variable = nuclear_accident_1986_hna }			# CHANGE ****
		
		is_a_communist_government = yes								# Correct gov types
		is_sufficiently_independent = yes							# is_vassal = no		
		is_at_war = no												# war = no
		
		is_a_command_economy = yes
		
		#Cause of accident - poor regulations
		has_law_or_variant = law_type:law_pro_industry_regulations
		
		#Location of accident
		has_state_in_state_region = STATE_KIEV
		any_scope_state = {
			state_region = s:STATE_KIEV
			any_scope_building = {
				is_building_type = building_power_plant
				OR = { 
					has_active_production_method = pm_nuclear_plant
					has_active_production_method = pm_advanced_nuclear_plant
				}
			}
		}
		
    }
    
    immediate = {
		
		# Fire only once
		set_variable = nuclear_accident_1986_hna					# Change variable ****
		
		#Mark accident state
		random_scope_state = {
			limit = {
				state_region = s:STATE_KIEV
			}
			save_scope_as = nuclear_accident_state
		}
		
	}

	option = {
		name = historical_nuclear_accidents.option.1
		default_option = yes
		
		#Add nuclear accident effects
		scope:nuclear_accident_state = {
			if = { 
				limit = { 
					any_scope_building = { 
						is_building_type = building_power_plant
					} 
				} 
				remove_building = building_power_plant 
			}
			add_modifier = { 
				name = major_nuclear_accident
				years = 20
				is_decaying = yes
			}
		}
		
		#Domestic reaction
		add_radicals = {
			value = medium_radicals
		}
		
		#Boost anti-nuclear energy IG clout
		every_interest_group = {
			limit = {
				has_ideology = ideology:ideology_pro_environment
			}
			add_modifier = { 
				name = anti_nuclear_energy_modifier
				years = 5
				is_decaying = yes
			}
		}
		
	}

}

# Fukushima Nuclear Accident
historical_nuclear_accidents.3 = {
    type = country_event
	placement = scope:nuclear_accident_state

    title = nuclear_accident_2011.t 							# Title of the event; ADD LOCALISATION
    desc = nuclear_accident_2011.d 								# Description of the event; ADD LOCALISATION
    #flavor = nuclear_accident_2011.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_fire.bk2" }

    icon = "gfx/interface/icons/event_icons/event_newspaper.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:JAP ?= this
		game_date >= 2011.3.11										# START DATE: Date colony became self governing ****
		game_date < 2021.3.11										# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		# Event has not been fired before
		NOT = { has_variable = nuclear_accident_2011_hna }			# CHANGE ****
		
		is_a_democracy = yes										# Correct gov types
		is_sufficiently_independent = yes							# is_vassal = no		
		is_at_war = no												# war = no
		
		is_a_capitalistic_economy = yes
		
		#Cause of accident - poor regulations
		has_law_or_variant = law_type:law_pro_industry_regulations
		
		#Location of accident
		has_state_in_state_region = STATE_TOHOKU
		any_scope_state = {
			state_region = s:STATE_TOHOKU
			any_scope_building = {
				is_building_type = building_power_plant
				OR = { 
					has_active_production_method = pm_nuclear_plant
					has_active_production_method = pm_advanced_nuclear_plant
				}
			}
		}
		
    }
    
    immediate = {
		
		# Fire only once
		set_variable = nuclear_accident_2011_hna				# Change variable ****
		
		#Mark accident state
		random_scope_state = {
			limit = {
				state_region = s:STATE_TOHOKU
			}
			save_scope_as = nuclear_accident_state
		}
		
	}

	option = {
		name = historical_nuclear_accidents.option.1
		default_option = yes
		
		#Add nuclear accident effects
		scope:nuclear_accident_state = {
			if = { 
				limit = { 
					any_scope_building = { 
						is_building_type = building_power_plant
					} 
				} 
				remove_building = building_power_plant 
			}
			add_modifier = { 
				name = moderate_nuclear_accident
				years = 10
				is_decaying = yes
			}
		}
		
		#Domestic reaction
		add_radicals = {
			value = medium_radicals
		}
		
		#Boost anti-nuclear energy IG clout
		every_interest_group = {
			limit = {
				has_ideology = ideology:ideology_pro_environment
			}
			add_modifier = { 
				name = anti_nuclear_energy_modifier
				years = 5
				is_decaying = yes
			}
		}
		
	}

}