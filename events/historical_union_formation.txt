namespace = historical_union_formation

#Libya
historical_union_formation.1 = {
    type = country_event

    title = united_libya.t 					# Title of the event; ADD LOCALISATION
    desc = united_libya.d 					# Description of the event; ADD LOCALISATION
    #flavor = united_libya.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#THIS is annexed by FROM
		c:LBY = { annex = ROOT }
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:LBY
			value = -100
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#United Arab Republic
historical_union_formation.2 = {
    type = country_event

    title = united_arab_republic.t 					# Title of the event; ADD LOCALISATION
    desc = united_arab_republic.d 					# Description of the event; ADD LOCALISATION
    #flavor = united_arab_republic.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:EGY
		this ?= c:EGY											# Change TAG of the overlord ****
		game_date >= 1958.2.22									# START DATE: Date colony became self governing ****
		game_date < 1968.2.22									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_nationalist_government = yes						# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		left_wing_ruling_coalition = yes						# Correct Ruling Coalition
		
		NOT = { exists = c:UAR }
		
		#Union candidate conditions
		exists = c:SYR
		c:SYR = { 												# Change TAG of the colony ****
			OR = { 
				is_a_nationalist_government = yes 
				is_a_republican_regime = yes 
				is_some_kind_of_democracy = yes 
				ruler ?= { has_variable = Shukri_al_Quwatli }
			}
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = UAR_1958_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = UAR_1958_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option for Syria to accept
		c:SYR = { 
			trigger_event = { id = historical_union_formation.3 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#Major discontent
		add_radicals = {
			value = medium_radicals
			strata = upper
		}
		add_radicals = {
			value = small_radicals
			strata = middle
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#United Arab Republic - recipient
historical_union_formation.3 = {
    type = country_event

    title = united_arab_republic.t 					# Title of the event; ADD LOCALISATION
    desc = united_arab_republic.d 					# Description of the event; ADD LOCALISATION
    #flavor = united_arab_republic.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		c:EGY = {
			set_variable = UAR_formed_before
			annex = c:SYR
			every_scope_state = {
				limit = { state_region = { is_homeland = cu:syrian } }
				set_state_type = incorporated
			}
			change_tag = UAR
		}
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:EGY
			value = -100
		}
		
		ai_chance = {
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Arab Federation
historical_union_formation.4 = {
    type = country_event

    title = hashemite_arab_federation.t 				# Title of the event; ADD LOCALISATION
    desc = hashemite_arab_federation.d 					# Description of the event; ADD LOCALISATION
    #flavor = hashemite_arab_federation.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:IRQ
		this ?= c:IRQ											# Change TAG of the overlord ****
		game_date >= 1958.2.14									# START DATE: Date colony became self governing ****
		game_date < 1968.2.14									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_regime_monarchy = yes								# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		right_wing_ruling_coalition = yes						# Correct Ruling Coalition
		
		NOT = { exists = c:ARF }
		exists = c:UAR
		
		#Union candidate conditions
		exists = c:JOR
		c:JOR = { 												# Change TAG of the colony ****
			is_a_regime_monarchy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = ARF_1958_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = ARF_1958_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option for Jordan to accept
		c:JOR = { 
			trigger_event = { id = historical_union_formation.5 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Arab Federation - recipient
historical_union_formation.5 = {
    type = country_event

	title = hashemite_arab_federation.t 				# Title of the event; ADD LOCALISATION
    desc = hashemite_arab_federation.d 					# Description of the event; ADD LOCALISATION
    #flavor = hashemite_arab_federation.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	immediate = {
		c:IRQ = { save_scope_as = personal_union_leader_scope }
		save_scope_as = personal_union_junior_scope
	}
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		custom_tooltip = {
			text = personal_union.tt
			make_independent = yes
			c:IRQ = {
				set_variable = ARF_formed_before
			
				create_diplomatic_pact = {
					country = c:JOR										# Change TAG ****
					type = confederal_state
				}
			}
		}
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:IRQ
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Union State of Russia and Belarus
historical_union_formation.6 = {
    type = country_event

    title = RUS_BYE_union.t 				# Title of the event; ADD LOCALISATION
    desc = RUS_BYE_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = RUS_BYE_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:RUS
		this ?= c:RUS											# Change TAG of the overlord ****
		game_date >= 1997.4.2									# START DATE: Date colony became self governing ****
		game_date < 2017.4.2									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_some_kind_of_democracy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:BYE
		c:BYE = { 												# Change TAG of the colony ****
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = RUS_BYE_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = RUS_BYE_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option for Belarus to accept
		c:BYE = { 
			trigger_event = { id = historical_union_formation.7 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Union State of Russia and Belarus - recipient
historical_union_formation.7 = {
    type = country_event

    title = RUS_BYE_union.t 				# Title of the event; ADD LOCALISATION
    desc = RUS_BYE_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = RUS_BYE_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		make_independent = yes
		c:RUS = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:RUS value = 100 }
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:RUS
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Senegambia Confederation
historical_union_formation.8 = {
    type = country_event

    title = SEN_GAM_union.t 				# Title of the event; ADD LOCALISATION
    desc = SEN_GAM_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = SEN_GAM_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SEN
		this ?= c:SEN											# Change TAG of the overlord ****
		game_date >= 1982.2.1									# START DATE: Date colony became self governing ****
		game_date < 1992.2.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_some_kind_of_democracy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:GAM
		c:GAM = { 												# Change TAG of the colony ****
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = SEN_GAM_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = SEN_GAM_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		c:GAM = { 
			trigger_event = { id = historical_union_formation.9 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Senegambia Confederation - recipient
historical_union_formation.9 = {
    type = country_event

    title = SEN_GAM_union.t 				# Title of the event; ADD LOCALISATION
    desc = SEN_GAM_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = SEN_GAM_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		make_independent = yes
		c:SEN = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:SEN value = 100 }
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:SEN
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Kashmir Accession to India - KAS
historical_union_formation.10 = {
    type = country_event

    title = KAS_HND_union.t 				# Title of the event; ADD LOCALISATION
    desc = KAS_HND_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = KAS_HND_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:KAS ?= this
		game_date >= 1947.10.26									# START DATE: Date colony became self governing ****
		game_date < 1957.10.26									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_monarchy = yes										# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:HND
		c:HND = { 												# Change TAG of the colony ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			is_adjacent_to_country = ROOT
		}
		
		#Cause of accession
		exists = c:PAK
		c:PAK = {
			is_sufficiently_independent = yes
			is_at_war = no
			is_adjacent_to_country = ROOT
		}
		
		# Event has not been fired before
		NOT = { has_variable = KAS_HND_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = KAS_HND_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		c:HND = { 
			trigger_event = { id = historical_union_formation.11 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Kashmir Acession to India - HND
historical_union_formation.11 = {
    type = country_event

    title = KAS_HND_union.t 				# Title of the event; ADD LOCALISATION
    desc = KAS_HND_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = KAS_HND_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		annex = c:KAS
		
		#Partition Kashmir
		if = {
			limit = { 
				owns_entire_state_region = STATE_KASHMIR 
				exists = c:PAK
			}
			s:STATE_KASHMIR = {
				set_owner_of_provinces = {
					country = c:PAK
					provinces = { x6326A6 x37C3E4 x00161D x150D2C xCDB7DB xB0FE2D x963360 x07D342 x504561 x1F1AF7 x2FF385 xF48515 x15F552 x2969A3 x5A0252 xB4AA65 xD25436 x43B99F xF8D822 xF28F90 }
				}
			}
		}
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:KAS
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Netherlands-Indonesia Union
historical_union_formation.12 = {
    type = country_event

    title = NET_IDO_union.t 				# Title of the event; ADD LOCALISATION
    desc = NET_IDO_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = NET_IDO_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#1946 start date only
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		exists = c:NET
		this ?= c:NET											# Change TAG of the overlord ****
		game_date >= 1946.1.1									# START DATE: Date colony became self governing ****
		game_date < 1956.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:IDO
		c:IDO = { 												# Change TAG of the colony ****
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = NET_IDO_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = NET_IDO_union_huf								# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		c:IDO = { 
			trigger_event = { id = historical_union_formation.13 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#The Netherlands-Indonesia Union - recipient
historical_union_formation.13 = {
    type = country_event

    title = NET_IDO_union.t 				# Title of the event; ADD LOCALISATION
    desc = NET_IDO_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = NET_IDO_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		hidden_effect = { make_independent = yes }
		c:NET = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:NET value = 100 }
		
		ai_chance = { 
			base = 99 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:NET
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Maltese United Kingdom Integration Referendum - MLT
historical_union_formation.14 = {
    type = country_event

    title = MLT_GBR_union.t 				# Title of the event; ADD LOCALISATION
    desc = MLT_GBR_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = MLT_GBR_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:MLT ?= this
		game_date >= 1956.2.11									# START DATE: Date colony became self governing ****
		game_date < 1966.2.11									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		exists = c:GBR
		c:GBR = { 												# Change TAG of the colony ****
			is_a_democracy = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		is_subject_of = c:GBR
		
		# Event has not been fired before
		NOT = { has_variable = MLT_GBR_union_huf }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = MLT_GBR_union_huf							# Change variable ****
		
	}
    
	option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:maltese
		}
		
		#Option to accept
		c:GBR = { 
			trigger_event = { id = historical_union_formation.15 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		#Domestic reaction
		add_loyalists = {
			value = large_radicals
			culture = cu:maltese
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Maltese United Kingdom Integration Referendum - GBR
historical_union_formation.15 = {
    type = country_event
	placement = c:MLT

    title = MLT_GBR_union.t 				# Title of the event; ADD LOCALISATION
    desc = MLT_GBR_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = MLT_GBR_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	option = {
        name = historical_gov_changes.option.1				# Refuse land transfer request by FROM
		highlighted_option = yes
		
		#Malta is happy
		change_relations = {
			country = c:MLT
			value = 25
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2				# Accept land transfer request by FROM
		default_option = yes
		
		#Annex malta
		annex = c:MLT
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:maltese
		}
		
		#Insufficient mandate
		change_infamy = 5
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Franco-British Union - FRA
historical_union_formation.16 = {
    type = country_event

    title = FRA_GBR_union.t 				# Title of the event; ADD LOCALISATION
    desc = FRA_GBR_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = FRA_GBR_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:FRA ?= this
		game_date >= 1956.9.1									# START DATE: Date colony became self governing ****
		game_date < 1966.9.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		NOT = { has_state_in_state_region = STATE_SINAI }
		
		#Union candidate conditions
		exists = c:GBR
		c:GBR = { 												# Change TAG of the colony ****
			is_a_democratic_monarchy = yes
			is_sufficiently_independent = yes
			is_at_war = no
			
			NOT = { has_state_in_state_region = STATE_SINAI }
		}
		
		# Event has not been fired before
		NOT = { has_variable = FRA_GBR_union_huf }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = FRA_GBR_union_huf						# Change variable ****
		
	}
    
	option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:french
		}
		
		#Option to accept
		c:GBR = { 
			trigger_event = { id = historical_union_formation.17 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Franco-British Union - GBR
historical_union_formation.17 = {
    type = country_event
	placement = c:FRA

    title = FRA_GBR_union.t 				# Title of the event; ADD LOCALISATION
    desc = FRA_GBR_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = FRA_GBR_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	option = {
        name = historical_gov_changes.option.1				# Refuse land transfer request by FROM
		highlighted_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:FRA
			value = -25
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					c:FRA = { is_player = yes }
				} 
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2				# Accept land transfer request by FROM
		default_option = yes
		
		#UK annexes France
		if = {
			limit = { 
				c:FRA = { is_player = no }
			}
			annex_with_incorporation = c:FRA
		}
		else_if = {
			limit = { 
				c:GBR = { is_player = no }
			}
			c:FRA = { 
				copy_laws = c:GBR
				annex_with_incorporation = c:GBR
			}
		}
		else = {
			annex_with_incorporation = c:FRA
		}
		change_tag = FBU
		add_primary_culture = cu:british
		add_primary_culture = cu:french
		
		#Correct capital
		if = {
			limit = { 
				capital ?= { NOT = { state_region = s:STATE_HOME_COUNTIES } }
			}
			set_capital = STATE_HOME_COUNTIES
		}
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:french
		}
		
		ai_chance = { 
			base = 10 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					c:FRA = { is_player = no }
				} 
				add = -100 
			}
		}
		
    }

}

#Yugoslav-Bulgarian Union - YUG
historical_union_formation.18 = {
    type = country_event
	placement = c:BUL

    title = YUG_BUL_union.t 				# Title of the event; ADD LOCALISATION
    desc = YUG_BUL_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = YUG_BUL_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:YUG ?= this
		game_date >= 1947.8.1									# START DATE: Date colony became self governing ****
		game_date < 1957.8.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		ruler ?= { has_variable = josip_broz_tito }
		
		#Union candidate conditions
		exists = c:BUL
		c:BUL = { 												# Change TAG of the colony ****
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = YUG_BUL_union_huf }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = YUG_BUL_union_huf						# Change variable ****
		
	}
    
	option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		if = {
			limit = { c:BUL = { is_subject_of = c:SOV } }
			random_country = {
				limit = {  
					c:SOV ?= this
				}
				trigger_event = { id = historical_union_formation.20 }
			}
		}
		else = {
			c:BUL = { 
				trigger_event = { id = historical_union_formation.19 } 
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2					# Refuse annexation by FROM
		default_option = yes
		
		#Domestic reaction
		add_loyalists = {
			value = large_radicals
			culture = cu:serb
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Yugoslav-Bulgarian Union - BUL
historical_union_formation.19 = {
    type = country_event
	placement = c:YUG

    title = YUG_BUL_union.t 				# Title of the event; ADD LOCALISATION
    desc = YUG_BUL_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = YUG_BUL_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	option = {
        name = historical_gov_changes.option.1				# Refuse land transfer request by FROM
		highlighted_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:YUG
			value = -100
		}
		
		#Soviet Bloc
		if = {
			limit = { c:BUL = { is_subject_of = c:SOV } }
			change_relations = {
				country = c:SOV
				value = 50
			}
			every_country = {
				limit = { 
					NOT = { THIS = ROOT } 
					is_subject_of = c:SOV 
				}
				change_relations = {
					country = ROOT
					value = 25
				}
			}
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					c:YUG = { is_player = yes }
				} 
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2				# Accept land transfer request by FROM
		default_option = yes
		
		#YUG annexes BUL
		if = {
			limit = { 
				c:BUL = { is_player = no }
			}
			c:YUG = { 
				annex_with_incorporation = c:BUL
				add_primary_culture = cu:bulgarian
			}
		}
		else_if = {
			limit = { 
				c:YUG = { is_player = no }
			}
			copy_laws = c:YUG
			annex_with_incorporation = c:YUG
			change_tag = YUG
			add_primary_culture = cu:yugoslavian
		}
		else = {
			c:YUG = { 
				annex_with_incorporation = c:BUL 
				add_primary_culture = cu:bulgarian
			}
		}
		
		#Correct capital
		if = {
			limit = { 
				capital ?= { NOT = { state_region = s:STATE_NORTHERN_SERBIA } }
			}
			set_capital = STATE_NORTHERN_SERBIA
		}
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:bulgarian
		}
		
		ai_chance = { 
			base = 10 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					c:YUG = { is_player = no }
				} 
				add = -100 
			}
		}
		
    }

}

#Yugoslav-Bulgarian Union - SOV
historical_union_formation.20 = {
    type = country_event
	placement = c:YUG

    title = YUG_BUL_union.t 				# Title of the event; ADD LOCALISATION
    desc = YUG_BUL_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = YUG_BUL_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	option = {
        name = historical_gov_changes.option.1				# Refuse land transfer request by FROM
		highlighted_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:YUG
			value = -50
		}
		every_country = {
			limit = { is_subject_of = ROOT }
			change_relations = {
				country = c:YUG
				value = -25
			}
		}
		
		#FROM is happy!
		change_relations = {
			country = c:BUL
			value = 50
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					c:YUG = { is_player = yes }
				} 
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2				# Accept land transfer request by FROM
		default_option = yes
		
		#Allow annexation of BUL by YUG
		c:BUL = { 
			trigger_event = { id = historical_union_formation.19 } 
		}
		
		#FROM is happy!
		change_relations = {
			country = c:YUG
			value = 200
		}
		
		ai_chance = { 
			base = 10 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					c:YUG = { is_player = no }
				} 
				add = -100 
			}
		}
		
    }

}

#Federation of Arab Republics - LBY
historical_union_formation.21 = {
    type = country_event
	placement = c:EGY

    title = LBY_EGY_union.t 				# Title of the event; ADD LOCALISATION
    desc = LBY_EGY_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = LBY_EGY_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:LBY ?= this
		game_date >= 1972.1.1									# START DATE: Date colony became self governing ****
		game_date < 1982.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_nationalist_government = yes						# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#No UAR
		NOT = { exists = c:UAR }
		
		#Union candidate conditions
		exists = c:EGY
		c:EGY ?= {
			is_a_nationalist_government = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		exists = c:SYR
		c:SYR ?= {
			is_a_nationalist_government = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = LBY_EGY_union_huf }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = LBY_EGY_union_huf						# Change variable ****
		
	}
    
	option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:libyan
		}
		
		#Mark
		set_variable = FAR_former
		
		#Option to accept
		every_country = {
			limit = { 
				OR = { 
					c:EGY ?= this
					c:SYR ?= this
					AND = {
						c:IRQ ?= this
						is_a_nationalist_government = yes
						is_sufficiently_independent = yes
						is_at_war = no
					}
				}
			}
			trigger_event = { id = historical_union_formation.22 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Federation of Arab Republics - EGY, SYR, IRQ
historical_union_formation.22 = {
    type = country_event
	placement = scope:FAR_former

    title = LBY_EGY_union.t 				# Title of the event; ADD LOCALISATION
    desc = LBY_EGY_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = LBY_EGY_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	immediate = {
		
		#Libya annexes THIS
		random_country = {
			limit = { has_variable = FAR_former }
			save_scope_as = FAR_former
		}
		
	}
	
	option = {
        name = historical_gov_changes.option.1				# Refuse land transfer request by FROM
		highlighted_option = yes
		
		#FROM is angry!
		change_relations = {
			country = scope:FAR_former
			value = -25
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					scope:FAR_former ?= { is_player = yes }
				} 
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2				# Accept land transfer request by FROM
		default_option = yes
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
		}
		
		#Change tag to UAR
		if = {
			limit = { 
				scope:FAR_former ?= { 
					NOT = { exists = c:UAR }
					NOT = { c:UAR ?= this }
				}
			}
			scope:FAR_former ?= { 
				change_tag = UAR
			}
		}
		scope:FAR_former ?= { 
			if = {
				limit = { ROOT = { c:EGY ?= this } }
				add_primary_culture = cu:egyptian
			}
			if = {
				limit = { ROOT = { c:SYR ?= this } }
				add_primary_culture = cu:syrian
			}
			if = {
				limit = { ROOT = { c:IRQ ?= this } }
				add_primary_culture = cu:iraqi
			}
		}
		
		#FAR former annexes THIS
		scope:FAR_former ?= {
			annex_with_incorporation = ROOT
		}
		
		ai_chance = { 
			base = 10 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					scope:FAR_former ?= { is_player = no }
				} 
				add = -100 
			}
		}
		
    }

}

#Union of Arab Republics - IRQ
historical_union_formation.23 = {
    type = country_event
	placement = c:SYR

    title = IRQ_SYR_union.t 				# Title of the event; ADD LOCALISATION
    desc = IRQ_SYR_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = IRQ_SYR_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:IRQ ?= this
		game_date >= 1972.10.1									# START DATE: Date colony became self governing ****
		game_date < 1982.10.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_nationalist_government = yes						# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#No UAR
		NOT = { exists = c:UAR }
		
		#Union candidate conditions
		exists = c:SYR
		c:SYR ?= {
			is_a_nationalist_government = yes
			is_sufficiently_independent = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = IRQ_SYR_union_huf }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = IRQ_SYR_union_huf						# Change variable ****
		
	}
    
	option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
			culture = cu:iraqi
		}
		
		#Mark
		set_variable = UAR_former
		
		#Option to accept
		every_country = {
			limit = { 
				OR = { 
					c:SYR ?= this 
					AND = {
						c:EGY ?= this
						is_a_nationalist_government = yes
						is_sufficiently_independent = yes
						is_at_war = no
					}
				}
			}
			trigger_event = { id = historical_union_formation.24 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Union of Arab Republics - SYR, IRQ
historical_union_formation.24 = {
    type = country_event
	placement = scope:UAR_former

    title = IRQ_SYR_union.t 				# Title of the event; ADD LOCALISATION
    desc = IRQ_SYR_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = IRQ_SYR_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
	
	immediate = {
		
		#Iraq annexes THIS
		random_country = {
			limit = { has_variable = UAR_former }
			save_scope_as = UAR_former
		}
		
	}
	
	option = {
        name = historical_gov_changes.option.1				# Refuse land transfer request by FROM
		highlighted_option = yes
		
		#FROM is angry!
		change_relations = {
			country = scope:UAR_former
			value = -25
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					NAND = {
						c:EGY ?= this
						has_global_variable = historical_railroading_active
					}
					scope:UAR_former ?= { is_player = yes }
				}
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2				# Accept land transfer request by FROM
		default_option = yes
		
		#Domestic reaction
		add_radicals = {
			value = large_radicals
		}
		
		#Change tag to UAR
		if = {
			limit = { 
				scope:UAR_former ?= { 
					NOT = { exists = c:UAR }
					NOT = { c:UAR ?= this }
				}
			}
			scope:UAR_former ?= { 
				change_tag = UAR
			}
		}
		scope:UAR_former ?= {
			if = {
				limit = { ROOT = { c:SYR ?= this } }
				add_primary_culture = cu:syrian
			}
			if = {
				limit = { ROOT = { c:EGY ?= this } }
				add_primary_culture = cu:egyptian
			}
		}
		
		#UAR former annexes THIS
		scope:UAR_former ?= {
			annex_with_incorporation = ROOT
		}
		
		ai_chance = { 
			base = 10 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					scope:UAR_former ?= { is_player = no }
				}
				add = -100 
			}
		}
		
    }

}

#United Arab States
historical_union_formation.25 = {
    type = country_event

    title = UAR_NYE_union.t 				# Title of the event; ADD LOCALISATION
    desc = UAR_NYE_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = UAR_NYE_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:UAR ?= this
		game_date >= 1958.3.8									# START DATE: Date colony became self governing ****
		game_date < 1968.3.8									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_nationalist_government = yes						# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		OR = { 
			AND = {
				exists = c:NYE
				c:NYE ?= {
					OR = { 
						is_a_regime_monarchy = yes
						is_a_nationalist_government = yes
					}
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
			AND = {
				exists = c:YEM
				c:YEM ?= {
					OR = { 
						is_a_regime_monarchy = yes
						is_a_nationalist_government = yes
					}
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = UAR_NYE_union_huf }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = UAR_NYE_union_huf						# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		random_country = {
			limit = { 
				OR = { 
					c:NYE ?= this 
					c:YEM ?= this 
				}
			}
			trigger_event = { id = historical_union_formation.26 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#United Arab States - recipient
historical_union_formation.26 = {
    type = country_event

    title = UAR_NYE_union.t 				# Title of the event; ADD LOCALISATION
    desc = UAR_NYE_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = UAR_NYE_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		make_independent = yes
		c:UAR = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:UAR value = 100 }
		
		ai_chance = { 
			base = 99
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:UAR
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Union of African States
historical_union_formation.27 = {
    type = country_event

    title = GHA_GUI_union.t 				# Title of the event; ADD LOCALISATION
    desc = GHA_GUI_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = GHA_GUI_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:GHA ?= this
		game_date >= 1958.11.23									# START DATE: Date colony became self governing ****
		game_date < 1968.11.23									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		OR = { 
			is_a_presidential_regime = yes
			is_a_presidential_democracy = yes
		}
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		OR = { 
			AND = {
				exists = c:GUI
				c:GUI ?= {
					OR = { 
						is_a_republican_regime = yes
						is_a_presidential_democracy = yes
					}
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
			AND = {
				exists = c:MAL
				c:MAL ?= {
					OR = { 
						is_a_republican_regime = yes
						is_a_presidential_democracy = yes
					}
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = GHA_GUI_union_huf }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = GHA_GUI_union_huf						# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		every_country = {
			limit = { 
				OR = { 
					c:GUI ?= this 
					c:MAL ?= this 
				}
			}
			trigger_event = { id = historical_union_formation.28 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2				# Refuse annexation by FROM
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Union of African States - recipient
historical_union_formation.28 = {
    type = country_event

    title = GHA_GUI_union.t 				# Title of the event; ADD LOCALISATION
    desc = GHA_GUI_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = GHA_GUI_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Create confederation
		make_independent = yes
		c:GHA = {
			create_diplomatic_pact = {
				country = ROOT
				type = confederal_state
			}
		}
		set_relations = { country = c:GHA value = 100 }
		
		ai_chance = { 
			base = 99
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:GHA
			value = -100
		}
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Federation of Bosnia and Herzegovina
historical_union_formation.29 = {
    type = country_event

    title = HZB_RSK_BOS_union.t 				# Title of the event; ADD LOCALISATION
    desc = HZB_RSK_BOS_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = HZB_RSK_BOS_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:BOS ?= this
		game_date >= 1995.12.14									# START DATE: Date colony became self governing ****
		game_date < 2005.12.14									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Union candidate conditions
		OR = { 
			AND = {
				exists = c:RSK
				c:RSK ?= {
					is_some_kind_of_democracy = yes
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
			AND = {
				exists = c:HZB
				c:HZB ?= {
					is_some_kind_of_democracy = yes
					is_sufficiently_independent = yes
					is_at_war = no
				}
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = HZB_RSK_BOS_union_huf }			# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = HZB_RSK_BOS_union_huf					# Change variable ****
		
	}
    
    option = {
        name = historical_union_formation.option.1				# Accept annexation by FROM
        highlighted_option = yes
		
		#Option to accept
		every_country = {
			limit = { 
				OR = { 
					c:RSK ?= this 
					c:HZB ?= this 
				}
			}
			trigger_event = { id = historical_union_formation.30 } 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = united_states_formation.option.2					# Refuse annexation by FROM
		default_option = yes
		
		add_loyalists = {
			value = very_large_radicals
			culture = cu:bosniak
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Federation of Bosnia and Herzegovina - recipient
historical_union_formation.30 = {
    type = country_event

    title = HZB_RSK_BOS_union.t 				# Title of the event; ADD LOCALISATION
    desc = HZB_RSK_BOS_union.d 					# Description of the event; ADD LOCALISATION
    #flavor = HZB_RSK_BOS_union.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by another event
		
    }
    
    option = {
        name = historical_union_formation.option.1			# Accept land transfer request by FROM
        highlighted_option = yes
		
		#Create Federation
		effect_starting_politics_democratic = yes
		
		if = {
			limit = { c:RSK ?= this }
			c:BOS = {
				effect_starting_politics_constitutional_federal_state = yes
				create_diplomatic_pact = {
					country = ROOT
					type = special_administrative_region
				}
			}
			change_relations = { country = c:BOS value = 100 }
		}
		else = {
			c:BOS = { annex = ROOT }
		}
		
		ai_chance = { 
			base = 99
		}
		
    }
	
	option = {
        name = historical_union_formation.option.2			# Refuse land transfer request by FROM
		default_option = yes
		
		#FROM is angry!
		change_relations = {
			country = c:BOS
			value = -100
		}
		
		change_infamy = 10
		
		ai_chance = { 
			base = 1 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}