namespace = eastern_europe_indy

#East Germany
eastern_europe_indy.1 = {
    type = country_event
	
    title = soviet_east_germany.indy.t 					# Title of the event; ADD LOCALISATION
    desc = soviet_east_germany.indy.d 					# Description of the event; ADD LOCALISATION
    #flavor = soviet_east_germany.indy.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SOV
		this = c:SOV											# Change TAG of the overlord ****
		game_date >= 1955.1.1									# START DATE: Date colony became self governing ****
		game_date < 1965.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Colony conditions
		exists = c:EGR
		c:EGR = { 												# Change TAG of the colony ****
			is_direct_subject_of = ROOT
			is_not_sufficiently_independent = yes
		}
		
		# Event has not been fired before
		NOT = { has_variable = soviet_east_germany_indy }		# CHANGE ****
		
    }
	
	immediate = { 
		
		# Fire only once
		set_variable = soviet_east_germany_indy					# Change variable ****
		
	}
    
    option = {
        name = eastern_europe_indy.option.1						# Grant them independence
        highlighted_option = yes
		
		# Colony becomes independent
		c:EGR = { 												# Change TAG of the colony ****
			make_independent = yes
			activate_law = law_type:law_defensive_war
			activate_law = law_type:law_mass_conscription
		}
		
		# Overlord create client state pact with colony
		create_diplomatic_pact = {
			country = c:EGR										# Change TAG ****
			type = satellite
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = eastern_europe_indy.option.2						# REFUSE
		default_option = yes
		
		c:EGR = {
		
			# Natives are angry!
			every_scope_state = {
				add_radicals_in_state = {
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
			
			#Colony is angry
			change_relations = {
				country = ROOT
				value = -100
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Baltic States
eastern_europe_indy.2 = {
    type = country_event
	
    title = soviet_baltic_states.indy.t 					# Title of the event; ADD LOCALISATION
    desc = soviet_baltic_states.indy.d 					# Description of the event; ADD LOCALISATION
    #flavor = soviet_baltic_states.indy.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SOV
		this = c:SOV											# Change TAG of the overlord ****
		game_date >= 1991.9.6									# START DATE: Date colony became self governing ****
		game_date < 2001.9.6									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Soviet Union has countries to release
		any_scope_state = {
			state_region = { 
				OR = { 
					is_homeland = cu:estonian
					is_homeland = cu:lithuanian
					is_homeland = cu:latvian
				} 
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = soviet_baltic_states_indy }		# CHANGE ****
		
    }
	
	immediate = { 
		
		# Fire only once
		set_variable = soviet_baltic_states_indy				# Change variable ****
		
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Grant them independence
        highlighted_option = yes
		
		# Release Baltic States, if not already released
		if = { 
			limit = { NOT = { exists = c:EST } has_state_in_state_region = STATE_TALINN }
			create_country = { tag = EST state = s:STATE_TALINN.region_state:SOV origin = THIS on_created = { soviet_SSR_dissolution_laws = yes } }
			if = { limit = { exists = c:EST } every_scope_state = { limit = { state_region = { is_homeland = cu:estonian } } set_state_owner = c:EST } }
		}
		if = { 
			limit = { NOT = { exists = c:LIT } has_state_in_state_region = STATE_VILNIUS }
			create_country = { tag = LIT state = s:STATE_VILNIUS.region_state:SOV origin = THIS on_created = { soviet_SSR_dissolution_laws = yes } }
			if = { limit = { exists = c:LIT } every_scope_state = { limit = { state_region = { is_homeland = cu:lithuanian NOT = { is_homeland = cu:german } } } set_state_owner = c:LIT } }
		}
		if = { 
			limit = { NOT = { exists = c:LAT } has_state_in_state_region = STATE_RIGA }
			create_country = { tag = LAT state = s:STATE_RIGA.region_state:SOV origin = THIS on_created = { soviet_SSR_dissolution_laws = yes } }
			if = { limit = { exists = c:LAT } every_scope_state = { limit = { state_region = { is_homeland = cu:latvian } } set_state_owner = c:LAT } }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = eastern_europe_indy.option.2						# REFUSE
		default_option = yes
		
		# Baltic Nationalism
		every_scope_state = {
			limit = { 
				state_region = { 
					OR = { 
						is_homeland = cu:estonian
						is_homeland = cu:lithuanian
						is_homeland = cu:latvian
					} 
				}
			}
			add_radicals_in_state = {
				value = very_large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes }
		}
		
		change_infamy = 25
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Weaken Eastern Bloc
eastern_europe_indy.3 = {
    type = country_event
	
    title = soviet_weaken_eastern_bloc.indy.t 					# Title of the event; ADD LOCALISATION
    desc = soviet_weaken_eastern_bloc.indy.d 					# Description of the event; ADD LOCALISATION
    flavor = soviet_weaken_eastern_bloc.indy.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SOV
		this = c:SOV											# Change TAG of the overlord ****
		OR = {
		
			has_revolution = yes
		
			in_default = yes
			
			AND = {
				game_date >= 1989.10.25
				has_global_variable = historical_railroading_active
			}
			
		}
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		has_journal_entry = je_perestroika
		
		#Warsaw Pact leader
		has_modifier = warsaw_pact_leader
		any_country = {
			has_modifier = warsaw_pact_member
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_satellite
		}
		
		# Event has not been fired before
		NOT = { has_variable = soviet_weaken_eastern_bloc_indy }		# CHANGE ****
		
    }
	
	immediate = { 
		
		# Fire only once
		set_variable = soviet_weaken_eastern_bloc_indy					# Change variable ****
		
	}
    
    option = {
        name = eastern_europe_indy.option.1						# Grant them independence
        highlighted_option = yes
		
		# Soviet Satellite & Puppet States become independent
		every_country = {
			limit = { 
				is_direct_subject_of = ROOT 
				OR = { 
					is_subject_type = subject_type_satellite
					is_subject_type = subject_type_mandate
					is_subject_type = subject_type_puppet
				}
			}
			change_subject_type = subject_type_protectorate
		}
		
		#World is happy
		change_infamy = -50
		every_country = {
			limit = { 
				is_a_democracy = yes 
				is_sufficiently_independent = yes
				country_rank >= rank_value:great_power 
			}
			change_relations = { country = ROOT value = 100 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = eastern_europe_indy.option.2						# REFUSE
		default_option = yes
		
		#Unrest in the Warsaw Pact
		every_country = {
			limit = { 
				is_direct_subject_of = ROOT 
				OR = { 
					is_subject_type = subject_type_satellite
					is_subject_type = subject_type_mandate
					is_subject_type = subject_type_puppet
				}
			}
			custom_tooltip = {
				text = everyone_is_angry_custom_tooltip
				add_radicals = {
					value = very_large_radicals
				}
				every_scope_state = {
					limit = { is_incorporated = yes }
					add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes }
				}
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# Democratisation of Eastern Bloc
eastern_europe_indy.4 = {
    type = country_event

    title = eastern_bloc_revolution.t 							# Title of the event; ADD LOCALISATION
    desc = eastern_bloc_revolution.d 							# Description of the event; ADD LOCALISATION
    flavor = eastern_bloc_revolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_politicians_arguing.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Eastern Bloc country
		NOT = { c:SOV ?= this }
		OR = { 
			country_is_in_europe = yes
			c:MGL ?= this
		}
		
		#Soviet Union exists or THIS became independent
		OR = {
		
			#Soviet Union exists
			AND = { 
				exists = c:SOV
				NOT = { c:SOV ?= this }
				c:SOV ?= {
					is_a_communist_government = yes							# Correct gov types
					is_sufficiently_independent = yes						# is_vassal = no		
					is_at_war = no	
					has_journal_entry = je_perestroika
				}
			}
			
			#No longer a Subject
			is_subject = no
			
		}
		
		#When
		OR = { 
		
			#Historical date
			AND = { 
				c:POL ?= this
				game_date >= 1989.6.4
				game_date < 1999.6.4
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:EGR ?= this
				game_date >= 1990.3.18
				game_date < 2000.3.18
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:HUN ?= this
				game_date >= 1990.3.25
				game_date < 2000.3.25
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:ROM ?= this
				game_date >= 1990.3.20
				game_date < 2000.3.20
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:CZH ?= this
				game_date >= 1990.6.8
				game_date < 2000.6.8
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:BUL ?= this
				game_date >= 1990.6.10
				game_date < 2000.6.10
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:MGL ?= this
				game_date >= 1990.6.22
				game_date < 2000.6.22
				has_global_variable = historical_railroading_active
			}
			AND = { 
				OR = { c:YUG ?= this c:SER ?= this }
				game_date >= 1990.12.9
				game_date < 2000.12.9
				has_global_variable = historical_railroading_active
			}
			AND = { 
				c:ALB ?= this
				game_date >= 1991.3.31
				game_date < 2001.3.31
				has_global_variable = historical_railroading_active
			}
			
			#Has a Democratic Revolution when economy is bad
			AND = {
				any_political_movement = {
					is_revolutionary = yes
					OR = {
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_HOS_communist_leader
								value < neutral
							}
						}
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_HOS_president
								value > neutral
							}
						}
					}
				}
				OR = {
					in_default = yes
					has_healthy_economy = no
				}
				has_technology_researched = tech_politics_5
			}
			
			#No longer a Subject & Cold War is over
			AND = { 
				is_subject = no
				AND = { 
					NOT = { cold_war_ongoing = yes }
					NOT = { has_global_variable = historical_railroading_active }
				}
			}
			
		}
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		# Event has not been fired before
		NOT = { has_variable = eastern_bloc_revolution_hgc }	# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = eastern_bloc_revolution_hgc				# Change variable ****
		
	}
    
    option = {
        name = historical_gov_changes.option.1					# Accept
        highlighted_option = yes
		
		#THIS becomes independent
		if = {
			limit = { is_subject = yes }
			make_independent = yes
		}
		
		#Enact new regime
		if = {
			limit = { OR = { c:YUG ?= this c:SER ?= this } }
			
			effect_starting_politics_presidential_republic = yes
			
			#Historical Ruler
			if = {
				limit = { 
					game_date >= 1985.1.1
					game_date < 2000.1.1
				}
				create_character = {
					first_name = "Slobodan_Milosevic_first_name"
					last_name = "Slobodan_Milosevic_last_name"
					ruler = yes ig_leader = yes historical = yes
					birth_date = 1941.8.20
					interest_group = ig_industrialists
					ideology = ideology_autocratic
					culture = cu:serb
					traits = {
						erudite
						charismatic
						expensive_tastes
					}
					on_created = { set_variable = Slobodan_Milosevic }
				}
			}
			
		}
		else = {
			soviet_SSR_dissolution_laws = yes
		}
		
		#Historical Rulers
		if = { 
			limit = { c:ROM ?= this }
			ruler = { kill_character = yes }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_gov_changes.option.2					# Reject
		default_option = yes
		
		#Major discontent
		add_radicals = {
			value = large_radicals
			strata = lower
		}
		add_radicals = {
			value = very_large_radicals
			strata = middle
		}
		add_modifier = { 
			name = stirrings_of_revolution
			months = 60 
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Sino-Soviet Split
eastern_europe_indy.5 = {
    type = country_event
	placement = scope:communist_china_scope
	
    title = sino_soviet_split.t 				# Title of the event; ADD LOCALISATION
    desc = sino_soviet_split.d 					# Description of the event; ADD LOCALISATION
    flavor = sino_soviet_split_ussr.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Event has not been fired before
		NOT = { has_variable = sino_soviet_split }				# CHANGE ****
		
		#Overlord conditions
		exists = c:SOV
		this = c:SOV											# Change TAG of the overlord ****
		game_date >= 1961.10.17									# START DATE: Date colony became self governing ****
		game_date < 1971.10.17									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		country_rank = rank_value:super_power
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Triggered by Khrushchev
		OR = {
			AND = { 
				exists = ruler
				ruler = { interest_group = { is_interest_group_type = ig_rural_folk } is_historical = yes }
			}
			NOT = { has_modifier = communist_ruling_party_ideology }
		}
		
		#Colony conditions
		OR = {
			AND = { 
				exists = c:PRC
				c:PRC ?= { 												# Change TAG of the colony ****
					is_direct_subject_of = ROOT
					is_a_communist_government = yes
					is_sufficiently_independent = yes
					is_at_war = no
					OR = { 
						#Triggered by Mao
						AND = { 
							exists = ruler
							ruler = { interest_group = { is_interest_group_type = ig_trade_unions } is_historical = yes }
						}
						has_modifier = communist_ruling_party_ideology
					}
				}
			}
			AND = { 
				exists = c:CHI
				c:CHI ?= { 												# Change TAG of the colony ****
					is_direct_subject_of = ROOT
					is_a_communist_government = yes
					is_sufficiently_independent = yes
					is_at_war = no
					OR = { 
						#Triggered by Mao
						AND = { 
							exists = ruler
							ruler = { interest_group = { is_interest_group_type = ig_trade_unions } is_historical = yes }
						}
						has_modifier = communist_ruling_party_ideology
					}
				}
			}
		}
		
    }
	
	immediate = { 
		
		# Fire only once
		set_variable = sino_soviet_split					# Change variable ****
		
		#Mark PRC
		random_country = {
			limit = {
				OR = { c:PRC ?= this c:CHI ?= this }
				is_direct_subject_of = ROOT
				is_a_communist_government = yes
				is_sufficiently_independent = yes
				is_at_war = no
			}
			save_scope_as = communist_china_scope
		}
		
	}
    
    option = {
        name = sino_soviet_split.option.1						# Grant them independence
        highlighted_option = yes
		
		# Colony becomes independent
		scope:communist_china_scope = { 						# Change TAG of the colony ****
			make_independent = yes
			set_relations = {
				country = ROOT
				value = -50
			}
			trigger_event = { id = eastern_europe_indy.6 }
		}
		
		#Albania goes to China
		random_country = {
			limit = {
				c:ALB ?= this
				is_direct_subject_of = ROOT
				is_a_communist_government = yes
				is_sufficiently_independent = yes
				is_at_war = no
				is_player = no
			}
			make_independent = yes
			set_relations = {
				country = scope:communist_china_scope
				value = 100
			}
			scope:communist_china_scope = {
				create_diplomatic_pact = {
					country = c:ALB
					type = satellite
				}
			}
		}
		
		#Mark as Sino-Soviet
		set_global_variable = sino_soviet_split_global_var
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = sino_soviet_split.option.2						# REFUSE
		default_option = yes
		
		#Fracture the Eastern Bloc
		every_country = {
			limit = { 
				NOT = { scope:communist_china_scope ?= this }
				is_direct_subject_of = ROOT
				is_a_communist_government = yes
				is_subject_type = subject_type_satellite
			}
			change_subject_type = subject_type_protectorate
			if = {
				limit = { NOT = { scope:communist_china_scope ?= this } }
				set_relations = {
					country = scope:communist_china_scope
					value = 50
				}
			}
			set_relations = {
				country = ROOT
				value = 50
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Sino-Soviet Split - Notify China
eastern_europe_indy.6 = {
    type = country_event
	placement = c:SOV
	
    title = sino_soviet_split_prc.t 			# Title of the event; ADD LOCALISATION
    desc = sino_soviet_split.d 					# Description of the event; ADD LOCALISATION
    flavor = sino_soviet_split.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = { 
		
		c:SOV = { save_scope_as = sino_soviet_split_ussr }
		
	}
    
    option = {
        name = sino_soviet_split.option.3						# Oh well...
		default_option = yes
		
		#Prestige from being independent of USSR
		add_modifier = { 
			name = national_pride_modifier 
			months = 60 
			is_decaying = yes 
		}
		
		#Create own bloc
		if = {
			limit = { is_in_power_bloc = no }
			create_power_bloc = {
				name = SINOSPHERE

				map_color = { 255 165 0 }

				identity = identity_ideological_union
				principle = principle_defensive_cooperation_3
				principle = principle_ideological_truth_3
				principle = principle_foreign_investment_3

				# subjects are automatically part of the bloc
			}
		}
		
    }

}

#Soviet Intervention in COUNTRY
eastern_europe_indy.7 = {
    type = country_event
	placement = scope:brezhnev_doctrine_target
	
    title = brezhnev_doctrine.t 						# Title of the event; ADD LOCALISATION
    desc = brezhnev_doctrine.d 							# Description of the event; ADD LOCALISATION
    flavor = brezhnev_doctrine.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/invention_icons/anarchy.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Is triggered by event
		
    }
	
	immediate = { 
		
		random_country = { 
			limit = { has_variable = brezhnev_doctrine_target }
			remove_variable = brezhnev_doctrine_target
			save_scope_as = brezhnev_doctrine_target
		}
		
	}
    
    option = {
        name = eastern_europe_indy.option.2						# NO
        highlighted_option = yes
		
		#Start war to restore order
		change_infamy = 25
		create_diplomatic_play = {
			name = soviet_war
			type = dp_make_dominion
			target_country = scope:brezhnev_doctrine_target
			
			#war = yes
			
			add_war_goal = {
				holder = ROOT
				type = regime_change
				target_country = scope:brezhnev_doctrine_target
			}
			add_war_goal = {
				holder = scope:brezhnev_doctrine_target
				type = independence
				target_country = ROOT
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = eastern_europe_indy.option.1						# YES
		default_option = yes
		
		#Subject goes free
		scope:brezhnev_doctrine_target = {
			make_independent = yes
		}
		
		add_modifier = {
			name = national_humiliation
			years = 5
		}
		
		#Domestic instablitity
		add_modifier = { 
			name = stirrings_of_revolution
			months = 60 
			is_decaying = yes 
		}
		
		#Major discontent in subjects
		every_country = {
			limit = { is_subject_of = ROOT }
			add_radicals = {
				value = very_large_radicals
			}
			add_modifier = { 
				name = stirrings_of_revolution
				months = 60 
				is_decaying = yes 
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Yugoslav-Soviet Split
eastern_europe_indy.8 = {
    type = country_event
	placement = scope:communist_yugoslavia_scope
	
    title = yugoslav_soviet_split.t 				# Title of the event; ADD LOCALISATION
    desc = yugoslav_soviet_split.d 					# Description of the event; ADD LOCALISATION
    flavor = yugoslav_soviet_split_ussr.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Event has not been fired before
		NOT = { has_variable = yugoslav_soviet_split }				# CHANGE ****
		
		#Overlord conditions
		exists = c:SOV
		this = c:SOV											# Change TAG of the overlord ****
		game_date >= 1948.6.28									# START DATE: Date colony became self governing ****
		game_date < 1958.6.28									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		country_rank = rank_value:super_power
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Triggered by Stalin
		exists = ruler
		ruler = { has_ideology = ideology:ideology_autocratic interest_group = { is_interest_group_type = ig_trade_unions } is_historical = yes }
		
		#Colony conditions
		OR = {
			AND = { 
				exists = c:SER
				c:SER ?= { 												# Change TAG of the colony ****
					is_direct_subject_of = ROOT
					is_a_communist_government = yes
					is_sufficiently_independent = yes
					is_at_war = no
					#Triggered by Tito
					exists = ruler
					ruler = { NOT = { has_ideology = ideology:ideology_autocratic } interest_group = { is_interest_group_type = ig_trade_unions } is_historical = yes }
				}
			}
			AND = { 
				exists = c:YUG
				c:YUG ?= { 												# Change TAG of the colony ****
					is_direct_subject_of = ROOT
					is_a_communist_government = yes
					is_sufficiently_independent = yes
					is_at_war = no
					#Triggered by Tito
					ruler ?= { has_variable = josip_broz_tito }
				}
			}
		}
		
    }
	
	immediate = { 
		
		# Fire only once
		set_variable = yugoslav_soviet_split					# Change variable ****
		
		#Mark SER
		random_country = {
			limit = {
				OR = { c:SER ?= this c:YUG ?= this }
				is_direct_subject_of = ROOT
				is_a_communist_government = yes
				is_sufficiently_independent = yes
				is_at_war = no
			}
			save_scope_as = communist_yugoslavia_scope
		}
		
	}
    
    option = {
        name = yugoslav_soviet_split.option.1						# Grant them independence
        highlighted_option = yes
		
		# Colony becomes independent
		scope:communist_yugoslavia_scope = { 						# Change TAG of the colony ****
			make_independent = yes
			set_relations = {
				country = ROOT
				value = -200
			}
			trigger_event = { id = eastern_europe_indy.9 }
		}
		
		#Mark as Yugoslav-Soviet
		set_global_variable = yugoslav_soviet_split_global_var
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = yugoslav_soviet_split.option.2						# REFUSE
		default_option = yes
		
		#Fracture the Eastern Bloc
		every_country = {
			limit = { 
				NOT = { scope:communist_yugoslavia_scope ?= this }
				country_is_in_europe = yes
				is_direct_subject_of = ROOT
				is_a_communist_government = yes
				is_subject_type = subject_type_satellite
			}
			change_subject_type = subject_type_protectorate
			if = {
				limit = { NOT = { scope:communist_yugoslavia_scope ?= this } }
				set_relations = {
					country = scope:communist_yugoslavia_scope
					value = 50
				}
			}
			set_relations = {
				country = ROOT
				value = 50
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Yugoslav-Soviet Split - Notify USSR
eastern_europe_indy.9 = {
    type = country_event
	placement = c:SOV
	
    title = yugoslav_soviet_split_prc.t 			# Title of the event; ADD LOCALISATION
    desc = yugoslav_soviet_split.d 					# Description of the event; ADD LOCALISATION
    flavor = yugoslav_soviet_split.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = { 
		
		c:SOV = { save_scope_as = yugoslav_soviet_split_ussr }
		
	}
    
    option = {
        name = yugoslav_soviet_split.option.3						# Oh well...
		default_option = yes
		
		#Prestige from being independent of USSR
		add_modifier = { 
			name = national_pride_modifier 
			months = 60 
			is_decaying = yes 
		}
		
		#Gain relations with democratic powers
		every_country = {
			limit = { 
				country_rank >= rank_value:great_power
				is_a_democracy = yes
				is_sufficiently_independent = yes
			}
			change_relations = { country = ROOT value = 100 }
		}
		
    }

}