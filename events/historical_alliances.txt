namespace = historical_alliances_system

# Southeast Asia Treaty Organisation (Uses a simple event because the org was historically impotent)
historical_alliances_system.1 = {
    type = country_event

    title = SEATO_form.t 							# Title of the event; ADD LOCALISATION
    desc = SEATO_form.d 							# Description of the event; ADD LOCALISATION
    flavor = SEATO_form.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1954.9.8									# START DATE: Date colony became self governing ****
		game_date < 1977.6.30									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		#is_at_war = no											# war = no
		
		OR = { 
			has_law_or_variant = law_type:law_regionalist_fp
			has_law_or_variant = law_type:law_globalist_fp
		}
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		any_country = { 
			OR = { 
				country_is_in_southeast_asia = yes
				country_is_in_east_asia = yes
				country_is_in_india = yes
			}
			is_a_communist_government = yes
			is_not_neutral = yes
		}
		
		#Available countries
		any_country = { 
			OR = { 
				country_is_in_southeast_asia = yes
				country_is_in_east_asia = yes
				country_is_in_india = yes
			}
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			right_wing_ruling_coalition = yes
			relations:ROOT >= relations_threshold:cordial
		}
		
		# Event has not been fired before
		NOT = { has_variable = SEATO_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		#No clash
		every_country = {
			remove_variable = SEATO_form_hae
		}
	
		# Fire only once
		set_variable = SEATO_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		every_country = { 
			limit = {
				OR = { 
					country_is_in_southeast_asia = yes
					country_is_in_east_asia = yes
					country_is_in_india = yes
					c:AST ?= this
					c:NZL ?= this
				}
				is_some_kind_of_democracy = yes
				is_sufficiently_independent = yes
				is_not_neutral = yes
				right_wing_ruling_coalition = yes
				relations:ROOT >= relations_threshold:cordial
			}
			trigger_event = { id = historical_alliances_system.2 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# Southeast Asia Treaty Organisation (Uses a simple event because the org was historically impotent)
historical_alliances_system.2 = {
    type = country_event

    title = SEATO_form.t 							# Title of the event; ADD LOCALISATION
    desc = SEATO_form.d 							# Description of the event; ADD LOCALISATION
    flavor = SEATO_form.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = SEATO_form_hae }
			save_scope_as = SEATO_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#USA will protect this country through a defensive pact
		hidden_effect = {
			set_relations = {
				country = scope:SEATO_leader
				value = 100
			}
		}
		scope:SEATO_leader = {
			create_treaty = {
				name = treaty_name_NATO_alliance
				first_country = scope:SEATO_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:SEATO_leader
						target_country = ROOT
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					NOR = {
						c:HND ?= this 
						c:AST ?= this
						c:NZL ?= this
						c:PAK ?= this
						c:PHI ?= this
						c:THI ?= this
					}
				} 
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:SEATO_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					OR = {
						c:HND ?= this 
						c:AST ?= this
						c:NZL ?= this
						c:PAK ?= this
						c:PHI ?= this
						c:THI ?= this
					}
				} 
				add = -100 
			}
		}
		
    }

}

# Central Treaty Organisation (Uses a simple event because the org was historically impotent)
historical_alliances_system.3 = {
    type = country_event

    title = CENTO_form.t 							# Title of the event; ADD LOCALISATION
    desc = CENTO_form.d 							# Description of the event; ADD LOCALISATION
    flavor = CENTO_form.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:GBR ?= this											# Change TAG of the overlord ****
		game_date >= 1955.2.24									# START DATE: Date colony became self governing ****
		game_date < 1979.3.16									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		#is_at_war = no											# war = no
		
		OR = { 
			has_law_or_variant = law_type:law_regionalist_fp
			has_law_or_variant = law_type:law_globalist_fp
		}
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank >= rank_value:great_power
		any_country = { 
			OR = { 
				country_is_in_middle_east = yes
				country_is_in_india = yes
			}
			is_a_communist_government = yes
			is_not_neutral = yes
		}
		
		#Available countries
		any_country = { 
			OR = { 
				country_is_in_middle_east = yes
				country_is_in_india = yes
			}
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			right_wing_ruling_coalition = yes
			relations:ROOT >= relations_threshold:cordial
		}
		
		# Event has not been fired before
		NOT = { has_variable = CENTO_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		#No clash
		every_country = {
			remove_variable = CENTO_form_hae
		}
	
		# Fire only once
		set_variable = CENTO_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		every_country = { 
			limit = {
				OR = { 
					country_is_in_middle_east = yes
					country_is_in_india = yes
				}
				is_some_kind_of_democracy = yes
				is_sufficiently_independent = yes
				is_not_neutral = yes
				right_wing_ruling_coalition = yes
				relations:ROOT >= relations_threshold:cordial
			}
			trigger_event = { id = historical_alliances_system.2 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# Central Treaty Organisation (Uses a simple event because the org was historically impotent)
historical_alliances_system.4 = {
    type = country_event

    title = CENTO_form.t 							# Title of the event; ADD LOCALISATION
    desc = CENTO_form.d 							# Description of the event; ADD LOCALISATION
    flavor = CENTO_form.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = CENTO_form_hae }
			save_scope_as = CENTO_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#GBR will protect this country through a defensive pact
		hidden_effect = {
			set_relations = {
				country = scope:CENTO_leader
				value = 100
			}
		}
		scope:CENTO_leader = {
			create_treaty = {
				name = treaty_name_CENTO_alliance
				first_country = scope:CENTO_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:SEATO_leader
						target_country = ROOT
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90 
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					NOR = {
						c:PER ?= this 
						c:IRQ ?= this
						c:PAK ?= this
						c:TUR ?= this
					}
				} 
				add = -100 
			}
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:CENTO_leader
			value = -25
		}
		
		ai_chance = {
			base = 10
			modifier = { 
				trigger = { 
					has_global_variable = historical_railroading_active
					OR = {
						c:PER ?= this 
						c:IRQ ?= this
						c:PAK ?= this
						c:TUR ?= this
					}
				} 
				add = -100 
			}
		}
		
    }

}

# Indo-Soviet Treaty of Friendship
historical_alliances_system.5 = {
    type = country_event

    title = indo_soviet_form.t 							# Title of the event; ADD LOCALISATION
    desc = indo_soviet_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = indo_soviet_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SOV ?= this											# Change TAG of the overlord ****
		game_date >= 1971.8.1									# START DATE: Date colony became self governing ****
		game_date < 1981.8.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		
		#Indian conditions
		exists = c:HND
		c:HND = {
			is_some_kind_of_democracy = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			
			OR = { 
				left_wing_ruling_coalition = yes
				AND = {
					exists = c:PAK
					c:PAK = { 
						is_subject_of = c:USA
					}
					exists = c:USA
					c:USA = { 
						is_a_democracy = yes
						is_sufficiently_independent = yes
						country_rank = rank_value:super_power
					}
				}
				AND = {
					exists = c:PRC
					c:PRC = { 
						OR = { 
							is_a_communist_government = yes
							relations:ROOT < relations_threshold:neutral
						}
						is_country_type = recognized
					}
				}
			}
			
			relations:ROOT >= relations_threshold:cordial
		}
		
		# Event has not been fired before
		NOT = { has_variable = indo_soviet_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = indo_soviet_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:HND = {
			trigger_event = { id = historical_alliances_system.6 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# Indo-Soviet Treaty of Friendship
historical_alliances_system.6 = {
    type = country_event

    title = indo_soviet_form.t 							# Title of the event; ADD LOCALISATION
    desc = indo_soviet_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = indo_soviet_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = indo_soviet_form_hae }
			save_scope_as = indo_soviet_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#SOV will protect this country through a defensive pact
		set_relations = {
			country = scope:indo_soviet_leader
			value = 80
		}
		scope:indo_soviet_leader = {
			create_treaty = {
				name = treaty_name_HND_SOV_alliance
				first_country = scope:indo_soviet_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:indo_soviet_leader
						target_country = ROOT
					}
					{
						article = foreign_investment_rights
						source_country = ROOT
						target_country = scope:indo_soviet_leader
					}
					{
						article = trade_privilege
						source_country = ROOT
						target_country = scope:indo_soviet_leader
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:indo_soviet_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# Cuban Missile Crisis - Prelude
historical_alliances_system.7 = {
    type = country_event
	placement = c:CUB

    title = cuban_soviet_form.t 						# Title of the event; ADD LOCALISATION
    desc = cuban_soviet_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = cuban_soviet_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		# Event has not been fired before
		NOT = { has_variable = cuban_soviet_form_hae }			# CHANGE ****
		
		#Overlord conditions
		c:SOV ?= this											# Change TAG of the overlord ****
		game_date >= 1962.9.8									# START DATE: Date colony became self governing ****
		game_date < 1972.9.8									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Khrushchev
		OR = { 
			has_global_variable = historical_railroading_active
			ruler ?= { 
				interest_group = { is_interest_group_type = ig_rural_folk } 
				is_historical = yes 
			}
		}
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		has_modifier = nuclear_capability
		
		exists = c:USA
		c:USA = {
			is_a_democracy = yes
			is_sufficiently_independent = yes						# is_vassal = no
			country_rank = rank_value:super_power
			is_not_neutral = yes
			
			has_modifier = nuclear_capability
		}
		
		
		#Cuban conditions
		exists = c:CUB
		c:CUB = {
			is_a_communist_government = yes							# Correct gov types
			is_sufficiently_independent = yes						# is_vassal = no		
			is_at_war = no
			
			is_not_neutral = yes
			
			NOT = { has_modifier = nuclear_capability }
		}
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = cuban_soviet_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:CUB = {
			trigger_event = { id = historical_alliances_system.8 }
		}
		
		#USA will be angry
		if = {
			limit = { exists = c:USA }
			set_relations = {
				country = c:USA
				value = -100
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# Cuban Missile Crisis - Prelude
historical_alliances_system.8 = {
    type = country_event

    title = cuban_soviet_form.t 						# Title of the event; ADD LOCALISATION
    desc = cuban_soviet_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = cuban_soviet_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = cuban_soviet_form_hae }
			save_scope_as = cuban_soviet_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#SOV will protect this country through a satellite & station nuclear weapons pact
		set_relations = {
			country = scope:cuban_soviet_leader
			value = 80
		}
		scope:cuban_soviet_leader = {
			create_treaty = {
				name = treaty_name_CUB_SOV_alliance
				first_country = scope:cuban_soviet_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:cuban_soviet_leader
						target_country = ROOT
					}
					{
						article = foreign_investment_rights
						source_country = ROOT
						target_country = scope:cuban_soviet_leader
					}
					{
						article = trade_privilege
						source_country = ROOT
						target_country = scope:cuban_soviet_leader
					}
				}
			}
			create_diplomatic_pact = {
				country = ROOT
				type = station_nuclear_weapons
			}
			create_diplomatic_pact = {
				country = ROOT
				type = military_cooperation_agreement
			}
		}
		
		#USA will be angry
		if = {
			limit = { exists = c:USA }
			set_relations = {
				country = c:USA
				value = -100
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:cuban_soviet_leader
			value = -25
		}
		
		#USA will be happy
		if = {
			limit = { exists = c:USA }
			change_relations = {
				country = c:USA
				value = 25
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { OR = { has_global_variable = historical_railroading_active c:SOV = { is_player = yes } } } add = -100 }
		}
		
    }

}

# The Pact of Madrid
historical_alliances_system.9 = {
    type = country_event

    title = USA_SPA_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_SPA_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_SPA_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1953.9.23									# START DATE: Date colony became self governing ****
		game_date < 1963.9.23									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		
		#Spanish conditions
		exists = c:SPA
		c:SPA = {
			is_a_nationalist_government = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			relations:ROOT >= relations_threshold:cordial
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = USA_SPA_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = USA_SPA_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:SPA = {
			trigger_event = { id = historical_alliances_system.10 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The Pact of Madrid
historical_alliances_system.10 = {
    type = country_event

    title = USA_SPA_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_SPA_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_SPA_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = USA_SPA_form_hae }
			save_scope_as = USA_SPA_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#End isolationism
		if = {
			limit = { has_law_or_variant = law_type:law_isolationism }
			activate_law = law_type:law_protectionism
		}
		
		#USA will protect this country through a defensive pact
		set_relations = {
			country = scope:USA_SPA_leader
			value = 80
		}
		scope:USA_SPA_leader = {
			create_treaty = {
				name = treaty_name_SPA_USA_alliance
				first_country = scope:USA_SPA_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:USA_SPA_leader
						target_country = ROOT
					}
					{
						article = foreign_investment_rights
						source_country = ROOT
						target_country = scope:USA_SPA_leader
					}
				}
			}
			hidden_effect = {
				create_diplomatic_pact = {
					country = ROOT
					type = military_cooperation_agreement
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:USA_SPA_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# The Sino-American Mutual Defense Treaty
historical_alliances_system.11 = {
    type = country_event

    title = USA_ROC_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_ROC_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_ROC_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1954.12.2									# START DATE: Date colony became self governing ****
		game_date < 1964.12.2									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		
		#Spanish conditions
		exists = c:ROC
		c:ROC = {
			OR = { 
				is_a_nationalist_government = yes
				is_a_republican_regime = yes
			}
			is_sufficiently_independent = yes
			is_not_neutral = yes
			relations:ROOT >= relations_threshold:cordial
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = USA_ROC_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = USA_ROC_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:ROC = {
			trigger_event = { id = historical_alliances_system.12 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The Sino-American Mutual Defense Treaty
historical_alliances_system.12 = {
    type = country_event

    title = USA_ROC_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_ROC_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_ROC_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = USA_ROC_form_hae }
			save_scope_as = USA_ROC_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#End isolationism
		if = {
			limit = { has_law_or_variant = law_type:law_isolationism }
			activate_law = law_type:law_protectionism
		}
		
		#USA will protect this country through a defensive pact
		set_relations = {
			country = scope:USA_ROC_leader
			value = 80
		}
		scope:USA_ROC_leader = {
			create_treaty = {
				name = treaty_name_ROC_USA_alliance
				first_country = scope:USA_ROC_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:USA_ROC_leader
						target_country = ROOT
					}
					{
						article = foreign_investment_rights
						source_country = ROOT
						target_country = scope:USA_ROC_leader
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:USA_ROC_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# The Soviet-Chinese Treaty of Friendship
historical_alliances_system.13 = {
    type = country_event

    title = SOV_PRC_form.t 							# Title of the event; ADD LOCALISATION
    desc = SOV_PRC_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = SOV_PRC_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:SOV ?= this											# Change TAG of the overlord ****
		game_date >= 1946.1.1									# START DATE: Date colony became self governing ****
		game_date < 1956.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		
		#Chinese conditions
		exists = c:PRC
		c:PRC = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = SOV_PRC_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = SOV_PRC_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:PRC = {
			trigger_event = { id = historical_alliances_system.14 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The Soviet-Chinese Treaty of Friendship
historical_alliances_system.14 = {
    type = country_event

    title = SOV_PRC_form.t 							# Title of the event; ADD LOCALISATION
    desc = SOV_PRC_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = SOV_PRC_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = SOV_PRC_form_hae }
			save_scope_as = SOV_PRC_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#SOV will protect this country through a defensive pact
		set_relations = {
			country = scope:SOV_PRC_leader
			value = 80
		}
		scope:SOV_PRC_leader = {
			create_treaty = {
				name = treaty_name_PRC_SOV_alliance
				first_country = scope:SOV_PRC_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:SOV_PRC_leader
						target_country = ROOT
					}
					{
						article = foreign_investment_rights
						source_country = ROOT
						target_country = scope:SOV_PRC_leader
					}
					{
						article = trade_privilege
						source_country = ROOT
						target_country = scope:SOV_PRC_leader
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:SOV_PRC_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# The Soviet-Vietnamese Treaty of Friendship
historical_alliances_system.15 = {
    type = country_event

    title = SOV_NVM_form.t 							# Title of the event; ADD LOCALISATION
    desc = SOV_NVM_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = SOV_NVM_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		has_global_variable = 1946_start_date
		
		#Overlord conditions
		c:SOV ?= this											# Change TAG of the overlord ****
		game_date >= 1946.1.1									# START DATE: Date colony became self governing ****
		game_date < 1956.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		
		#Vietnamese conditions
		exists = c:NVM
		c:NVM = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = SOV_NVM_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = SOV_NVM_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:NVM = {
			trigger_event = { id = historical_alliances_system.16 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The Soviet-Vietnamese Treaty of Friendship
historical_alliances_system.16 = {
    type = country_event

    title = SOV_NVM_form.t 							# Title of the event; ADD LOCALISATION
    desc = SOV_NVM_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = SOV_NVM_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = SOV_NVM_form_hae }
			save_scope_as = SOV_NVM_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#SOV will protect this country through a defensive pact
		set_relations = {
			country = scope:SOV_NVM_leader
			value = 80
		}
		scope:SOV_NVM_leader = {
			create_treaty = {
				name = treaty_name_NVM_SOV_alliance
				first_country = scope:SOV_NVM_leader
				second_country = ROOT

				is_draft = no
				binding_period = { years = 10 }

				articles_to_create = {
					{
						article = defensive_pact
					}
					{
						article = military_assistance
						source_country = scope:SOV_NVM_leader
						target_country = ROOT
					}
					{
						article = foreign_investment_rights
						source_country = ROOT
						target_country = scope:SOV_NVM_leader
					}
					{
						article = trade_privilege
						source_country = ROOT
						target_country = scope:SOV_NVM_leader
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:SOV_NVM_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# The American-Yugoslavian Treaty of Friendship
historical_alliances_system.17 = {
    type = country_event

    title = USA_YUG_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_YUG_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_YUG_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Tito-Stalin Split
		has_global_variable = yugoslav_soviet_split_global_var
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1946.1.1									# START DATE: Date colony became self governing ****
		game_date < 1956.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#THIS is a super power
		country_rank = rank_value:super_power
		
		#Soviet conditions
		exists = c:SOV
		c:SOV = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			country_rank = rank_value:super_power
		}
		
		#Yugoslavian conditions
		exists = c:YUG
		c:YUG = {
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			is_not_neutral = yes
			is_at_war = no
		}
		
		# Event has not been fired before
		NOT = { has_variable = USA_YUG_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = USA_YUG_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:YUG = {
			trigger_event = { id = historical_alliances_system.18 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The American-Yugoslavian Treaty of Friendship
historical_alliances_system.18 = {
    type = country_event

    title = USA_YUG_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_YUG_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_YUG_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = USA_YUG_form_hae }
			save_scope_as = USA_YUG_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#USA will protect this country through a defensive pact
		set_relations = {
			country = scope:USA_YUG_leader
			value = 80
		}
		scope:USA_YUG_leader = {
			create_diplomatic_pact = {
				country = ROOT
				type = foreign_investment_agreement
			}
			create_diplomatic_pact = {
				country = ROOT
				type = fund_lobbies
			}
			create_treaty = {
				name = treaty_name_YUG_USA_alliance
				first_country = scope:USA_YUG_leader
				second_country = ROOT

				is_draft = no
				#binding_period = { years = 10 }

				articles_to_create = {
					{
						article = trade_privilege
						source_country = c:YUG
						target_country = c:USA
					}
					{
						article = military_assistance
						source_country = c:USA
						target_country = c:YUG
					}
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:USA_YUG_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# Form Communist China Bloc
historical_alliances_system.19 = {
    type = country_event

    title = PRC_PB_form.t 							# Title of the event; ADD LOCALISATION
    desc = PRC_PB_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = PRC_PB_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		OR = { 
			c:CHI ?= this 
			c:PRC ?= this 
			c:ROC ?= this 
		}
		has_global_variable = sino_soviet_split_global_var
		
		is_in_power_bloc = no
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#THIS is a super power
		country_rank >= rank_value:unrecognized_major_power
		
		# Event has not been fired before
		NOT = { has_variable = PRC_PB_form_hae }				# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = PRC_PB_form_hae							# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1				# Accept
        highlighted_option = yes
		
		#Create own bloc
		if = {
			limit = { is_in_power_bloc = no }
			create_power_bloc = {
				name = SINOSPHERE

				map_color = { 255 165 0 }

				identity = identity_ideological_union

				# subjects are automatically part of the bloc
			}
			power_bloc ?= { 
				if = {
					limit = { NOT = { has_principle = principle:principle_defensive_cooperation_3 } }
					add_principle = principle_defensive_cooperation_3
				}
				if = {
					limit = { NOT = { has_principle = principle:principle_ideological_truth_3 } }
					add_principle = principle_ideological_truth_3
				}
				if = {
					limit = { NOT = { has_principle = principle:principle_foreign_investment_3 } }
					add_principle = principle_foreign_investment_3
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		#Gain relations with fellow communist GP
		random_country = {
			limit = { 
				NOT = { THIS = ROOT }
				country_rank >= rank_value:great_power
				is_a_communist_government = yes
				is_sufficiently_independent = yes
			}
			change_relations = {
				country = ROOT
				value = 50
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# Form Non-Aligned Movement Bloc
historical_alliances_system.20 = {
    type = country_event

    title = NAM_PB_form.t 							# Title of the event; ADD LOCALISATION
    desc = NAM_PB_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = NAM_PB_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Not already formed
		NOT = { has_global_variable = NAM_PB_global_var }
		
		#Overlord conditions
		country_rank >= rank_value:great_power
		is_in_power_bloc = no
		NOR = {
			country_is_in_north_america = yes
			country_is_in_europe = yes
		}
		
		OR = { 
			is_a_democracy = yes
			is_some_kind_of_democracy = yes
		}
		is_sufficiently_independent = yes						# is_vassal = no	
		is_subject = no
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		# Event has not been fired before
		NOT = { has_variable = NAM_PB_form_hae }				# CHANGE ****
		
    }

	immediate = {
	
		# Fire only once
		set_variable = NAM_PB_form_hae							# Change variable ****
		
		# Fire only once
		set_global_variable = NAM_PB_global_var
		
	}
    
    option = {
        name = historical_alliances_system.option.1				# Accept
        highlighted_option = yes
		
		#Antagonise other power blocs
		every_country = {
			limit = { 
				is_power_bloc_leader = yes
			}
			change_relations = {
				country = ROOT
				value = -50
			}
		}
		
		#Create own bloc
		if = {
			limit = { is_in_power_bloc = no }
			create_power_bloc = {
				name = NON_ALIGNED_MOVEMENT

				map_color = { 150 77 240 }

				identity = identity_ideological_union

				# subjects are automatically part of the bloc
			}
			power_bloc ?= { 
				if = {
					limit = { NOT = { has_principle = principle:principle_ideological_truth_1 } }
					add_principle = principle_ideological_truth_1
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# The INF Treaty - USA
historical_alliances_system.21 = {
    type = country_event
	placement = c:SOV

    title = USA_SOV_INF.t 							# Title of the event; ADD LOCALISATION
    desc = USA_SOV_INF.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_SOV_INF.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1987.12.8									# START DATE: Date colony became self governing ****
		game_date < 1997.12.8									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#THIS is a super power
		country_rank = rank_value:super_power
		
		#Has nuclear weapons
		has_modifier = nuclear_capability
		
		#Soviet conditions
		exists = c:SOV
		c:SOV = {
			
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			country_rank = rank_value:super_power
			
			#Has nuclear weapons
			has_modifier = nuclear_capability
			
			ruler ?= { character_is_democratic = yes }
			
		}
		
		# Event has not been fired before
		NOT = { has_variable = USA_SOV_INF_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = USA_SOV_INF_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:SOV = {
			trigger_event = { id = historical_alliances_system.22 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_infamy = 5
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The INF Treaty - SOV
historical_alliances_system.22 = {
    type = country_event
	placement = c:USA

    title = USA_SOV_INF.t 							# Title of the event; ADD LOCALISATION
    desc = USA_SOV_INF.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_SOV_INF.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#USA will protect this country through a defensive pact
		if = { 
			limit = { 
				NOT = { 
					has_diplomatic_pact = {
						who = c:USA
						type = nuclear_de_escalation_treaty
					}
				}
			}
			create_diplomatic_pact = {
				country = c:USA
				type = nuclear_de_escalation_treaty
			}
		}
		change_relations = {
			country = c:USA
			value = 25
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = c:USA
			value = -25
		}
		
		change_infamy = 5
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# The START Treaty - USA
historical_alliances_system.23 = {
    type = country_event
	placement = c:SOV

    title = USA_SOV_START.t 						# Title of the event; ADD LOCALISATION
    desc = USA_SOV_START.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_SOV_START.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1991.7.31									# START DATE: Date colony became self governing ****
		game_date < 2001.7.31									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#THIS is a super power
		country_rank = rank_value:super_power
		
		#Has nuclear weapons
		has_modifier = nuclear_capability
		
		#Soviet conditions
		exists = c:SOV
		c:SOV = {
			
			is_a_communist_government = yes
			is_sufficiently_independent = yes
			country_rank = rank_value:super_power
			
			#Has nuclear weapons
			has_modifier = nuclear_capability
			
			ruler ?= { character_is_democratic = yes }
			
		}
		
		# Event has not been fired before
		NOT = { has_variable = USA_SOV_START_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = USA_SOV_START_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		c:SOV = {
			trigger_event = { id = historical_alliances_system.24 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_infamy = 5
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The START Treaty - SOV
historical_alliances_system.24 = {
    type = country_event
	placement = c:USA

    title = USA_SOV_START.t 							# Title of the event; ADD LOCALISATION
    desc = USA_SOV_START.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_SOV_START.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#USA will protect this country through a defensive pact
		if = { 
			limit = { 
				NOT = { 
					has_diplomatic_pact = {
						who = c:USA
						type = nuclear_de_escalation_treaty
					}
				}
			}
			create_diplomatic_pact = {
				country = c:USA
				type = nuclear_de_escalation_treaty
			}
		}
		if = { 
			limit = { 
				NOT = { 
					has_diplomatic_pact = {
						who = c:USA
						type = non_aggression_pact
					}
				}
			}
			create_diplomatic_pact = {
				country = c:USA
				type = non_aggression_pact
			}
		}
		change_relations = {
			country = c:USA
			value = 25
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = c:USA
			value = -25
		}
		
		change_infamy = 5
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

# UN Intervention in the Congo Crisis
historical_alliances_system.25 = {
    type = country_event

    title = USA_CNG_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_CNG_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_CNG_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:USA ?= this											# Change TAG of the overlord ****
		game_date >= 1960.7.14									# START DATE: Date colony became self governing ****
		game_date < 1970.7.14									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		is_not_neutral = yes
		
		#Cold War conditions
		cold_war_ongoing = yes
		country_rank = rank_value:super_power
		
		#Congolese conditions
		exists = c:CNG
		exists = c:KAT
		c:CNG ?= {
			is_a_democracy = yes
			is_sufficiently_independent = yes
			has_war_with = c:KAT
		}
		
		# Event has not been fired before
		NOT = { has_variable = USA_CNG_form_hae }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = USA_CNG_form_hae								# Change variable ****
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#UN intervention in separatist wars
		c:CNG = {
			change_relations = {
				country = ROOT
				value = 50
			}
			trigger_event = { id = historical_alliances_system.26 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

# The UN Intervention in the Congo Crisis - CNG
historical_alliances_system.26 = {
    type = country_event

    title = USA_CNG_form.t 							# Title of the event; ADD LOCALISATION
    desc = USA_CNG_form.d 							# Description of the event; ADD LOCALISATION
    #flavor = USA_CNG_form.f 						# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_military_parade.bk2" }

    icon = "gfx/interface/icons/event_icons/bicorne_hat.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Triggered by event
		
    }
	
	immediate = {
		
		random_country = {
			limit = { has_variable = USA_CNG_form_hae }
			save_scope_as = USA_CNG_leader
		}
		
	}
    
    option = {
        name = historical_alliances_system.option.1					# Accept
        highlighted_option = yes
		
		#UN intervention in separatist wars
		scope:USA_CNG_leader ?= {
			change_relations = {
				country = ROOT
				value = 50
			}
			every_diplomatic_play = {
				limit = {
					is_war = yes
					initiator_is = c:CNG
					OR = {
						target_is = c:KAT
						target_is = c:SKA
						target_is = c:FCG
					}
				}
				add_initiator_backers = { 
					scope:USA_CNG_leader 
				}
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
	option = {
        name = historical_alliances_system.option.2					# Reject
		default_option = yes
		
		change_relations = {
			country = scope:USA_CNG_leader
			value = -25
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}