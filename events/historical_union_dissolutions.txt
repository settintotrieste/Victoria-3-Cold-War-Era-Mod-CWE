namespace = historical_union_dissolution

#Malaysia
historical_union_dissolution.1 = {
    type = country_event

    title = malaysia_singapore.t 				# Title of the event; ADD LOCALISATION
    desc = malaysia_singapore.d 				# Description of the event; ADD LOCALISATION
    #flavor = malaysia_singapore.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:MSY
		this = c:MSY											# Change TAG of the overlord ****
		game_date >= 1965.8.9									# START DATE: Date colony became self governing ****
		game_date < 1975.8.9									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_some_kind_of_democracy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Member state conditions
		exists = c:SGP
		c:SGP = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_subject_type = subject_type_special_administrative_region
		}
		
		# Event has not been fired before
		NOT = { has_variable = malaysia_singapore_hud }			# CHANGE ****
		
    }
	
	immediate = {
		
		# Fire only once
		set_variable = malaysia_singapore_hud					# Change variable ****
		
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		#Subject becomes independent
		c:SGP = { 												# Change TAG of the colony ****
			make_independent = yes
			effect_starting_politics_parliamentary_republic = yes
		}
		
		#British protection continues over expelled state
		if = {
			limit = {
				exists = c:GBR
				c:MSY = { 
					OR = { 
						is_direct_subject_of = c:GBR 
						has_diplomatic_pact = { who = c:GBR type = protectorate is_initiator = no }
					} 
				}
			}
			make_independent = yes
			c:GBR = {
				create_diplomatic_pact = {
					country = c:SGP
					type = protectorate
				}
				create_diplomatic_pact = {
					country = c:SGP
					type = legal_union
				}
				create_diplomatic_pact = {
					country = c:SGP
					type = currency_union
				}
				hidden_effect = {
					set_secret_goal = {
						country = c:SGP
						secret_goal = protect
					}
				}
			}
		}
		
		#Simulate continued cross border economic activity
		c:MSY = {
			create_treaty = {
				name = treaty_name_historical_investment_treaties
				first_country = c:MSY
				second_country = c:SGP

				is_draft = no
				binding_period = { years = 50 }

				articles_to_create = {
					{
						article = foreign_investment_rights
						source_country = c:MSY
						target_country = c:SGP
					}
					{
						article = foreign_investment_rights
						source_country = c:SGP
						target_country = c:MSY
					}
					{
						article = trade_privilege
						source_country = c:MSY
						target_country = c:SGP
					}
					{
						article = trade_privilege
						source_country = c:SGP
						target_country = c:MSY
					}
				}
			}
		}
		
		# Fire only once
		set_variable = malaysia_singapore_hud					# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		every_scope_state = {
			add_radicals_in_state = {
				culture = cu:malay
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		c:SGP = {
			every_scope_state = {
				add_radicals_in_state = {
					culture = cu:malay
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
		}
		
		# Fire only once
		set_variable = malaysia_singapore_hud					# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Rhodesia & Nyasaland
historical_union_dissolution.2 = {
    type = country_event

    title = CAF_rhodesia.t 					# Title of the event; ADD LOCALISATION
    desc = CAF_rhodesia.d 					# Description of the event; ADD LOCALISATION
    #flavor = CAF_rhodesia.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1963.12.31									# START DATE: Date colony became self governing ****
		game_date < 1973.12.31									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Member state conditions
		exists = c:CAF
		c:CAF = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_not_sufficiently_independent = yes
		}
		
		# Event has not been fired before
		NOT = { has_variable = CAF_rhodesia_hud }			# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH THIS SECTION
		c:CAF = {
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:zambian }		# Change homeland identity to match colony to be released ****
					#is_incorporated = no							# State is a colony
					#contains_capital_of = c:ZAM					# State is the capital of colony ****
				}
				save_scope_as = colonial_state_1
			}
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:malawian }	# Change homeland identity to match colony to be released ****
					#is_incorporated = no							# State is a colony
					#contains_capital_of = c:MLW					# State is the capital of colony ****
				}
				save_scope_as = colonial_state_2
			}
		}
		
	}
    
    option = {
        name = historical_union_dissolution.option.1		# Accept secesssion
        highlighted_option = yes
		
		
		#Subject becomes independent
		c:CAF = { 											# Change TAG of the colony ****
			make_independent = yes
			
			change_tag = RHO
		}
		
		c:RHO = {
			#Release Zambia
			create_country = {
				tag = ZAM										# Change TAG of country being released ****
				origin = ROOT									# TAG where the created country takes tech from
				state = scope:colonial_state_1
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# CREATE leader for colony ****
					create_character = {
						first_name = "guy_incognito_first_name"		# CHANGE
						last_name = "guy_incognito_last_name"		# CHANGE
						ruler = yes
						#birth_date = 1910.1.1						# CHANGE
						interest_group = ig_rural_folk				# CHANGE
						ideology = ideology_democratic				# CHANGE
						traits = {
							charismatic								# CHANGE
							persistent								# CHANGE
							meticulous								# CHANGE
						}
					}
				
					# Set diplomatic recognition
					set_country_type = unrecognized
				}
			}
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:zambian }		# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:ZAM								# Change TAG to colony ****
			}
			
			#Release Malawi
			create_country = {
				tag = MLW										# Change TAG of country being released ****
				origin = ROOT									# TAG where the created country takes tech from
				state = scope:colonial_state_2
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# CREATE leader for colony ****
					create_character = {
						first_name = "guy_incognito_first_name"		# CHANGE
						last_name = "guy_incognito_last_name"		# CHANGE
						ruler = yes
						#birth_date = 1910.1.1						# CHANGE
						interest_group = ig_rural_folk				# CHANGE
						ideology = ideology_democratic				# CHANGE
						traits = {
							charismatic								# CHANGE
							persistent								# CHANGE
							meticulous								# CHANGE
						}
					}
				
					# Set diplomatic recognition
					set_country_type = unrecognized
				}
			}
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:malawian }		# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:MLW									# Change TAG to colony ****
			}
		}
		
		#Rhodesia becomes a dominion
		create_diplomatic_pact = {
			country = c:RHO
			type = dominion
		}
		
		#Zambia & Malawi are given self-government
		create_diplomatic_pact = {
			country = c:ZAM
			type = semi_autonomous_colony
		}
		create_diplomatic_pact = {
			country = c:MLW
			type = semi_autonomous_colony
		}
		
		# Fire only once
		set_variable = CAF_rhodesia_hud						# Change variable ****
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2		# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		c:CAF = {
			every_scope_state = {
				add_radicals_in_state = {
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
		}
		
		# Fire only once
		set_variable = CAF_rhodesia_hud						# Change variable ****
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#United Arab Republic
historical_union_dissolution.3 = {
    type = country_event

    title = uar_syria.t 				# Title of the event; ADD LOCALISATION
    desc = uar_syria.d 					# Description of the event; ADD LOCALISATION
    #flavor = uar_syria.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:UAR
		this = c:UAR											# Change TAG of the overlord ****
		game_date >= 1961.9.28									# START DATE: Date colony became self governing ****
		game_date < 1971.9.28									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_nationalist_government = yes						# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:SYR										# Change TAG of the colony ****
		}
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:syrian }			# Change homeland identity to match colony to be released ****
		}
		
		# Event has not been fired before
		NOT = { has_variable = uar_syria_hud }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		every_scope_state = {
			limit = {
				state_region = { is_homeland = cu:syrian }		# Change homeland identity to match colony to be released ****
				#contains_capital_of = c:SYR					# State is the capital of colony ****
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = uar_syria_hud							# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		#Subject becomes independent
		create_country = {
			tag = SYR										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				set_variable = UAR_formed_before
				
				# SET laws for colony ****
				effect_starting_politics_semi_presidential_republic = yes
				effect_starting_politics_democratic = yes
				
				# Set diplomatic recognition
				set_country_type = unrecognized
				
				#Nazim al-Qudsi
				create_character = {
					first_name = "Nazim_al-Qudsi_first_name"
					last_name = "Nazim_al-Qudsi_last_name"
					ruler = yes ig_leader = yes historical = yes
					birth_date = 1906.2.14
					interest_group = ig_rural_folk
					ideology = ideology_power_hungry
					traits = {
						tactful
						ambitious
						erudite
					}
				}
				
			}
		}
		if = {
			limit = { exists = c:SYR }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:syrian }	# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:SYR								# Change TAG to colony ****
			}
		}
		
		#Dissolve confederation with Yemen
		every_country = {
			limit = {
				OR = {
					c:NYE ?= this 
					c:YEM ?= this 
				}
				is_subject_of = ROOT
				is_subject_type = subject_type_confederal_state
			}
			make_independent = yes
		}
		
		#Return to being Egypt
		change_tag = EGY
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:syrian
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:syrian } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#West Indies Federation
historical_union_dissolution.4 = {
    type = country_event

    title = west_indies_dissolution.t 				# Title of the event; ADD LOCALISATION
    desc = west_indies_dissolution.d 				# Description of the event; ADD LOCALISATION
    #flavor = west_indies_dissolution.f 			# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:GBR
		this = c:GBR											# Change TAG of the overlord ****
		game_date >= 1962.5.31									# START DATE: Date colony became self governing ****
		game_date < 1972.5.31									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_a_democratic_monarchy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Member state conditions
		exists = c:WIF
		c:WIF = { 												# Change TAG of the transferee ****
			is_direct_subject_of = ROOT
			is_not_sufficiently_independent = yes
		}
		
		# Event has not been fired before
		NOT = { has_variable = west_indies_dissolution_hud }	# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = west_indies_dissolution_hud				# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		#WIF release states
		c:WIF = {
			
			#Saint Kitts & Nevis
			create_country = {
				tag = SKN										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x89337A
				province = p:x606060
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_federal_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Antigua & Barbuda
			create_country = {
				tag = AAB										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x89334D
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Dominica
			create_country = {
				tag = DMC										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x70F001
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Saint Lucia
			create_country = {
				tag = STL										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x5299CA
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Saint Vincent & the Grenadines
			create_country = {
				tag = SVG										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x446C63
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Grenada
			create_country = {
				tag = GND										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:xF0F001
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Barbados
			create_country = {
				tag = BAR										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x445B6C
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Trinidad & Tobago
			create_country = {
				tag = TAT										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x707080 
				province = p:xD496B1
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
			#Jamaica
			create_country = {
				tag = JAM										# Change TAG of country being released ****
				origin = c:WIF									# TAG where the created country takes tech from
				province = p:x535B49
				province = p:x7070B8
			
				on_created = {									# Set government laws & rulers here
				
					# SET laws for colony ****
					effect_starting_politics_constitutional_monarchy = yes
					effect_starting_politics_democratic = yes
					effect_starting_politics_constitutional_unitary_state = yes
					effect_starting_politics_war_policy_anti_military = yes
					effect_starting_politics_economic_policy_interventionism = yes
					effect_starting_politics_trade_policy_protectionism = yes
					effect_starting_politics_anti_nuclear_policy = yes
				
					# Set diplomatic recognition
					set_country_type = unrecognized
					
					# Overlord create Personal Union pact with colony
					save_scope_as = WIF_associated_state_scope
					c:GBR = { 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = semi_autonomous_colony } 
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = legal_union }
						create_diplomatic_pact = { country = scope:WIF_associated_state_scope type = currency_union }
					}
					set_variable = WIF_associated_state_var
					
				}
			}
			
		}
		
		#GBR annexes the remainder
		annex = c:WIF
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		c:WIF = {
		
			# Internal unrest
			every_scope_state = {
				add_radicals_in_state = {
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
			}
			
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Netherlands-Indonesia Confederation
historical_union_dissolution.5 = {
    type = country_event

    title = NET_IDO.t 					# Title of the event; ADD LOCALISATION
    desc = NET_IDO.d 					# Description of the event; ADD LOCALISATION
    #flavor = NET_IDO.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:IDO ?= this
		game_date >= 1956.1.1									# START DATE: Date colony became self governing ****
		game_date < 1966.1.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		is_subject_type = subject_type_confederal_state			# is_vassal = no
		exists = c:NET
		is_direct_subject_of = c:NET
		is_at_war = no											# war = no
		
		# Event has not been fired before
		NOT = { has_variable = NET_IDO_hud }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = NET_IDO_hud								# Change variable ****
	
	}
    
    option = {
        name = historical.option.1			# Accept secesssion
        highlighted_option = yes
		
		#Becomes independent
		make_independent = yes
		
		#Lose relations with NET
		change_relations = { country = ROOT value = -100 }
		
		#Prestige from victory!
		add_modifier = { 
			name = national_pride_modifier 
			years = 5
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		custom_tooltip = {
			text = everyone_is_angry_custom_tooltip
			every_scope_state = {
				add_radicals_in_state = {
					value = large_radicals
				}
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes }
			}
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Soviet Union
historical_union_dissolution.6 = {
    type = country_event

    title = ussr_dissolution.t 					# Title of the event; ADD LOCALISATION
    desc = ussr_dissolution.d 					# Description of the event; ADD LOCALISATION
    flavor = ussr_dissolution.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SOV ?= this
		
		# Event has not been fired before
		NOT = { has_variable = ussr_dissolution_hud }			# CHANGE ****
		
		#When
		OR = { 
		
			#Historical date
			AND = { 
				game_date >= 1991.9.26
				game_date < 2001.9.26
				OR = {
					has_global_variable = historical_railroading_active
					has_variable = SOV_august_coup_historical_option
				}
			}
			
			#Has a Democratic Revolution when economy is bad
			AND = {
				any_political_movement = {
					is_revolutionary = yes
					OR = {
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_HOS_communist_leader
								value < neutral
							}
						}
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_HOS_president
								value > neutral
							}
						}
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_multicultural
								value > strongly_approve
							}
						}
					}
				}
				OR = {
					in_default = yes
					has_healthy_economy = no
				}
				has_technology_researched = tech_politics_5
			}
			
		}
		
		is_a_communist_government = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Soviet Union has countries to release
		any_scope_state = {
			state_region = { is_homeland = cu:soviet NOT = { is_homeland = cu:russian } }
		}
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = ussr_dissolution_hud						# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		custom_tooltip = {
			text = dissolve_the_warsaw_pact.tt
		
			### Dissolve the Warsaw Pact ###
			every_country = {
				limit = { is_direct_subject_of = ROOT }
				make_independent = yes
				if = {
					limit = { is_a_communist_government = yes }
					trigger_event = { id = eastern_europe_indy.4 }
				}
			}
			
		}
			
		custom_tooltip = {
			text = dissolve_the_ussr.tt
			
			### Release all soviet states ###
			
			# Baltic States, if not already released
			if = { 
				limit = { NOT = { exists = c:EST } has_state_in_state_region = STATE_ESTONIA }
				create_country = { tag = EST state = s:STATE_ESTONIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:EST } create_diplomatic_pact = { country = c:EST type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:estonian } } set_state_owner = c:EST } }
			}
			if = { 
				limit = { NOT = { exists = c:LIT } has_state_in_state_region = STATE_LITHUANIA }
				create_country = { tag = LIT state = s:STATE_LITHUANIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:LIT } create_diplomatic_pact = { country = c:LIT type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:lithuanian NOT = { is_homeland = cu:german } } } set_state_owner = c:LIT } }
			}
			if = { 
				limit = { NOT = { exists = c:LAT } has_state_in_state_region = STATE_LATVIA }
				create_country = { tag = LAT state = s:STATE_LATVIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:LAT } create_diplomatic_pact = { country = c:LAT type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:latvian } } set_state_owner = c:LAT } }
			}
			
			# SSRs
			if = { 
				limit = { NOT = { exists = c:AZB } has_state_in_state_region = STATE_AZERBAIJAN }
				create_country = { tag = AZB state = s:STATE_AZERBAIJAN.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:AZB } create_diplomatic_pact = { country = c:AZB type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:azerbaijani } } set_state_owner = c:AZB } }
				if = { 
					limit = { 
						exists = c:AZB
						p:x2F7A57.state.owner = { THIS = c:AZB }
					}
					c:AZB = {
						create_country = {
							tag = ATH
							origin = ROOT
							province = p:x2F7A57
							on_created = { soviet_SSR_dissolution_laws = yes }
						}
						if = {
							limit = { exists = c:ATH }
							every_country = {
								limit = { 
									NOR = { 
										c:ARM ?= this 
										c:SOV ?= this 
									} 
								}
								set_relations = { country = c:ATH value = -100 }
							}
						}
					}
				}
			}
			if = {
				limit = { NOT = { exists = c:UKR } has_state_in_state_region = STATE_KIEV }
				create_country = { tag = UKR state = s:STATE_KIEV.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:UKR } create_diplomatic_pact = { country = c:UKR type = protectorate } every_scope_state = { limit = { OR = { state_region = { is_homeland = cu:ukrainian } state_region = s:STATE_MOLDAVIA } NOR = { state_region = s:STATE_KURSK state_region = s:STATE_ROSTOV } } set_state_owner = c:UKR } }
				
				#Crimean issue
				if = { 
					limit = { exists = c:UKR } 
					c:UKR = {
						if = { 
							limit = { NOT = { exists = c:CRI } has_state_in_state_region = STATE_CRIMEA }
							create_country = { tag = CRI state = s:STATE_CRIMEA.region_state:UKR origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
							if = { limit = { exists = c:CRI } create_diplomatic_pact = { country = c:CRI type = special_administrative_region } }
						} 
					}
				}
			}
			if = { 
				limit = { NOT = { exists = c:BYE } has_state_in_state_region = STATE_MINSK }
				create_country = { tag = BYE state = s:STATE_MINSK.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:BYE } create_diplomatic_pact = { country = c:BYE type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:byelorussian } } set_state_owner = c:BYE } }
			}
			if = { 
				limit = { NOT = { exists = c:GEO } has_state_in_state_region = STATE_GREATER_CAUCASUS }
				create_country = { tag = GEO state = s:STATE_GREATER_CAUCASUS.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:GEO } every_scope_state = { limit = { state_region = { is_homeland = cu:georgian } } set_state_owner = c:GEO } }
				if = { 
					limit = { 
						exists = c:GEO
					}
					if = {
						limit = { 
							NOT = { exists = c:ABK } 
							p:x73A639.state.owner = { THIS = c:GEO }
							p:x40D001.state.owner = { THIS = c:GEO }
						}
						create_country = {
							tag = ABK
							origin = ROOT
							province = p:x73A639 
							province = p:x40D001
							on_created = { soviet_SSR_dissolution_laws = yes }
						}
						if = {
							limit = { exists = c:ABK }
							every_country = {
								limit = { NOT = { THIS = c:SOV } }
								set_relations = { country = c:ABK value = -100 }
							}
							create_diplomatic_pact = {
								country = c:ABK
								type = protectorate
							}
						}
					}
					if = {
						limit = { 
							NOT = { exists = c:SOS } 
							p:x85DCE4.state.owner = { THIS = c:GEO }
						}
						create_country = {
							tag = SOS
							origin = ROOT
							province = p:x85DCE4
							on_created = { soviet_SSR_dissolution_laws = yes }
						}
						if = {
							limit = { exists = c:SOS }
							every_country = {
								limit = { NOT = { THIS = c:SOV } }
								set_relations = { country = c:SOS value = -100 }
							}
							create_diplomatic_pact = {
								country = c:SOS
								type = protectorate
							}
						}
					}
				}
			}
			if = { 
				limit = { NOT = { exists = c:ARM } has_state_in_state_region = STATE_ARMENIA }
				create_country = { tag = ARM state = s:STATE_ARMENIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:ARM } create_diplomatic_pact = { country = c:ARM type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:armenian } } set_state_owner = c:ARM } }
				if = { 
					limit = { 
						exists = c:AZB 
						exists = c:ARM
						p:x3161E0.state.owner = { THIS = c:ARM }
					}
					s:STATE_ARMENIA = {
						set_owner_of_provinces = {
							country = c:AZB
							provinces = { x3161E0 }
						}
					}
				}
				if = {
					limit = { 
						exists = c:ARM 
						exists = c:ATH
						c:ATH ?= {
							is_sufficiently_independent = yes
							is_at_war = no
						}
					}
					c:ARM ?= {
						create_diplomatic_pact = {
							country = c:ATH
							type = puppet
						}
					}
				}
			}
			if = { 
				limit = { NOT = { exists = c:TKM } has_state_in_state_region = STATE_TURKMENIA }
				create_country = { tag = TKM state = s:STATE_TURKMENIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:TKM } create_diplomatic_pact = { country = c:TKM type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:turkmen } } set_state_owner = c:TKM } }
			}
			if = { 
				limit = { NOT = { exists = c:MOL } has_state_in_state_region = STATE_BESSARABIA }
				create_country = { tag = MOL state = s:STATE_BESSARABIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:MOL } every_scope_state = { limit = { state_region = { is_homeland = cu:moldovan } } set_state_owner = c:MOL } }
				
				#Transnistrian issue
				if = { 
					limit = { exists = c:MOL } 
					c:MOL = {
						if = { 
							limit = { 
								NOT = { exists = c:TRD } 
								p:x8ACA9B.state.owner = { THIS = c:MOL }
								p:xFC9EFE.state.owner = { THIS = c:MOL }
								p:x1E1DEF.state.owner = { THIS = c:MOL }
							}
							create_country = { 
								tag = TRD 
								province = p:x8ACA9B 
								province = p:xFC9EFE 
								province = p:x1E1DEF
								origin = ROOT 
								on_created = { soviet_SSR_dissolution_laws = yes } 
							}
						}
					}
					if = { limit = { exists = c:TRD } set_relations = { country = c:TRD value = 100 } create_diplomatic_pact = { country = c:TRD type = protectorate } }
				}
				
				#Gagauzian issue
				if = { 
					limit = { exists = c:MOL } 
					c:MOL = {
						if = { 
							limit = { 
								NOT = { exists = c:GAU } 
								p:x712161.state.owner = { THIS = c:MOL }
							}
							create_country = { 
								tag = GAU
								province = p:x712161
								origin = ROOT 
								on_created = { soviet_SSR_dissolution_laws = yes } 
							}
							if = {
								limit = { exists = c:GAU }
								every_country = {
									limit = { NOT = { THIS = c:TUR } NOT = { THIS = c:SOV } }
									set_relations = { country = c:GAU value = -100 }
								}
							}
						}
					}
				}
				
				#Fix Ukrainian borders in Moldovia
				if = { 
					limit = { 
						exists = c:MOL 
						exists = c:UKR 
					} 
					c:MOL = {
						if = { 
							limit = { 
								p:x6BF7B8.state.owner = { THIS = c:MOL }
								p:xB0E0A0.state.owner = { THIS = c:MOL }
								p:x5F2259.state.owner = { THIS = c:MOL } 
								p:x23621B.state.owner = { THIS = c:MOL }
							}
							s:STATE_BESSARABIA = {
								set_owner_of_provinces = {
									country = c:UKR
									provinces = { x6BF7B8 xB0E0A0 x5F2259 x23621B }
								}
							}
							
						}
					}
				}
				
			}
			if = { 
				limit = { NOT = { exists = c:UZB } has_state_in_state_region = STATE_UZBEKIA }
				create_country = { tag = UZB state = s:STATE_UZBEKIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:UZB } create_diplomatic_pact = { country = c:UZB type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:uzbek } } set_state_owner = c:UZB } }
			}
			if = { 
				limit = { NOT = { exists = c:KAZ } has_state_in_state_region = STATE_SEMIRECHE }
				create_country = { tag = KAZ state = s:STATE_SEMIRECHE.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:KAZ } create_diplomatic_pact = { country = c:KAZ type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:kazak } } set_state_owner = c:KAZ } }
			}
			if = { 
				limit = { NOT = { exists = c:KYR } has_state_in_state_region = STATE_KIRGHIZIA }
				create_country = { tag = KYR state = s:STATE_KIRGHIZIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:KYR } create_diplomatic_pact = { country = c:KYR type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:kirgiz } } set_state_owner = c:KYR } }
			}
			if = { 
				limit = { NOT = { exists = c:TAJ } has_state_in_state_region = STATE_TAJIKISTAN }
				create_country = { tag = TAJ state = s:STATE_TAJIKISTAN.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:TAJ } create_diplomatic_pact = { country = c:TAJ type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:tajik } } set_state_owner = c:TAJ } }
			}
			if = { limit = { exists = c:UZB } c:UZB = { set_central_asian_borders = yes } }
			if = { limit = { exists = c:KAZ } c:KAZ = { set_central_asian_borders = yes } }
			if = { limit = { exists = c:KYR } c:KYR = { set_central_asian_borders = yes } }
			if = { limit = { exists = c:TAJ } c:TAJ = { set_central_asian_borders = yes } }
			
			# Post WW2 occupied regions
			if = { limit = { exists = c:CHI NOT = { exists = c:MCK } } every_scope_state = { limit = { state_region = { is_homeland = cu:manchu NOT = { is_homeland = cu:russian } } } set_state_owner = c:CHI } }
			if = { limit = { exists = c:PRC NOT = { exists = c:MCK } } every_scope_state = { limit = { state_region = { is_homeland = cu:manchu NOT = { is_homeland = cu:russian } } } set_state_owner = c:PRC } }
			if = { limit = { exists = c:ROC NOT = { exists = c:MCK } } every_scope_state = { limit = { state_region = { is_homeland = cu:manchu NOT = { is_homeland = cu:russian } } } set_state_owner = c:ROC } }
			if = { limit = { exists = c:MCK } every_scope_state = { limit = { state_region = { is_homeland = cu:manchu NOT = { is_homeland = cu:russian } } } set_state_owner = c:MCK } }
			
			if = { limit = { exists = c:NKO NOT = { exists = c:KOR } } every_scope_state = { limit = { state_region = { is_homeland = cu:korean } } set_state_owner = c:NKO } }
			if = { limit = { exists = c:SKO NOT = { exists = c:KOR } } every_scope_state = { limit = { state_region = { is_homeland = cu:korean } } set_state_owner = c:SKO } }
			if = { limit = { exists = c:KOR } every_scope_state = { limit = { state_region = { is_homeland = cu:korean } } set_state_owner = c:KOR } }
			
			if = { 
				limit = { NOT = { exists = c:MCK } has_state_in_state_region = STATE_SOUTHERN_MANCHURIA }
				create_country = { tag = MCK state = s:STATE_SOUTHERN_MANCHURIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:MCK } create_diplomatic_pact = { country = c:MCK type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:manchu NOT = { is_homeland = cu:russian } } } set_state_owner = c:MCK } }
			}
			if = { 
				limit = { NOT = { exists = c:NKO } has_state_in_state_region = STATE_PYONGYANG }
				create_country = { tag = NKO state = s:STATE_PYONGYANG.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:NKO } create_diplomatic_pact = { country = c:NKO type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:korean } } set_state_owner = c:NKO } }
			}
			
			# If any Eastern European satellite states were annexed
			if = { limit = { exists = c:EGR NOT = { exists = c:GER } } every_scope_state = { limit = { state_region = { is_homeland = cu:german NOT = { is_homeland = cu:lithuanian } NOT = { is_homeland = cu:russian } NOT = { state_region = s:STATE_EAST_PRUSSIA } } } set_state_owner = c:EGR } }
			if = { limit = { exists = c:WGR NOT = { exists = c:GER } } every_scope_state = { limit = { state_region = { is_homeland = cu:german NOT = { is_homeland = cu:lithuanian } NOT = { is_homeland = cu:russian } NOT = { state_region = s:STATE_EAST_PRUSSIA } } } set_state_owner = c:WGR } }
			if = { limit = { exists = c:GER } every_scope_state = { limit = { state_region = { is_homeland = cu:german NOT = { is_homeland = cu:lithuanian } NOT = { is_homeland = cu:russian } NOT = { state_region = s:STATE_EAST_PRUSSIA } } } set_state_owner = c:GER } }
			if = { 
				limit = { NOT = { exists = c:EGR } has_state_in_state_region = STATE_BRANDENBURG }
				create_country = { tag = EGR state = s:STATE_BRANDENBURG.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:EGR } create_diplomatic_pact = { country = c:EGR type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:german NOT = { is_homeland = cu:russian } } } set_state_owner = c:EGR } }
			}
			if = { 
				limit = { NOT = { exists = c:CZH } has_state_in_state_region = STATE_BOHEMIA }
				create_country = { tag = CZH state = s:STATE_BOHEMIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:CZH } create_diplomatic_pact = { country = c:CZH type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:czechoslovakian } } set_state_owner = c:CZH } }
			}
			if = { 
				limit = { NOT = { exists = c:POL } has_state_in_state_region = STATE_MAZOVIA }
				create_country = { tag = POL state = s:STATE_MAZOVIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:POL } create_diplomatic_pact = { country = c:POL type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:polish } } set_state_owner = c:POL } }
			}
			if = { 
				limit = { NOT = { exists = c:HUN } has_state_in_state_region = STATE_CENTRAL_HUNGARY }
				create_country = { tag = HUN state = s:STATE_CENTRAL_HUNGARY.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:HUN } create_diplomatic_pact = { country = c:HUN type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:hungarian } } set_state_owner = c:HUN } }
			}
			if = { 
				limit = { NOT = { exists = c:BUL } has_state_in_state_region = STATE_NORTHERN_THRACE }
				create_country = { tag = BUL state = s:STATE_NORTHERN_THRACE.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:BUL } create_diplomatic_pact = { country = c:BUL type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:bulgarian } } set_state_owner = c:BUL } }
			}
			if = { 
				limit = { NOT = { exists = c:ROM } has_state_in_state_region = STATE_WALLACHIA }
				create_country = { tag = ROM state = s:STATE_WALLACHIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:ROM } create_diplomatic_pact = { country = c:ROM type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:romanian } } set_state_owner = c:ROM } }
			}
			if = { 
				limit = { NOT = { exists = c:AUS } has_state_in_state_region = STATE_AUSTRIA }
				create_country = { tag = AUS state = s:STATE_AUSTRIA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:AUS } create_diplomatic_pact = { country = c:AUS type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:austrian } } set_state_owner = c:AUS } }
			}
			
			# If Mongolia was annexed
			if = { 
				limit = { NOT = { exists = c:MGL } has_state_in_state_region = STATE_URGA }
				create_country = { tag = MGL state = s:STATE_URGA.region_state:SOV origin = ROOT on_created = { soviet_SSR_dissolution_laws = yes } }
				if = { limit = { exists = c:MGL } create_diplomatic_pact = { country = c:MGL type = protectorate } every_scope_state = { limit = { state_region = { is_homeland = cu:mongol } } set_state_owner = c:MGL } }
			}
		
		}
		
		### Return to being Russia ###
		custom_tooltip = {
			text = create_russian_federation.tt
			
			#Become Russia
			change_tag = RUS
			remove_primary_culture = cu:soviet
			remove_primary_culture = cu:byelorussian
			remove_primary_culture = cu:georgian 
			remove_primary_culture = cu:ukrainian
			
			#Russian Federation
			effect_starting_politics_presidential_republic = yes
			effect_starting_politics_democratic = yes
			effect_starting_politics_constitutional_federal_state = yes
			effect_starting_politics_economic_policy_interventionism = yes
			effect_starting_politics_war_policy_anti_military = yes
			
			#Set State Religion
			set_state_religion = rel:orthodox
		
			#Historical Ruler
			if = {
				limit = { 
					game_date >= 1990.1.1
					game_date < 2000.1.1
				}
				create_character = {
					first_name = "Boris_Yeltsin_first_name"
					last_name = "Boris_Yeltsin_last_name"
					ruler = yes ig_leader = yes historical = yes
					birth_date = 1931.2.1
					interest_group = ig_industrialists
					ideology = ideology_democratic
					culture = cu:russian
					traits = {
						alcoholic
						charismatic
						expensive_tastes
					}
					on_created = {
						set_variable = Boris_Yeltsin
					}
				}
			}
		
		}
		
		#World is happy
		change_infamy = -1000
		every_country = {
			limit = { 
				is_a_democracy = yes 
				is_sufficiently_independent = yes
				country_rank >= rank_value:great_power 
			}
			change_relations = { country = ROOT value = 100 }
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		custom_tooltip = {
			text = everyone_is_angry_custom_tooltip
			add_radicals = {
				value = large_radicals
			}
			every_scope_state = {
				limit = { state_region = { is_homeland = cu:soviet } }
				add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes }
			}
		}
		
		change_infamy = 25
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Dissolve Czechoslovakia
historical_union_dissolution.7 = {
    type = country_event
	placement = scope:colonial_state

    title = CZH_dissolution.t 						# Title of the event; ADD LOCALISATION
    desc = CZH_dissolution.d 						# Description of the event; ADD LOCALISATION
    #flavor = CZH_dissolution.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		OR = {
			c:CZH ?= this
			c:BOH ?= this
		}
		
		#When
		OR = { 
		
			#Historical date
			AND = { 
				game_date >= 1992.12.31
				game_date < 2002.12.31
				has_global_variable = historical_railroading_active
			}
			
			#Has a Democratic Revolution when economy is bad
			AND = {
				any_political_movement = {
					is_revolutionary = yes
					OR = {
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_HOS_communist_leader
								value < neutral
							}
						}
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_HOS_president
								value > neutral
							}
						}
						any_influenced_interest_group = {
							law_stance = {
								law = law_type:law_multicultural
								value > strongly_approve
							}
						}
					}
				}
				OR = {
					in_default = yes
					has_healthy_economy = no
				}
			}
			
		}
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:SLV										# Change TAG of the colony ****
		}
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:slovak }			# Change homeland identity to match colony to be released ****
		}
		
		# Event has not been fired before
		NOT = { has_variable = CZH_dissolution_hud }			# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:slovak }		# Change homeland identity to match colony to be released ****
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = CZH_dissolution_hud						# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		#Subject becomes independent
		create_country = {
			tag = SLV										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				soviet_SSR_dissolution_laws = yes
				
			}
		}
		if = {
			limit = { exists = c:SLV }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:slovak }	# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:SLV								# Change TAG to colony ****
			}
		}
		
		#Return to being Czechia
		if = {
			limit = { 
				c:CZH ?= this 
				exists = c:SLV
			}
			change_tag = BOH
			remove_primary_culture = cu:czechoslovakian
			remove_primary_culture = cu:slovak
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:slovak
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:slovak } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#Dissolve Serbia & Montenegro
historical_union_dissolution.8 = {
    type = country_event
	placement = scope:colonial_state

    title = SER_MON_dissolution.t 						# Title of the event; ADD LOCALISATION
    desc = SER_MON_dissolution.d 						# Description of the event; ADD LOCALISATION
    #flavor = SER_MON_dissolution.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		exists = c:SER
		this = c:SER											# Change TAG of the overlord ****
		game_date >= 2006.6.3
		game_date < 2016.6.3
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:MON										# Change TAG of the colony ****
		}
		any_scope_state = { 									# Overlord owns the states of the colony to be released
			state_region = { is_homeland = cu:montenegrin }		# Change homeland identity to match colony to be released ****
		}
		
		# Event has not been fired before
		NOT = { has_variable = SER_MON_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:montenegrin }	# Change homeland identity to match colony to be released ****
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = SER_MON_dissolution_hud					# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		#Subject becomes independent
		create_country = {
			tag = MON										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				soviet_SSR_dissolution_laws = yes
				
			}
		}
		if = {
			limit = { exists = c:MON }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:montenegrin }	# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:MON								# Change TAG to colony ****
			}
		}
		
		#Remove Montenegrin
		remove_primary_culture = cu:montenegrin
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:montenegrin
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:montenegrin } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#1980 Quebec referendum
historical_union_dissolution.9 = {
    type = country_event
	placement = scope:colonial_state

    title = CAN_QUE_1_dissolution.t 						# Title of the event; ADD LOCALISATION
    desc = CAN_QUE_1_dissolution.d 						# Description of the event; ADD LOCALISATION
    #flavor = CAN_QUE_1_dissolution.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:CAN ?= this
		game_date >= 1980.5.20
		game_date < 1990.5.20
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:QUE										# Change TAG of the colony ****
		}
		has_state_in_state_region = STATE_QUEBEC
		
		# Event has not been fired before
		NOT = { has_variable = CAN_QUE_1_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:franco_canadian }	# Change homeland identity to match colony to be released ****
				state_region = s:STATE_QUEBEC
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = CAN_QUE_1_dissolution_hud				# Change variable ****
	
	}
    
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		highlighted_option = yes
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:franco_canadian
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:franco_canadian } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.1		# Accept secesssion
		
		#Subject becomes independent
		create_country = {
			tag = QUE										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# Laws
				if = { 
					limit = { 
						exists = c:GBR
						c:CAN = { 
							is_a_monarchy = yes 
							has_diplomatic_pact = { who = c:GBR type = personal_union is_initiator = no }
						} 
					}
					effect_starting_politics_constitutional_monarchy = yes
					c:GBR = {
						create_diplomatic_pact = {
							country = c:QUE
							type = personal_union
						}
					}
				}
				else_if = { 
					limit = { 
						c:CAN = { 
							is_a_monarchy = yes 
						} 
					}
					effect_starting_politics_constitutional_monarchy = yes
					c:CAN = {
						create_diplomatic_pact = {
							country = c:QUE
							type = personal_union
						}
					}
				}
				else = {
					effect_starting_politics_parliamentary_republic = yes
				}
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_federal_state = yes
				effect_starting_politics_war_policy_pro_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_free_trade = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_manufacturing = yes
				
				effect_starting_politics_fiat_standard = yes
				
			}
			
		}
		if = {
			limit = { exists = c:QUE }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:franco_canadian }	# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:QUE									# Change TAG to colony ****
			}
			if = {
				limit = { leads_customs_union = no }
				random_country = {
					limit = { has_diplomatic_pact = { who = ROOT type = customs_union is_initiator = yes } }
					set_relations = { country = c:QUE value = 50 }
					create_diplomatic_pact = {
						country = c:QUE
						type = customs_union
					}
				}
			}
			else_if = {
				limit = { leads_customs_union = yes }
				create_diplomatic_pact = {
					country = c:QUE
					type = customs_union
				}
			}
			create_diplomatic_pact = {
				country = c:QUE
				type = legal_union
			}
			create_diplomatic_pact = {
				country = c:QUE
				type = currency_union
			}
			set_relations = { country = c:QUE value = 100 }
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#1995 Quebec referendum
historical_union_dissolution.10 = {
    type = country_event
	placement = scope:colonial_state

    title = CAN_QUE_2_dissolution.t 					# Title of the event; ADD LOCALISATION
    desc = CAN_QUE_2_dissolution.d 						# Description of the event; ADD LOCALISATION
    #flavor = CAN_QUE_2_dissolution.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:CAN ?= this
		game_date >= 1995.10.30
		game_date < 2005.10.30
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:QUE										# Change TAG of the colony ****
		}
		has_state_in_state_region = STATE_QUEBEC
		
		# Event has not been fired before
		NOT = { has_variable = CAN_QUE_2_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:franco_canadian }	# Change homeland identity to match colony to be released ****
				state_region = s:STATE_QUEBEC
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = CAN_QUE_2_dissolution_hud				# Change variable ****
	
	}
    
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		highlighted_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:franco_canadian
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:franco_canadian } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.1		# Accept secesssion
		
		#Subject becomes independent
		create_country = {
			tag = QUE										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# Laws
				if = { 
					limit = { 
						exists = c:GBR
						c:CAN = { 
							is_a_monarchy = yes 
							has_diplomatic_pact = { who = c:GBR type = personal_union is_initiator = no }
						} 
					}
					effect_starting_politics_constitutional_monarchy = yes
					c:GBR = {
						create_diplomatic_pact = {
							country = c:QUE
							type = personal_union
						}
					}
				}
				else_if = { 
					limit = { 
						c:CAN = { 
							is_a_monarchy = yes 
						} 
					}
					effect_starting_politics_constitutional_monarchy = yes
					c:CAN = {
						create_diplomatic_pact = {
							country = c:QUE
							type = personal_union
						}
					}
				}
				else = {
					effect_starting_politics_parliamentary_republic = yes
				}
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_federal_state = yes
				effect_starting_politics_war_policy_pro_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_free_trade = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_manufacturing = yes
				
				effect_starting_politics_fiat_standard = yes
				
			}
			
		}
		if = {
			limit = { exists = c:QUE }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:franco_canadian }	# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:QUE									# Change TAG to colony ****
			}
			if = {
				limit = { leads_customs_union = no }
				random_country = {
					limit = { has_diplomatic_pact = { who = ROOT type = customs_union is_initiator = yes } }
					set_relations = { country = c:QUE value = 50 }
					create_diplomatic_pact = {
						country = c:QUE
						type = customs_union
					}
				}
			}
			else_if = {
				limit = { leads_customs_union = yes }
				create_diplomatic_pact = {
					country = c:QUE
					type = customs_union
				}
			}
			create_diplomatic_pact = {
				country = c:QUE
				type = legal_union
			}
			create_diplomatic_pact = {
				country = c:QUE
				type = currency_union
			}
			set_relations = { country = c:QUE value = 100 }
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Kurdistan Regional Government
historical_union_dissolution.11 = {
    type = country_event
	placement = scope:colonial_state

    title = IRQ_KUR_dissolution.t 						# Title of the event; ADD LOCALISATION
    desc = IRQ_KUR_dissolution.d 						# Description of the event; ADD LOCALISATION
    #flavor = IRQ_KUR_dissolution.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:IRQ ?= this
		game_date >= 2005.10.15
		game_date < 2015.10.15
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:KUR										# Change TAG of the colony ****
		}
		has_state_in_state_region = STATE_MOSUL
		
		# Event has not been fired before
		NOT = { has_variable = IRQ_KUR_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = s:STATE_MOSUL					# Change homeland identity to match colony to be released ****
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = IRQ_KUR_dissolution_hud					# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		change_infamy = -20
		
		#Subject becomes independent
		create_country = {
			tag = KUR										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# SET laws for colony ****
				effect_starting_politics_semi_presidential_republic = yes
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_unitary_state = yes
				effect_starting_politics_war_policy_anti_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_protectionism = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_natural_resource = yes

				effect_starting_politics_fiat_standard = yes
	
				# Set diplomatic recognition
				set_country_type = unrecognized
			}
			
		}
		if = {
			limit = { exists = c:KUR }
			create_diplomatic_pact = { 
				country = c:KUR
				type = special_administrative_region 
			}
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:kurdish
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:kurdish } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#2014 Scottish independence referendum
historical_union_dissolution.12 = {
    type = country_event
	placement = scope:colonial_state

    title = GBR_SCO_dissolution.t 								# Title of the event; ADD LOCALISATION
    desc = GBR_SCO_dissolution.d 								# Description of the event; ADD LOCALISATION
    #flavor = GBR_SCO_dissolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:GBR ?= this
		game_date >= 2014.9.18
		game_date < 2024.9.18
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:SCO										# Change TAG of the colony ****
		}
		any_scope_state = { 
			state_region = { is_homeland = cu:scottish } 
			is_incorporated = yes 
		}
		
		# Event has not been fired before
		NOT = { has_variable = GBR_SCO_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released					# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:scottish }		# Change homeland identity to match colony to be released ****
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = GBR_SCO_dissolution_hud					# Change variable ****
	
	}
    
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		highlighted_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:scottish
			value = large_radicals
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.1		# Accept secesssion
		
		change_infamy = -10
		
		#Subject becomes independent
		create_country = {
			tag = SCO										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# Laws
				if = { 
					limit = { 
						c:GBR = { 
							is_a_monarchy = yes 
						}
					}
					effect_starting_politics_constitutional_monarchy = yes
					c:GBR = {
						create_diplomatic_pact = {
							country = c:SCO
							type = personal_union
						}
					}
				}
				else = {
					effect_starting_politics_parliamentary_republic = yes
				}
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_federal_state = yes
				effect_starting_politics_war_policy_pro_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_free_trade = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_manufacturing = yes
				
				effect_starting_politics_fiat_standard = yes
				
			}
			
		}
		if = {
			limit = { exists = c:SCO }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:scottish }		# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:SCO									# Change TAG to colony ****
			}
			#Set capital
			c:SCO = {
				if = {
					limit = { has_state_in_state_region = STATE_LOWLANDS }
					set_capital = STATE_LOWLANDS
				}
			}
			if = {
				limit = { leads_customs_union = no }
				random_country = {
					limit = { has_diplomatic_pact = { who = ROOT type = customs_union is_initiator = yes } }
					set_relations = { country = c:SCO value = 50 }
					create_diplomatic_pact = {
						country = c:SCO
						type = customs_union
					}
				}
			}
			else_if = {
				limit = { leads_customs_union = yes }
				create_diplomatic_pact = {
					country = c:SCO
					type = customs_union
				}
			}
			create_diplomatic_pact = {
				country = c:SCO
				type = legal_union
			}
			create_diplomatic_pact = {
				country = c:SCO
				type = currency_union
			}
			set_relations = { country = c:SCO value = 100 }
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#2017 Catalan independence referendum
historical_union_dissolution.13 = {
    type = country_event
	placement = scope:colonial_state

    title = SPA_CAT_dissolution.t 								# Title of the event; ADD LOCALISATION
    desc = SPA_CAT_dissolution.d 								# Description of the event; ADD LOCALISATION
    #flavor = SPA_CAT_dissolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SPA ?= this
		game_date >= 2017.10.1
		game_date < 2027.10.1
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:CAT										# Change TAG of the colony ****
		}
		any_scope_state = { 
			state_region = { is_homeland = cu:catalan } 
			is_incorporated = yes 
			state_region = s:STATE_CATALONIA
		}
		
		# Event has not been fired before
		NOT = { has_variable = SPA_CAT_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released					# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:catalan }		# Change homeland identity to match colony to be released ****
				state_region = s:STATE_CATALONIA
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = SPA_CAT_dissolution_hud					# Change variable ****
	
	}
    
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		highlighted_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:catalan
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:catalan } }
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.1		# Accept secesssion
		
		change_infamy = -10
		
		#Subject becomes independent
		create_country = {
			tag = CAT										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# Laws
				if = { 
					limit = { 
						c:SPA = { 
							is_a_monarchy = yes 
						}
					}
					effect_starting_politics_constitutional_monarchy = yes
					c:SPA = {
						create_diplomatic_pact = {
							country = c:CAT
							type = personal_union
						}
					}
				}
				else = {
					effect_starting_politics_parliamentary_republic = yes
				}
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_federal_state = yes
				effect_starting_politics_war_policy_pro_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_free_trade = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_manufacturing = yes
				
				effect_starting_politics_fiat_standard = yes
				
			}
			
		}
		if = {
			limit = { exists = c:CAT }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:catalan }		# Change homeland identity to match colony to be released ****
					state_region = s:STATE_CATALONIA
				}
				set_state_owner = c:CAT									# Change TAG to colony ****
			}
			#Set capital
			c:CAT = {
				if = {
					limit = { has_state_in_state_region = STATE_CATALONIA }
					set_capital = STATE_CATALONIA
				}
			}
			if = {
				limit = { leads_customs_union = no }
				random_country = {
					limit = { has_diplomatic_pact = { who = ROOT type = customs_union is_initiator = yes } }
					set_relations = { country = c:CAT value = 50 }
					create_diplomatic_pact = {
						country = c:CAT
						type = customs_union
					}
				}
			}
			else_if = {
				limit = { leads_customs_union = yes }
				create_diplomatic_pact = {
					country = c:CAT
					type = customs_union
				}
			}
			create_diplomatic_pact = {
				country = c:CAT
				type = legal_union
			}
			create_diplomatic_pact = {
				country = c:CAT
				type = currency_union
			}
			set_relations = { country = c:CAT value = 100 }
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Dissolution of Saint Christopher-Nevis-Anguilla
historical_union_dissolution.14 = {
    type = country_event
	placement = scope:colonial_state

    title = SKN_GBR_dissolution.t 						# Title of the event; ADD LOCALISATION
    desc = SKN_GBR_dissolution.d 						# Description of the event; ADD LOCALISATION
    #flavor = SKN_GBR_dissolution.f 					# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:GBR ?= this
		game_date >= 1980.12.19
		game_date < 1990.12.19
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:AGU										# Change TAG of the colony ****
		}
		exists = c:SKN
		c:SKN ?= { 
			is_direct_subject_of = ROOT 
			is_not_sufficiently_independent = yes
			is_at_war = no
		}
		p:x606060 ?= {
			owner = c:SKN
		}
		
		# Event has not been fired before
		NOT = { has_variable = SKN_GBR_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		random_scope_state = {
			limit = {
				state_region = s:STATE_WEST_INDIES
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = SKN_GBR_dissolution_hud					# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		s:STATE_WEST_INDIES = {
			set_owner_of_provinces = {
				country = ROOT
				provinces = { x606060 }
			}
		}
		
		change_relations = { country = c:SKN value = -50 }
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = british_decolonisation_indy.option.2				# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		c:SKN = {
			add_radicals = {
				value = large_radicals
			}
			add_modifier = { 
				name = stirrings_of_revolution
				months = 60 
				is_decaying = yes 
			}
		}
		change_infamy = 5
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#2021 New Caledonian independence referendum
historical_union_dissolution.15 = {
    type = country_event
	placement = c:NCD

    title = FRA_NCD_dissolution.t 								# Title of the event; ADD LOCALISATION
    desc = FRA_NCD_dissolution.d 								# Description of the event; ADD LOCALISATION
    #flavor = FRA_NCD_dissolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:FRA ?= this
		game_date >= 2021.12.12
		game_date < 2031.12.12
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		exists = c:NCD
		c:NCD = { 												# Change TAG of the colony ****
			is_direct_subject_of = ROOT
			is_not_sufficiently_independent = yes
		}
		
		# Event has not been fired before
		NOT = { has_variable = FRA_NCD_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = FRA_NCD_dissolution_hud					# Change variable ****
	
	}
    
	option = {
        name = historical_union_dissolution.option.2		# Refuse secesssion
		default_option = yes
		highlighted_option = yes
		
		# Internal unrest
		c:NCD = {
			add_radicals = {
				culture = cu:new_caledonian
				value = large_radicals
			}
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.1		# Accept secesssion
		
		change_infamy = -10
		
		#Set colony free
		if = {
			limit = { exists = c:NCD }
			
			# Colony becomes independent
			c:NCD = {
				make_independent = yes
			}
			
			if = {
				limit = { leads_customs_union = no }
				random_country = {
					limit = { has_diplomatic_pact = { who = ROOT type = customs_union is_initiator = yes } }
					set_relations = { country = c:NCD value = 50 }
					create_diplomatic_pact = {
						country = c:NCD
						type = customs_union
					}
				}
			}
			else_if = {
				limit = { leads_customs_union = yes }
				create_diplomatic_pact = {
					country = c:NCD
					type = customs_union
				}
			}
			create_diplomatic_pact = {
				country = c:NCD
				type = legal_union
			}
			create_diplomatic_pact = {
				country = c:NCD
				type = currency_union
			}
			
			# Create PU if applicable
			if = {
				limit = { 
					is_a_monarchy = yes
				}
				c:NCD = { 
					effect_starting_politics_constitutional_monarchy = yes 
				}
				create_diplomatic_pact = {
					country = c:NCD
					type = personal_union
				}
			}
			
			set_relations = { country = c:NCD value = 100 }
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#Union of African States
historical_union_dissolution.16 = {
    type = country_event

    title = UAS_GHA.t 					# Title of the event; ADD LOCALISATION
    desc = UAS_GHA.d 					# Description of the event; ADD LOCALISATION
    #flavor = UAS_GHA.f 				# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:GHA ?= this
		game_date >= 1963.6.1									# START DATE: Date colony became self governing ****
		game_date < 1973.6.1									# END DATE: All historical events must not fire 10 years after the START DATE ****
		
		OR = { 
			is_a_presidential_regime = yes
			is_a_presidential_democracy = yes
		}
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Confederation exists
		OR = { 
			AND = {
				exists = c:GUI
				c:GUI ?= {
					is_subject_of = ROOT
					is_subject_type = subject_type_confederal_state
				}
			}
			AND = {
				exists = c:MAL
				c:MAL ?= {
					is_subject_of = ROOT
					is_subject_type = subject_type_confederal_state
				}
			}
		}
		
		# Event has not been fired before
		NOT = { has_variable = UAS_GHA_hud }					# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = UAS_GHA_hud								# Change variable ****
	
	}
    
    option = {
        name = historical_union_dissolution.option.1			# Accept secesssion
        highlighted_option = yes
		
		#Dissolve confederation
		every_country = {
			limit = {
				OR = {
					c:GUI ?= this 
					c:MAL ?= this 
				}
				is_subject_of = ROOT
				is_subject_type = subject_type_confederal_state
			}
			make_independent = yes
		}
		
		ai_chance = { 
			base = 90 
		}
		
    }
	
	option = {
        name = historical_union_dissolution.option.2			# Refuse secesssion
		default_option = yes
		
		# Internal unrest
		every_country = {
			limit = {
				OR = {
					c:GUI ?= this
					c:MAL ?= this
				}
				is_subject_of = ROOT
				is_subject_type = subject_type_confederal_state
			}
			add_radicals = {
				value = large_radicals
			}
			add_modifier = { 
				name = nationalist_agitation 
				months = 60 
				is_decaying = yes 
			}
			add_liberty_desire = 100
		}
		add_radicals = {
			value = large_radicals
		}
		add_modifier = { 
			name = nationalist_agitation 
			months = 60 
			is_decaying = yes 
		}
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 } 
		}
		
    }

}

#2018 Bangsamoro Organic Law
historical_union_dissolution.17 = {
    type = country_event
	placement = scope:colonial_state

    title = PHI_MGD_dissolution.t 								# Title of the event; ADD LOCALISATION
    desc = PHI_MGD_dissolution.d 								# Description of the event; ADD LOCALISATION
    #flavor = PHI_MGD_dissolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:PHI ?= this
		game_date >= 2018.8.10
		game_date < 2028.8.10
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:MGD										# Change TAG of the colony ****
		}
		any_scope_state = { 
			state_region = { is_homeland = cu:moro }
		}
		
		# Event has not been fired before
		NOT = { has_variable = PHI_MGD_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Generate list of provinces to be released				# DO NOT TOUCH ROOT SECTION
		random_scope_state = {
			limit = {
				state_region = { is_homeland = cu:moro }		# Change homeland identity to match colony to be released ****
			}
			save_scope_as = colonial_state
		}
	
		# Fire only once
		set_variable = PHI_MGD_dissolution_hud					# Change variable ****
	
	}
    
	option = {
        name = italian_decolonisation_indy.option.1			# Grant autonomy
		highlighted_option = yes
		
		#Subject becomes independent
		create_country = {
			tag = MGD										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			state = scope:colonial_state
			
			on_created = {									# Set government laws & rulers here
				
				# Laws
				if = { 
					limit = { 
						ROOT = { 
							is_a_monarchy = yes 
						}
					}
					effect_starting_politics_constitutional_monarchy = yes
				}
				else = {
					effect_starting_politics_presidential_republic = yes
				}
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_unitary_state = yes
				effect_starting_politics_war_policy_pro_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_free_trade = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_natural_resource = yes
				
				effect_starting_politics_fiat_standard = yes
				
			}
			
		}
		if = {
			limit = { exists = c:MGD }
			every_scope_state = {
				limit = {
					state_region = { is_homeland = cu:moro }			# Change homeland identity to match colony to be released ****
				}
				set_state_owner = c:MGD									# Change TAG to colony ****
			}
			create_diplomatic_pact = {
				country = c:MGD
				type = special_administrative_region
			}
			create_diplomatic_pact = {
				country = c:MGD
				type = legal_union
			}
			create_diplomatic_pact = {
				country = c:MGD
				type = currency_union
			}
			set_relations = { country = c:MGD value = 100 }
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.2		# Refuse Autonomy
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:moro
			value = large_radicals
		}
		every_scope_state = {
			limit = { state_region = { is_homeland = cu:moro } }
			add_modifier = { 
				name = nationalist_agitation 
				months = 60 
				is_decaying = yes 
			} 
		}
		
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#1991 Independence of Somaliland
historical_union_dissolution.18 = {
    type = country_event

    title = SOM_SML_dissolution.t 								# Title of the event; ADD LOCALISATION
    desc = SOM_SML_dissolution.d 								# Description of the event; ADD LOCALISATION
    #flavor = SOM_SML_dissolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:SOM ?= this
		game_date >= 1991.5.18
		game_date < 2001.5.18
		
		is_a_democracy = yes									# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:SML										# Change TAG of the colony ****
		}
		owns_entire_state_region = STATE_SOMALILAND
		
		# Event has not been fired before
		NOT = { has_variable = SOM_SML_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = SOM_SML_dissolution_hud					# Change variable ****
	
	}
    
	option = {
        name = italian_decolonisation_indy.option.1			# Grant autonomy
		highlighted_option = yes
		
		#Subject becomes independent
		create_country = {
			tag = SML										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			province = p:x7D4764 
			province = p:x284319 
			province = p:x8AA210 
			province = p:x3BB51B 
			province = p:xAE76D1 
			province = p:xD3EE2E 
			province = p:x2FB806 
			province = p:xDF951C 
			province = p:x20E090 
			province = p:xD6084C 
			province = p:x678D0D 
			province = p:xCA0AFC 
			province = p:x395C77 
			province = p:xDDAC33 
			province = p:x184064 
			province = p:xCCC39F 
			province = p:x089FE7 
			province = p:xF2A924 
			province = p:x524E91 
			province = p:x0CE1C7 
			province = p:x5C2622 
			province = p:x2C4BFE 
			province = p:x48FFF1 
			province = p:xC6A5CB 
			province = p:x9DA796 
			province = p:xF9565C 
			province = p:x12FDBA 
			province = p:x7FBAFA 
			province = p:x4A6DFD 
			province = p:xE19C5A 
			province = p:x9ACA9E 
			province = p:x85FD85 
			province = p:xDEFB4F 
			province = p:xD85A85
			
			on_created = {									# Set government laws & rulers here
				
				# Laws
				effect_starting_politics_presidential_republic = yes
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_unitary_state = yes
				effect_starting_politics_war_policy_pro_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_free_trade = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				effect_starting_politics_specialisation_natural_resource = yes
				
				effect_starting_politics_fiat_standard = yes
				
			}
			
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.2		# Refuse Autonomy
		default_option = yes
		
		# Internal unrest
		add_radicals = {
			culture = cu:somalilander
			value = very_large_radicals
		}
		
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}

#1991 Sahrawi Arab Democratic Republic
historical_union_dissolution.19 = {
    type = country_event

    title = MOR_WSA_dissolution.t 								# Title of the event; ADD LOCALISATION
    desc = MOR_WSA_dissolution.d 								# Description of the event; ADD LOCALISATION
    #flavor = MOR_WSA_dissolution.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/waving_flag.dds" 		# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {													# What triggers the event, if using other events or journal entries leave empty
		
		#Overlord conditions
		c:MOR ?= this
		game_date >= 1991.9.6
		game_date < 2001.9.6
		
		is_a_democratic_monarchy = yes							# Correct gov types
		is_sufficiently_independent = yes						# is_vassal = no		
		is_at_war = no											# war = no
		
		#Release country
		NOT = { 												# Colony to be released must not already exist on the map
			exists = c:WSA										# Change TAG of the colony ****
		}
		owns_entire_state_region = STATE_WEST_SAHARA
		
		# Event has not been fired before
		NOT = { has_variable = MOR_WSA_dissolution_hud }		# CHANGE ****
		
    }
	
	immediate = {
	
		# Fire only once
		set_variable = MOR_WSA_dissolution_hud					# Change variable ****
	
	}
    
	option = {
        name = italian_decolonisation_indy.option.1			# Grant autonomy
		highlighted_option = yes
		
		#Subject becomes independent
		create_country = {
			tag = WSA										# Change TAG of country being released ****
			origin = ROOT									# TAG where the created country takes tech from
			province = p:x93E37A 
			province = p:xB533D3 
			province = p:xF1FF9E 
			province = p:x82A9C3 
			province = p:xAB9DE9 
			province = p:x7E5A63 
			province = p:x96009F 
			province = p:x53DC1A 
			province = p:x19094B 
			province = p:x4A82A1 
			province = p:x3F400E 
			province = p:x7E1555 
			province = p:xA98D71 
			province = p:x87BB99 
			province = p:x4D7B2F 
			province = p:xEB7C20 
			province = p:xA0EF00
			province = p:x85BAAD
			province = p:x2B6F2B
			
			on_created = {									# Set government laws & rulers here
				
				# SET laws for colony ****
				effect_starting_politics_semi_presidential_republic = yes
				effect_starting_politics_democratic = yes
				effect_starting_politics_constitutional_unitary_state = yes
				effect_starting_politics_war_policy_anti_military = yes
				effect_starting_politics_economic_policy_interventionism = yes
				effect_starting_politics_trade_policy_protectionism = yes
				effect_starting_politics_anti_nuclear_policy = yes
				
				# Set diplomatic recognition
				set_country_type = unrecognized
				
				#Mohamed Abdelaziz
				create_character = {
					first_name = "Mohamed_Abdelaziz_first_name"
					last_name = "Mohamed_Abdelaziz_last_name"
					ruler = yes ig_leader = yes historical = yes
					birth_date = 1947.8.17
					interest_group = ig_rural_folk
					ideology = ideology_democratic
					culture = cu:saharan
					religion = rel:sunni
					traits = {
						brave
						persistent
						ambitious
					}
					on_created = { set_variable = Mohamed_Abdelaziz }
				}
				
			}
			
		}
		
		ai_chance = { 
			base = 90
		}
		
    }
	
    option = {
        name = historical_union_dissolution.option.2		# Refuse Autonomy
		default_option = yes
		
		# Natives are angry!
		every_scope_state = {
			limit = {
		 		state_region = { is_homeland = cu:saharan }	# Change homeland identity to match colony to be released ****
		 	}
			add_radicals_in_state = {
				culture = cu:saharan						# Change culture ****
				value = large_radicals
			}
			add_modifier = { name = nationalist_agitation months = 60 is_decaying = yes } 
		}
		
		change_infamy = 10
		
		ai_chance = { 
			base = 10 modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
    }

}