namespace = revolution_system

revolution_system.1 = {
	type = country_event
	hidden = yes

	trigger = {
	
		#Only fires for revolutionary countries
		is_revolutionary = yes
		
		OR = {
		
			#Voting rights
			AND = { 
				ruler ?= { has_ideology = ideology:ideology_autocratic }
				NOT = { has_law = law_type:law_appointed_legislature }
			}
			AND = { 
				ruler ?= { has_ideology = ideology:ideology_power_hungry }
				NOT = { has_law = law_type:law_appointed_legislature }
			}
			AND = { 
				ruler ?= { has_ideology = ideology:ideology_elitist }
				NOT = { has_law = law_type:law_technocratic_legislature }
			}
			AND = { 
				ruler ?= { has_ideology = ideology:ideology_democratic }
				NOT = { has_law = law_type:law_democratic_legislature }
			}
			AND = { 
				ruler ?= { has_ideology = ideology:ideology_liberal }
				NOT = { has_law = law_type:law_democratic_legislature }
			}
			
			#Government system
			AND = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_monarchist }
				NOT = { has_law = law_type:law_HOS_monarch }
			}
			AND = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_republican }
				NOT = { has_law = law_type:law_HOS_president }
			}
			AND = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_theocrat }
				NOT = { has_law = law_type:law_HOS_religious_leader }
			}
			AND = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_militarist }
				NOT = { has_law = law_type:law_HOS_nationalist_leader }
			}
			AND = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_communist }
				NOT = { has_law = law_type:law_HOS_communist_leader }
			}
			
		}
		
	}

	immediate = {
		
		# Add correct gov for rebels
		if = {
			limit = { 
				ruler ?= { has_ideology = ideology:ideology_autocratic }
				NOT = { has_law = law_type:law_appointed_legislature } 
			}
			activate_law = law_type:law_appointed_legislature
			activate_law = law_type:law_no_voting
		}
		if = {
			limit = { 
				ruler ?= { has_ideology = ideology:ideology_power_hungry }
				NOT = { has_law = law_type:law_appointed_legislature }
			}
			activate_law = law_type:law_appointed_legislature
			activate_law = law_type:law_no_voting
		}
		if = {
			limit = { 
				ruler ?= { has_ideology = ideology:ideology_elitist }
				NOT = { has_law = law_type:law_technocratic_legislature }
			}
			activate_law = law_type:law_technocratic_legislature
			activate_law = law_type:law_gerrymandered_voting
		}
		if = {
			limit = { 
				ruler ?= { has_ideology = ideology:ideology_democratic }
				NOT = { has_law = law_type:law_democratic_legislature }
			}
			activate_law = law_type:law_democratic_legislature
			activate_law = law_type:law_harassment_voting
		}
		if = {
			limit = { 
				ruler ?= { has_ideology = ideology:ideology_liberal }
				NOT = { has_law = law_type:law_democratic_legislature }
			}
			activate_law = law_type:law_democratic_legislature
			activate_law = law_type:law_fair_voting
		}
		
		if = {
			limit = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_monarchist }
				NOT = { has_law = law_type:law_HOS_monarch }
			}
			activate_law = law_type:law_HOS_monarch
		}
		if = {
			limit = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_republican }
				NOT = { has_law = law_type:law_HOS_president }
			}
			activate_law = law_type:law_HOS_president
		}
		if = {
			limit = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_theocrat }
				NOT = { has_law = law_type:law_HOS_religious_leader }
			}
			activate_law = law_type:law_HOS_religious_leader
		}
		if = {
			limit = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_militarist }
				NOT = { has_law = law_type:law_HOS_nationalist_leader }
			}
			activate_law = law_type:law_HOS_nationalist_leader
		}
		if = {
			limit = { 
				any_interest_group = { is_in_government = yes is_strongest_ig_in_government = yes has_ideology = ideology:ideology_communist }
				NOT = { has_law = law_type:law_HOS_communist_leader }
			}
			activate_law = law_type:law_HOS_communist_leader
		}
		
		# Antagonise countries & make friends
		if = {
			limit = {
				is_a_dictatorship = yes
			}
			every_country = {
				limit = { NOT = { is_a_dictatorship = yes } }
				change_relations = { country = ROOT value = -200 }
			}
			every_country = {
				limit = { is_a_dictatorship = yes }
				change_relations = { country = ROOT value = 100 }
			}
		}
		if = {
			limit = {
				is_a_nationalist_government = yes
			}
			every_country = {
				limit = { NOT = { is_a_nationalist_government = yes } }
				change_relations = { country = ROOT value = -200 }
			}
			every_country = {
				limit = { is_a_nationalist_government = yes }
				change_relations = { country = ROOT value = 100 }
			}
		}
		else_if = {
			limit = {
				is_a_communist_government = yes
			}
			every_country = {
				limit = { NOT = { is_a_communist_government = yes } }
				change_relations = { country = ROOT value = -200 }
			}
			every_country = {
				limit = { is_a_communist_government = yes }
				change_relations = { country = ROOT value = 100 }
			}
		}
		else_if = {
			limit = {
				is_a_theocratic_government = yes
			}
			every_country = {
				limit = { NOT = { is_a_theocratic_government = yes } }
				change_relations = { country = ROOT value = -200 }
			}
			every_country = {
				limit = { is_a_theocratic_government = yes }
				change_relations = { country = ROOT value = 100 }
			}
		}
		
	}

}

revolution_system.2 = {
	type = country_event
	hidden = yes
	
	immediate = {
		
		random_country = {
			limit = { 
				has_variable = demand_puppet_gov_change_overlord
			}
			remove_variable = demand_puppet_gov_change_overlord
			save_scope_as = demand_puppet_gov_change_overlord
		}
		
		if = {
			limit = { is_sufficiently_independent = yes }
			create_diplomatic_play = {
				type = dp_independence
				target_country = scope:demand_puppet_gov_change_overlord
				add_war_goal = {
					holder = scope:demand_puppet_gov_change_overlord
					type = make_protectorate
					target_country = ROOT
				}
			}
		}
		else_if = {
			limit = { NOT = { is_sufficiently_independent = yes } }
			create_diplomatic_play = {
				type = dp_independence
				target_country = scope:demand_puppet_gov_change_overlord
				add_war_goal = {
					holder = scope:demand_puppet_gov_change_overlord
					type = make_protectorate
					target_country = ROOT
				}
			}
		}
		
	}
	
}

revolution_system.3 = {
	type = country_event
	hidden = yes
	
	immediate = {
		
		if = {
			limit = { is_subject = no }
			random_country = {
				limit = { 
					has_variable = demand_puppet_gov_change_overlord
				}
				remove_variable = demand_puppet_gov_change_overlord
				create_diplomatic_play = {
					type = dp_make_dominion
					target_country = ROOT
				}
			}
		}
		else_if = {
			limit = { is_subject = yes }
			random_country = {
				limit = { 
					has_variable = demand_puppet_gov_change_overlord
				}
				remove_variable = demand_puppet_gov_change_overlord
				create_diplomatic_play = {
					type = dp_transfer_subject
					target_country = ROOT
				}
			}
		}
		
	}
	
}

revolution_system.4 = {
	type = country_event
	hidden = yes
	
	trigger = {
	
		#Country was formerly recognised
		OR = { 
			has_variable = revolted_from_recognised_country
			has_variable = revolted_from_unsc_country
		}
	
		#Only fires for revolutionary countries
		is_revolutionary = no is_secessionist = no
		has_revolution = no
		is_at_war = no
		
	}
	
	immediate = {
		
		if = {
			limit = { 
				has_variable = revolted_from_recognised_country
				NOT = { is_country_type = recognized } 
			}
			set_country_type = recognized
			add_modifier = { name = unga_member }
		}
		if = {
			limit = { 
				has_variable = revolted_from_unsc_country
				NOT = { has_modifier = unsc_permanent_member }
			}
			add_modifier = { name = unsc_permanent_member }
		}
		
		remove_variable = revolted_from_recognised_country
		remove_variable = revolted_from_unsc_country
		
	}
	
}

#Palace Coup
revolution_system.5 = {
	type = country_event

	title = palace_coup.t
	desc = palace_coup.d
	flavor = palace_coup.f

	event_image = {
		video = "gfx/event_pictures/unspecific_politicians_arguing.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	duration = 1
	
	cooldown = { days = very_long_modifier_time }

	trigger = {
		
		#Paramilitary group is angry with ruler
		has_variable = paramilitary_groups_loyalty
		root.var:paramilitary_groups_loyalty = 0
		
		#No clash with another purge or coup mechanic
		custom_tooltip = {
			text = je_no_current_plot_against_the_dictator.tt
			NOT = { has_journal_entry = je_plot_against_the_dictator_system }
		}
		NOT = { has_journal_entry = je_coup }
		
		#Not enacting a law that the paramilitary group likes
		trigger_if = {
			limit = { 
				enacting_any_law = yes 
			}
			scope:paramilitary_IG ?= {
				law_stance = {
					law = owner.currently_enacting_law.type
					value < neutral
				}
			}
		}
		
	}

	immediate = {
		
		ruler ?= { 
			save_scope_as = palace_coup_ruler
			interest_group = { save_scope_as = palace_coup_ruler_ig }
		}
		
	}

	option = {
		name = palace_coup_accept_option 				# Accept the coup
		default_option = yes
		
		#Ruler's IG is weakened
		if = {
			limit = { exists = scope:palace_coup_ruler_ig }
			scope:palace_coup_ruler_ig = {
				hidden_effect = { remove_modifier = party_in_chaos_modifier }
				add_modifier = {
					name = party_in_chaos_modifier
					years = 5
					is_decaying = yes
				}
			}
		}
		
		#Ruler is removed from office
		if = {
			limit = { exists = scope:palace_coup_ruler_ig }
			random_list = {
				1 = { 
					scope:palace_coup_ruler = { kill_character = yes }
				}
				1 = { 
					scope:palace_coup_ruler = { 
						convert_IG_ideology_to_agitator_ideology = yes
						exile_character_with_martyrdom = yes
					}
				}
			}
		}
		
		#New Reactionary Ruler is installed
		if = {
			limit = { exists = scope:palace_coup_ruler_ig }
			create_character = {
				ruler = yes ig_leader = yes
				female = no
				interest_group = scope:palace_coup_ruler_ig
				ideology = ideology_autocratic
			}
		}

		#New dictatorship
		effect_starting_politics_dictatorship = yes
		if = {
			limit = { exists = scope:palace_coup_ruler_ig }
			every_interest_group = {
				limit = { NOT = { is_interest_group_type = scope:palace_coup_ruler_ig } }
				remove_ruling_interest_group = yes
			}
			scope:palace_coup_ruler_ig = {
				add_ruling_interest_group = yes
			}
		}
		
		#Restore gov type
		if = {
			limit = {
				exists = scope:palace_coup_ruler_ig
				scope:palace_coup_ruler_ig = {
					law_stance = {
						law = law_type:law_HOS_monarch
						value >= strongly_approve
					}
				}
			}
			activate_law = law_type:law_HOS_monarch
		}
		if = {
			limit = {
				exists = scope:palace_coup_ruler_ig
				scope:palace_coup_ruler_ig = {
					law_stance = {
						law = law_type:law_HOS_president
						value >= strongly_approve
					}
				}
			}
			activate_law = law_type:law_HOS_president
		}
		if = {
			limit = {
				exists = scope:palace_coup_ruler_ig
				scope:palace_coup_ruler_ig = {
					law_stance = {
						law = law_type:law_HOS_religious_leader
						value >= strongly_approve
					}
				}
			}
			activate_law = law_type:law_HOS_religious_leader
		}
		if = {
			limit = {
				exists = scope:palace_coup_ruler_ig
				scope:palace_coup_ruler_ig = {
					law_stance = {
						law = law_type:law_HOS_nationalist_leader
						value >= strongly_approve
					}
				}
			}
			activate_law = law_type:law_HOS_nationalist_leader
		}
		if = {
			limit = {
				exists = scope:palace_coup_ruler_ig
				scope:palace_coup_ruler_ig = {
					law_stance = {
						law = law_type:law_HOS_communist_leader
						value >= strongly_approve
					}
				}
			}
			activate_law = law_type:law_HOS_communist_leader
		}
		
		#Paramilitary becomes loyal again
		set_variable = { 
			name = paramilitary_groups_loyalty
			value = 100
		}
		
		post_notification = new_ruler
		
		ai_chance = {
			base = 50
			modifier = { trigger = { has_global_variable = historical_railroading_active } add = -100 }
		}
		
	}
	
	option = {
		name = palace_coup_reject_option 		# Reject the coup
		
		#Coup leader is killed
		if = {
			limit = { exists = scope:palace_coup_ruler_ig }
			if = {
				limit = { 
					scope:palace_coup_ruler_ig = { 
						leader = { is_ruler = no }
					} 
				}
				scope:palace_coup_ruler_ig = { 
					leader = { save_scope_as = coup_leader_character }
				}
				random_list = {
					1 = { 
						scope:coup_leader_character = { kill_character = yes }
					}
					1 = { 
						scope:coup_leader_character = { exile_character = yes }
					}
				}
			}
		}
		
		#Paramilitary becomes loyal again
		set_variable = { 
			name = paramilitary_groups_loyalty
			value = 100
		}
		
		#Armed Forces gains Clout
		ig:ig_armed_forces = {
			hidden_effect = { remove_modifier = politically_strengthened_modifier }
			add_modifier = {
				name = politically_strengthened_modifier
				years = 5
				is_decaying = yes
			}
		}
		
		#National instability
		hidden_effect = {
			remove_modifier = stirrings_of_revolution
		}
		add_modifier = {
			name = stirrings_of_revolution
			years = 5
			is_decaying = yes
		}
		add_radicals = {
			value = large_radicals
		}
		
		#Fighting damages the capital
		random_scope_state = {
			limit = { is_capital = yes }
			state_region = { add_devastation = 20 }
		}
		
		ai_chance = {
			base = 50
		}
		
	}
	
}

#Power Vacuum
revolution_system.6 = {
	type = country_event

	title = power_vacuum.t
	desc = power_vacuum.d
	flavor = power_vacuum.f

	event_image = {
		video = "gfx/event_pictures/unspecific_politicians_arguing.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	duration = 1

	trigger = {
		
		#Triggered by On Action
		
	}

	immediate = {
		
		
		
	}

	option = {
		name = power_vacuum.option 				# Accept the vacuum
		default_option = yes
		
		effect_opposition_angry_with_government = yes
		
	}
	
}

#Crash Protection (Prevent crash caused by a civil war spawning in a 1 state country which has a split state)
revolution_system.7 = {
	type = country_event

	title = peaceful_revolution_generic.t
	desc = peaceful_revolution_generic.d
	flavor = peaceful_revolution_generic.f

	event_image = {
		video = "gfx/event_pictures/europenorthamerica_political_extremism.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_protest.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	duration = 1

	trigger = {
		
		always = no
		
		# There is a brewing revolution
		any_political_movement = {
			is_revolutionary = yes
		}
		#any_civil_war = {
		#	is_civil_war_type = revolution
		#	civil_war_progress > 0.5
		#}
		
		# Every state of THIS will revolt upon revolution
		num_states = 1
		any_scope_state = { is_split_state = yes }
		NOT = { any_scope_state = { is_in_revolt = no } }
		
	}

	immediate = {
		
		random_political_movement = {
			limit = { 
				is_revolutionary = yes
			}
			save_scope_as = revolting_political_movement
		}
		
	}

	option = {
		name = peaceful_revolution_generic.option 				# OK
		
		# Kill cause of revolt
		if = {
			limit = { 
				scope:revolting_political_movement = { 
					law_enactment_stance = { law = owner.currently_enacting_law.type value > neutral } 
				} 
			}
			activate_law = scope:revolting_political_movement.desired_law
		}
		
		if = {
			limit = { 
				scope:revolting_political_movement = { 
					law_stance = { law = owner.currently_enacting_law.type value > neutral }
				}
				enacting_any_law = yes
			}
			add_enactment_setback = 3
		}
		
		# Topple government
		if = {
			limit = { 
				exists = ruler 
				OR = { 
					is_player = yes
					ruler = { is_historical = no }
				}
			}
			ruler = {
				kill_character = yes
			}
		}
		every_interest_group = {
			limit = { 
				is_in_government = yes 
				is_insurrectionary = no
			}
			remove_ruling_interest_group = yes
		}
		#if = {
		#	limit = { is_subject = yes }
		#	make_independent = yes
		#}
		
		# Consequences of revolution
		change_infamy = 5
		
	}
	
}

revolution_system.8 = {
	type = country_event
	hidden = yes
	
	immediate = {
		
		random_country = {
			limit = { 
				has_variable = war_target_marker
			}
			remove_variable = war_target_marker
			save_scope_as = war_target_country
			
			create_diplomatic_play = {
				name = nuclear_war
				type = dp_annex_war_historical
				target_country = ROOT
				
				war = yes
				
				add_war_goal = {
					holder = ROOT
					type = annex_country
					target_country = scope:war_target_country
				}
			}
		}
		
	}
	
}

# SPS if all opposition parties are blocked from joining any parties
revolution_system.9 = {
    type = country_event

    title = single_party_state_de_facto.t 							# Title of the event; ADD LOCALISATION
    desc = single_party_state_de_facto.d 							# Description of the event; ADD LOCALISATION
    flavor = single_party_state_de_facto.f 							# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2" }

    icon = "gfx/interface/icons/event_icons/event_portrait.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#All parties allowed
		NOR = { has_law = law_type:law_parties_not_allowed has_law = law_type:law_single_party_state }
		
		#No opposition IG is allowed to join a party
		any_interest_group = {
			is_in_government = no
			has_variable = IG_party_banned
		}
		NOT = {
			any_interest_group = {
				is_in_government = no
				NOT = { has_variable = IG_party_banned }
			}
		}
		
    }
	
	immediate = {
		
		
		
	}
    
	option = {
        name = single_party_state_de_facto.option					# Great
		default_option = yes
		
		activate_law = law_type:law_single_party_state
		
		effect_opposition_angry_with_government = yes
		
    }

}

# Enforce Regime Change
revolution_system.10 = {
    type = country_event
	placement = var:most_recent_war_opponent

    title = regime_change_failsafe.t 								# Title of the event; ADD LOCALISATION
    desc = regime_change_failsafe.d 								# Description of the event; ADD LOCALISATION
    flavor = regime_change_failsafe.f 								# Flavor for event; ADD LOCALISATION, IF REQUIRED

    event_image = { video = "gfx/event_pictures/unspecific_signed_contract.bk2" }

    icon = "gfx/interface/icons/event_icons/event_portrait.dds" 	# Icon that shows on the map or the outliner
    on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear" 	# Sound effect if needed

    duration = 1 # Duration to fire if triggers are met
	
	trigger = {														# What triggers the event, if using other events or journal entries leave empty
		
		#Recently had regime change
		has_modifier = forced_regime_change
		
		#Locate victor
		has_variable = most_recent_war_opponent
		
    }
	
	immediate = {
		
		random_country = {
			limit = { root.var:most_recent_war_opponent ?= this }
			save_scope_as = foreign_power_regime_change
		}
		
	}
    
	option = {
        name = regime_change_failsafe.option						# Great
		default_option = yes
		
		#Make independent
		if = {
			limit = { 
				is_subject = yes 
				NOT = { is_subject_of = var:most_recent_war_opponent }
			}
			make_independent = yes
		}
		
		#Impose regime change
		copy_laws = var:most_recent_war_opponent
		
		#Install ruler
		random_country = {
			limit = { root.var:most_recent_war_opponent ?= this }
			ruler ?= { interest_group = { save_scope_as = foreign_interest_group } }
		}
		random_scope_character = {
			limit = { 
				is_ruler = no 
				has_role = politician
				interest_group = { is_same_interest_group_type = scope:foreign_interest_group }
			}
			set_character_as_ruler = yes
		}
		
		#Gain relations with installer
		set_relations = {
			country = var:most_recent_war_opponent
			value = 100
		}
		
		#Remove recent regime change
		remove_variable = most_recent_war_opponent
		
    }

}